bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isFunctionReducer())  {	  if(helperCode    ==    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	52	None	replace
2	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunction())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunction())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isFunction())  {	  if(helperCode    ==    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	52	None	replace
3	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSameAssignmentOp(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSameAssignmentOp(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSameAssignmentOp(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	52	None	replace
4	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.RETURN)  {	  if(helperCode    >=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	143	1	replace
5	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [FE]  IllegalStateException  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.RETURN)  {	  if(helperCode    >=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	143	1	replace
6	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aiderCode.getType()  ==  Token.RETURN)  {  [CE]  cannot  find  symbol  aiderCode  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  aiderCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aiderCode.getType()  ==  Token.RETURN)  {	  if(helperCode    >=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	143	None	replace
7	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN,  reductions)  {  [CE]  ')'  expected  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN,  reductions)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN,  reductions)  {	  if(helperCode    >=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  ')'  expected	143	None	replace
8	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
9	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
10	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
11	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
12	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  &&  HelperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  &&  HelperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  &&  HelperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
13	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
14	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
15	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  >=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  >=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
16	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  	158	None	add
17	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  >>  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  >>  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  >>  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
18	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
19	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
20	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
21	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reduction.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reduction.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reduction.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    &&    reducer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  reduction	168	None	replace
22	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reductions.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reductions.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reductions.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    &&    reducer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
23	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  reducer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  reducer.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  reducer.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    &&    reducer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
24	[BUG]  [BUGGY]  if(helperCode!=  null  ||  reducer.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  reducer.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  reducer.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    &&    reducer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
25	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reducers.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reducers.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reducers.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    &&    reducer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
26	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reducedr.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  reducedr  [FE]                      AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reducedr.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reducedr.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    &&    reducer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  reducedr	168	None	replace
27	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
28	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  ||  HelperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  ||  HelperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  ||  HelperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
29	[BUG]  [BUGGY]  if(helperCode  >=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  >=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  >=  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	144	None	replace
30	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	144	None	replace
31	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( "null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
32	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "null "))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( "null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
33	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.equals( "null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
34	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "null "))  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.equals( "null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
35	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
36	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "null "))  {  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
37	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "reduction "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "reduction "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
38	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "reduction "))  {  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "reduction "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "reduction "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
39	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.equals( "null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  AssertionFailedError  	172	8	replace
40	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "null "))  {  [FE]  AssertionFailedError  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals( "null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  AssertionFailedError  	172	8	replace
41	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "reduction "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.equals( "reduction "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  AssertionFailedError  	172	8	replace
42	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "reduction "))  {  [FE]  AssertionFailedError  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "reduction "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals( "reduction "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  AssertionFailedError  	172	8	replace
43	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.COST)  {  [CE]  cannot  find  symbol  COST  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.COST)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.COST)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode    >>    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  COST	59	None	replace
44	[BUG]  [BUGGY]  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode    >>    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	59	None	replace
45	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isEmpty(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isEmpty(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isEmpty(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	135	None	replace
46	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isEmpty(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isEmpty(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isEmpty(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	135	None	replace
47	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isFunction(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isFunction(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isFunction(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	135	None	replace
48	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  HelperCodeUtil.isEmpty(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  HelperCodeUtil.isEmpty(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  HelperCodeUtil.isEmpty(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	135	None	replace
49	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isEmpty(reductions))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isEmpty(reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isEmpty(reductions))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	135	None	replace
50	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  helperCode);	  NodeTraversal.traverse(compiler,    reducerCode,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
51	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reducerCode,  helperCode);	  NodeTraversal.traverse(compiler,    reducerCode,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
52	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reducerCode);	  NodeTraversal.traverse(compiler,    reducerCode,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
53	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  helperCode,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  helperCode,  reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  helperCode,  reductions);	  NodeTraversal.traverse(compiler,    reducerCode,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
54	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  reducer);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  helperCode,  reducer);	  NodeTraversal.traverse(compiler,    reducerCode,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
55	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  reducerCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  reducerCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  helperCode,  reducerCode);	  NodeTraversal.traverse(compiler,    reducerCode,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);	  NodeTraversal.traverse(compiler,    reducerCode,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
57	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  HelperCode  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode    ==    null    ||    HelperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	179	None	replace
58	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.GETPROP)  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    HelperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	179	None	replace
59	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETELEM)  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETELEM)  {	  if(helperCode    ==    null    ||    HelperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	179	None	replace
60	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.SETPROP)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode    ==    null    ||    HelperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	179	None	replace
61	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
62	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
63	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
64	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.NAME)    {    If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  	80	None	add
65	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
66	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
67	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
68	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.STRING)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.STRING)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RESTURN)    {    	compilable	  [FE]  AssertionFailedError  	176	8	replace
69	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.STRING)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.STRING)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.STRING)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RESTURN)    {    	compilable	  [FE]  AssertionFailedError  	176	8	replace
70	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.FUNCTION)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RESTURN)    {    	compilable	  [FE]  IllegalStateException  	176	1	replace
71	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.FUNCTION)  {  [FE]  IllegalStateException  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.FUNCTION)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RESTURN)    {    	compilable	  [FE]  IllegalStateException  	176	1	replace
72	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RESULT)  {  [CE]  cannot  find  symbol  RESULT  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RESTURN)    {    	non-compiled	[CE]  cannot  find  symbol  RESULT	176	None	replace
73	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.BLOCK)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.BLOCK)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RESTURN)    {    	compilable	  [FE]  AssertionFailedError  	176	8	replace
74	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.BLOCK)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.BLOCK)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.BLOCK)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RESTURN)    {    	compilable	  [FE]  AssertionFailedError  	176	8	replace
75	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EMPTY)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EMPTY)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RESTURN)    {    	compilable	  [FE]  AssertionFailedError  	176	8	replace
76	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EMPTY)  {  [FE]  AssertionFailedError  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EMPTY)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EMPTY)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RESTURN)    {    	compilable	  [FE]  AssertionFailedError  	176	8	replace
77	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aidCode.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  aidCode  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aidCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aidCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	157	None	replace
78	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reductions.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reductions.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reductions.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
79	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reduction.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reduction.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reduction.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  reduction	157	None	replace
80	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reducer.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reducer.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reducer.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
81	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=    null    ||    HelperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	88	None	replace
82	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=    null    ||    HelperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
83	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=    null    ||    HelperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
84	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(reduction.getName()))  {  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(reduction.getName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals(reduction.getName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getName()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	154	None	replace
85	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.equals(reduction.getName()))  {  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.equals(reduction.getName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.equals(reduction.getName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getName()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	154	None	replace
86	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(region.getName()))  {  [CE]  cannot  find  symbol  region  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(region.getName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(region.getName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getName()))    {    	non-compiled	[CE]  cannot  find  symbol  region	154	None	replace
87	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.equals(reduction.getName()))  {  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.equals(reduction.getName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.equals(reduction.getName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getName()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	154	None	replace
88	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getReductionName()))  {  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getReductionName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(reduction.getReductionName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getName()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	154	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  helperCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  new  ReductionGatherer(),  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  new  ReductionGatherer(),  reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  new  ReductionGatherer(),  reductions);	  NodeTraversal.traverse(compiler,    reducerCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  reductions,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  reductions,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  reductions,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  helperCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  helperCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  helperCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aiderCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  aiderCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  aiderCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
96	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.RETURN)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.RETURN)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	167	None	replace
97	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	167	1	replace
98	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.GETPROP)  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	167	1	replace
99	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.COST)  {  [CE]  cannot  find  symbol  COST  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.COST)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.COST)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  COST	167	None	replace
100	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
101	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
102	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    If(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  	108	None	add
103	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
104	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
105	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.CALL)  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
106	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
107	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isQuoted())  {  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isQuoted())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	123	None	replace
108	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isReduction())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isReduction())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isReduction())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	123	None	replace
109	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionPrototype())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionPrototype())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isFunctionPrototype())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	123	None	replace
110	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    >=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	58	8	replace
111	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    >=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	58	8	replace
112	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
113	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
114	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
115	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
116	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
117	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
118	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
119	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
120	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  &&  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  &&  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
121	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  &&  helperCode.getType()!=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  &&  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  &&  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
122	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
123	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
124	[BUG]  [BUGGY]  Node  addingRoot  =  reducer.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reducer.getFirstChild();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reducer.getFirstChild();	  Node    addingRoot    =    reducer.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
125	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.getFirstChild();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.getFirstChild();	  Node    addingRoot    =    reducer.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
126	[BUG]  [BUGGY]  Node  addingRoot  =  reduction.getFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reduction.getFirstChild();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reduction.getFirstChild();	  Node    addingRoot    =    reducer.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
127	[BUG]  [BUGGY]  Node  addingRoot  =  reducer.getLastChild(),  helperCode);  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reducer.getLastChild(),  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reducer.getLastChild(),  helperCode);	  Node    addingRoot    =    reducer.getLastChild();    	non-compiled	[CE]  ';'  expected	160	None	replace
128	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.getLastChild();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.getLastChild();	  Node    addingRoot    =    reducer.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
129	[BUG]  [BUGGY]  Node  addingRoot  =  reduction.getLastChild();  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reduction.getLastChild();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reduction.getLastChild();	  Node    addingRoot    =    reducer.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
130	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	compilable	  [FE]  IllegalStateException  	109	1	replace
131	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.CALL)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	compilable	  [FE]  IllegalStateException  	109	1	replace
132	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	compilable	  [FE]  IllegalStateException  	109	1	replace
133	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.CALL)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	compilable	  [FE]  IllegalStateException  	109	1	replace
134	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	compilable	  [FE]  IllegalStateException  	109	1	replace
135	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.CALL)  {  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	compilable	  [FE]  IllegalStateException  	109	1	replace
136	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	109	8	replace
137	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.CALL)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	109	8	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCode,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCode,  reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reductions,  helperCode,  reductions);	  NodeTraversal.traverse(compiler,    reductions,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCode);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCode);	  NodeTraversal.traverse(compiler,    reductions,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reductions);	  NodeTraversal.traverse(compiler,    reductions,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
141	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(reduction.getSourceName()))  {  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(reduction.getSourceName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals(reduction.getSourceName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getSourceName()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	152	None	replace
142	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.equals(reduction.getSourceName()))  {  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.equals(reduction.getSourceName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.equals(reduction.getSourceName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getSourceName()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	152	None	replace
143	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(region.getSourceName()))  {  [CE]  cannot  find  symbol  region  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(region.getSourceName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(region.getSourceName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getSourceName()))    {    	non-compiled	[CE]  cannot  find  symbol  region	152	None	replace
144	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.equals(reduction.getSourceName()))  {  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.equals(reduction.getSourceName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.equals(reduction.getSourceName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getSourceName()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	152	None	replace
145	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reductionMap.getSourceName()))  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reductionMap.getSourceName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(reductionMap.getSourceName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getSourceName()))    {    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
146	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "/ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( "/ "))  {	  if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    	compilable	  [FE]  IllegalStateException  	20	1	replace
147	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "/ "))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "/ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( "/ "))  {	  if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    	compilable	  [FE]  IllegalStateException  	20	1	replace
148	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "- "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( "- "))  {	  if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    	compilable	  [FE]  IllegalStateException  	20	1	replace
149	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "- "))  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "- "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( "- "))  {	  if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    	compilable	  [FE]  IllegalStateException  	20	1	replace
150	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( "* "))  {	  if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    	compilable	  [FE]  IllegalStateException  	20	1	replace
151	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "* "))  {  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( "* "))  {	  if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    	compilable	  [FE]  IllegalStateException  	20	1	replace
152	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "n "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( "n "))  {	  if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    	compilable	  [FE]  IllegalStateException  	20	1	replace
153	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "n "))  {  [FE]  IllegalStateException  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "n "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( "n "))  {	  if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    	compilable	  [FE]  IllegalStateException  	20	1	replace
154	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "_ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( "_ "))  {	  if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    	compilable	  [FE]  IllegalStateException  	20	1	replace
155	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "_ "))  {  [FE]  IllegalStateException  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "_ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( "_ "))  {	  if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    	compilable	  [FE]  IllegalStateException  	20	1	replace
156	[BUG]  [BUGGY]  reducerCode.addChildToFront(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  reducerCode.addChildToFront(reduction);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	reducerCode.addChildToFront(reduction);	  reducerCode.addChildToFront(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
157	[BUG]  [BUGGY]  reducerCode.addChildToFront(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  reducerCode.addChildToFront(helperCodeCost);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	reducerCode.addChildToFront(helperCodeCost);	  reducerCode.addChildToFront(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
158	[BUG]  [BUGGY]  reducerCode.addChildToFront(reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  reducerCode.addChildToFront(reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	reducerCode.addChildToFront(reductions);	  reducerCode.addChildToFront(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
159	[BUG]  [BUGGY]  reducerCode.addChildToFront(reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  reducerCode.addChildToFront(reducer);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	reducerCode.addChildToFront(reducer);	  reducerCode.addChildToFront(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
160	[BUG]  [BUGGY]  reducerCode.addChildToFront(helperCode,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  reducerCode.addChildToFront(helperCode,  reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	reducerCode.addChildToFront(helperCode,  reductions);	  reducerCode.addChildToFront(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
161	[BUG]  [BUGGY]  if(helperCode!=  null)  {  If(helperCode  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null)  {  If(helperCode  ==  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null)  {  If(helperCode  ==  null)  {	  if(helperCode!=    null)    {    If(helperCode!=    null)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
162	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  If(helperCode!=  null)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  If(helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  If(helperCode!=  null)  {	  if(helperCode!=    null)    {    If(helperCode!=    null)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
163	[BUG]  [BUGGY]  If(helperCode  ==  null)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode  ==  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode  ==  null)  {	  if(helperCode!=    null)    {    If(helperCode!=    null)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
164	[BUG]  [BUGGY]  If(helperCode!=  null)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode!=  null)  {	  if(helperCode!=    null)    {    If(helperCode!=    null)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
165	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  If(helperCode  ==  null)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  If(helperCode  ==  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  If(helperCode  ==  null)  {	  if(helperCode!=    null)    {    If(helperCode!=    null)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
166	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.equals( "* "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   "))    {    	compilable	  [FE]  AssertionFailedError  	147	8	replace
167	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "* "))  {  [FE]  AssertionFailedError  [FE]        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals( "* "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   "))    {    	compilable	  [FE]  AssertionFailedError  	147	8	replace
168	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "_ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.equals( "_ "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   "))    {    	compilable	  [FE]  AssertionFailedError  	147	8	replace
169	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "_ "))  {  [FE]  AssertionFailedError  [FE]          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "_ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals( "_ "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   "))    {    	compilable	  [FE]  AssertionFailedError  	147	8	replace
170	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
171	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
172	[BUG]  [BUGGY]  if(helperCode  >=  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  >=  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  >=  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	150	None	replace
173	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
174	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aidCode.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  aidCode  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  aidCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aidCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	116	None	replace
175	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=    null    ||    helperCode.getType()    >=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	91	8	replace
176	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=    null    ||    helperCode.getType()    >=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	91	8	replace
177	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
178	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  if(helperCode  ==  null  ||  helperCode.equals( "./   "))  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  if(helperCode  ==  null  ||  helperCode.equals( "./   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    if(helperCode  ==  null  ||  helperCode.equals( "./   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
179	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
180	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  If(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  If(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    If(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {	  	non-compiled	[CE]  	25	None	add
181	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  if(helperCode  ==  null  ||  HelperCode.equals(   "/   "))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  if(helperCode  ==  null  ||  HelperCode.equals(   "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    if(helperCode  ==  null  ||  HelperCode.equals(   "/   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
182	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.equals( "/   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	26	1	replace
183	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "/   "))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.equals( "/   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	26	1	replace
184	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "/null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	26	1	replace
185	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/null "))  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "/null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	26	1	replace
186	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "/* "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	26	1	replace
187	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/* "))  {  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "/* "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	26	1	replace
188	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
189	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
190	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
191	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  	42	None	add
192	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
193	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
194	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
195	[BUG]  [BUGGY]  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
196	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
197	[BUG]  [BUGGY]  if(helperCode!=  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
198	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
199	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
200	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
201	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
202	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  If(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  If(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.NAME)    {    If(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  	119	None	add
203	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  &&  HelperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  &&  HelperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  &&  HelperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
204	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
205	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
206	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reductions.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reductions.restrictByNotNullOrUndefined())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reductions.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
207	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.restrictByNotNullOrUndefined())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
208	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reduction.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reduction.restrictByNotNullOrUndefined())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reduction.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol  reduction	151	None	replace
209	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  aiderCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.restrictByNotNullOrUndefined())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	151	None	replace
210	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reducer.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reducer.restrictByNotNullOrUndefined())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reducer.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
211	[BUG]  [BUGGY]  if(helperCode!=  null  ||  reductions.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  reductions.restrictByNotNullOrUndefined())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  reductions.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol	151	None	replace
212	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
213	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    If(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  	44	None	add
214	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
215	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
216	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
217	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
218	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  >=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  >=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  >=  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
219	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
220	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
221	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  if(helperCode!=  null  ||  helperCode.equals( "./   "))  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  if(helperCode!=  null  ||  helperCode.equals( "./   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    if(helperCode!=  null  ||  helperCode.equals( "./   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
222	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  If(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  If(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    If(helperCode!=  null  ||  helperCode.equals(   "/   "))  {	  	non-compiled	[CE]  	27	None	add
223	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  if(helperCode!=  null  ||  HelperCode.equals(   "/   "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  if(helperCode!=  null  ||  HelperCode.equals(   "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    if(helperCode!=  null  ||  HelperCode.equals(   "/   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  helperCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
227	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reducerCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
230	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	118	1	replace
231	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	118	1	replace
232	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode    ==    null    ||    HelperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	67	None	replace
233	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.RETURN)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode    ==    null    ||    HelperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	67	None	replace
234	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
235	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
236	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
237	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  If(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  If(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.RETURN)    {    If(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  	3	None	add
238	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  &&  helperCode.getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
239	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  >>  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  >>  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  &&  helperCode.getType()  >>  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
240	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  HelperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  HelperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  &&  HelperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	3	None	add
241	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aidCode.isEmpty())  {  [CE]  cannot  find  symbol  aidCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  aidCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aidCode.isEmpty())  {	  if(helperCode!=    null    ||    aiderCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	61	None	replace
242	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aidCode.isEmpty())  {  [CE]  cannot  find  symbol  aidCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aidCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aidCode.isEmpty())  {	  if(helperCode!=    null    ||    aiderCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	61	None	replace
243	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helpingCode.isEmpty())  {  [CE]  cannot  find  symbol  helpingCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helpingCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helpingCode.isEmpty())  {	  if(helperCode!=    null    ||    aiderCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  helpingCode	61	None	replace
244	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
245	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ".-   "))  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ".-   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    if(helperCode  ==  null  ||  helperCode.equals( ".-   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
246	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "-   "))  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "-   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    if(helperCode!=  null  ||  helperCode.equals(   "-   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
247	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  If(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  If(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    If(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {	  	non-compiled	[CE]  	29	None	add
248	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ",-   "))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ",-   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    if(helperCode  ==  null  ||  helperCode.equals( ",-   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
249	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCodeCost.isQuoted())  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCodeCost.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCodeCost.isQuoted())  {	  if(helperCode    ==    null    ||    helperCodeCost.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	96	None	replace
250	[BUG]  [BUGGY]  if(helperCode  >=  null  ||  helperCode.isQuoted())  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  >=  null  ||  helperCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  >=  null  ||  helperCode.isQuoted())  {	  if(helperCode    ==    null    ||    helperCodeCost.isQuoted())    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	96	None	replace
251	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCodeCost.isEmpty())  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCodeCost.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCodeCost.isEmpty())  {	  if(helperCode    ==    null    ||    helperCodeCost.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	51	None	replace
252	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reducer.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reducer.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reducer.isEmpty())  {	  if(helperCode    ==    null    ||    helperCodeCost.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
253	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  saver.isEmpty())  {  [CE]  cannot  find  symbol  saver  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  saver.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  saver.isEmpty())  {	  if(helperCode    ==    null    ||    helperCodeCost.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  saver	51	None	replace
254	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETELEM)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	39	1	replace
255	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETELEM)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETELEM)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	39	1	replace
256	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	39	1	replace
257	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.GETPROP)  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	39	1	replace
258	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
259	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
260	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
261	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
262	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isSupported(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isSupported(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isSupported(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	16	None	replace
263	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSupported(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCode.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	16	None	replace
264	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isSupported(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isSupported(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isSupported(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCode.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	16	None	replace
265	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(reductions))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSupported(reductions))  {	  if(helperCode    ==    null    ||    HelperCode.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	16	None	replace
266	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode,  reductions))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode,  reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode,  reductions))  {	  if(helperCode    ==    null    ||    HelperCode.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	16	None	replace
267	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  >=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	12	8	replace
268	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  >=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	12	8	replace
269	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	12	1	replace
270	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	12	1	replace
271	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.equals( "/   "))  {  [CE]  cannot  find  symbol  aiderCode  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aiderCode.equals( "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.equals( "/   "))  {	  if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	28	None	replace
272	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "./ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( "./ "))  {	  if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	28	1	replace
273	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "./ "))  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "./ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( "./ "))  {	  if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	28	1	replace
274	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.isQuoted())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.isQuoted())  {	  if(helperCode!=    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
275	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aiderCode.isQuoted())  {  [CE]  cannot  find  symbol  aiderCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  aiderCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aiderCode.isQuoted())  {	  if(helperCode!=    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	93	None	replace
276	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isQuoted(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isQuoted(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isQuoted(helperCode))  {	  if(helperCode!=    null    ||    helperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	93	None	replace
277	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
278	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
279	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
280	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  If(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  If(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.NAME)    {    If(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  	76	None	add
281	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  &&  helperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
282	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  >>  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  >>  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  &&  helperCode.getType()  >>  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
283	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  HelperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  HelperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  &&  HelperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	76	None	add
284	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME,  reductions)  {  [CE]  ')'  expected  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME,  reductions)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME,  reductions)  {	  if(helperCode    >=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ')'  expected	133	None	replace
285	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
286	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
287	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
288	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  	84	None	add
289	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
290	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    If(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  	84	None	add
291	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
292	[BUG]  [BUGGY]  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
293	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
294	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
295	[BUG]  [BUGGY]  if(helperCode!=  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
296	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
297	[BUG]  [BUGGY]  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
298	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aidCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  aidCode  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  aidCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aidCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	122	None	replace
299	[BUG]  [BUGGY]  if(helperCode!=  null  ||  reductions.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  reductions.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  reductions.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	122	None	replace
300	[BUG]  [BUGGY]  if(helperCode!=  null  ||  reduction.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  reduction.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  reduction.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  reduction	122	None	replace
301	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aidCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  aidCode  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aidCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aidCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	122	None	replace
302	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aidCode.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  aidCode  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aidCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aidCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	175	None	replace
303	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reductions.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reductions.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reductions.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
304	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reduction.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reduction.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reduction.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  reduction	175	None	replace
305	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reducer.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reducer.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reducer.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
306	[BUG]  [BUGGY]  if(helperCode!=  null  &&  HelperCode.isEmpty())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  HelperCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  HelperCode.isEmpty())  {	  if(helperCode!=    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	63	None	replace
307	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  HelperCode.isEmpty())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  HelperCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  HelperCode.isEmpty())  {	  if(helperCode!=    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	63	None	replace
308	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isFunctionReducer())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isFunctionReducer())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isFunctionReducer())  {	  if(helperCode!=    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	63	None	replace
309	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "*   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.equals( "*   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    	compilable	  [FE]  IllegalStateException  	132	1	replace
310	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "*   "))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "*   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.equals( "*   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    	compilable	  [FE]  IllegalStateException  	132	1	replace
311	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ".* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( ".* "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    	compilable	  [FE]  IllegalStateException  	132	1	replace
312	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ".* "))  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ".* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( ".* "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    	compilable	  [FE]  IllegalStateException  	132	1	replace
313	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
314	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  &&  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
315	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
316	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.NAME)    {    If(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  	78	None	add
317	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  &&  HelperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  &&  HelperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  &&  HelperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
318	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
319	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()  >>  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()  >>  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  &&  helperCode.getType()  >>  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
320	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "   "))    {    if(helperCode!=  null  ||  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
321	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "   "))    {    if(helperCode  ==  null  ||  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
322	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  If(helperCode!=  null  ||  helperCode.equals(   "   "))  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  If(helperCode!=  null  ||  helperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "   "))    {    If(helperCode!=  null  ||  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  	23	None	add
323	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode!=  null  ||  helperCode.equals( ".   "))  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode!=  null  ||  helperCode.equals( ".   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "   "))    {    if(helperCode!=  null  ||  helperCode.equals( ".   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
324	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode!=  null  ||  HelperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode!=  null  ||  HelperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "   "))    {    if(helperCode!=  null  ||  HelperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
325	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode  >=  null  ||  helperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode  >=  null  ||  helperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "   "))    {    if(helperCode  >=  null  ||  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	23	None	add
326	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "n "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.equals( "n "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(HelperCode    ==    null    ||    helperCode.equals(       "       "))    {    	compilable	  [FE]  AssertionFailedError  	181	8	replace
327	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "n "))  {  [FE]  AssertionFailedError  [FE]        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "n "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals( "n "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(HelperCode    ==    null    ||    helperCode.equals(       "       "))    {    	compilable	  [FE]  AssertionFailedError  	181	8	replace
328	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aidCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  aidCode  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aidCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aidCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    &&    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	121	None	replace
329	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  reductions.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  reductions.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  reductions.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    &&    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	121	None	replace
330	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isSupported())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isSupported())  {	  if(helperCode    ==    null    ||    HelperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	18	None	replace
331	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  HelperCode.isSupported())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  HelperCode.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  HelperCode.isSupported())  {	  if(helperCode    ==    null    ||    HelperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	18	None	replace
332	[BUG]  [BUGGY]  if(helperCode!=  null  &&  HelperCode.isSupported())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  HelperCode.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  HelperCode.isSupported())  {	  if(helperCode    ==    null    ||    HelperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	18	None	replace
333	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root);	  NodeTraversal.traverse(compiler,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
334	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aiderCode,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  aiderCode,  reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  aiderCode,  reductions);	  NodeTraversal.traverse(compiler,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
335	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode);	  NodeTraversal.traverse(compiler,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
336	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.RETURN)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	8	None	replace
337	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reductions.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reductions.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reductions.getType()  ==  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	169	None	replace
338	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reduction.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reduction.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reduction.getType()  ==  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  reduction	169	None	replace
339	[BUG]  [BUGGY]  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
340	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
341	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
342	[BUG]  [BUGGY]  If(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
343	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  ';'  expected  [FE]                        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
344	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.get(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.get(helperCodeCost);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.get(helperCodeCost);	  Node    addingRoot    =    reductions.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
345	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.get(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.get(reduction);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.get(reduction);	  Node    addingRoot    =    reductions.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
346	[BUG]  [BUGGY]  Node  addingRoot  =  reductionMap.get(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductionMap.get(helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductionMap.get(helperCode);	  Node    addingRoot    =    reductions.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
347	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.get(0);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.get(0);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.get(0);	  Node    addingRoot    =    reductions.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
348	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.get(helperCode,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.get(helperCode,  reducer);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.get(helperCode,  reducer);	  Node    addingRoot    =    reductions.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
349	[BUG]  [BUGGY]  Node  addingRoot  =  reducers.get(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reducers.get(helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reducers.get(helperCode);	  Node    addingRoot    =    reductions.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
350	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingCode.isEmpty())  {  [CE]  cannot  find  symbol  helpingCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpingCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingCode.isEmpty())  {	  if(helperCode    ==    null    ||    aiderCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  helpingCode	49	None	replace
351	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()!=  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	174	8	replace
352	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()!=  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	174	8	replace
353	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()!=  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    	compilable	  [FE]  IllegalStateException  	174	1	replace
354	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.EXPR_RESULT)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()!=  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    	compilable	  [FE]  IllegalStateException  	174	1	replace
355	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    	compilable	  [FE]  IllegalStateException  	174	1	replace
356	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    	compilable	  [FE]  IllegalStateException  	174	1	replace
357	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	174	8	replace
358	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [FE]  AssertionFailedError  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	174	8	replace
359	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    	compilable	  [FE]  IllegalStateException  	174	1	replace
360	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.EXPR_RESULT)  {  [FE]  IllegalStateException  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    	compilable	  [FE]  IllegalStateException  	174	1	replace
361	[BUG]  [BUGGY]  if(helperCode!=  null  &&  HelperCode.isEmpty(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  HelperCode.isEmpty(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  HelperCode.isEmpty(helperCode))  {	  if(helperCode!=    null    ||    HelperCode.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	62	None	replace
362	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isEmpty(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isEmpty(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isEmpty(helperCodeCost))  {	  if(helperCode!=    null    ||    HelperCode.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	62	None	replace
363	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isEmpty(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isEmpty(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isEmpty(helperCodeCost))  {	  if(helperCode!=    null    ||    HelperCode.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	62	None	replace
364	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isEmpty(helperCode,  reductions))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isEmpty(helperCode,  reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isEmpty(helperCode,  reductions))  {	  if(helperCode!=    null    ||    HelperCode.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	62	None	replace
365	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(reductions))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(reductions))  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	136	None	replace
366	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isFunctionReducer(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isFunctionReducer(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isFunctionReducer(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	136	None	replace
367	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	136	None	replace
368	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(reduction))  {  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(reduction))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(reduction))  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	136	None	replace
369	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isFunctionReducer(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isFunctionReducer(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isFunctionReducer(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	136	None	replace
370	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isFunctionReducer(reductions))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isFunctionReducer(reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isFunctionReducer(reductions))  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	136	None	replace
371	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  IllegalStateException  	165	1	replace
372	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  IllegalStateException  	165	1	replace
373	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  cannot  find  symbol  aiderCode  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	165	None	replace
374	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EMPTY)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EMPTY)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  IllegalStateException  	165	1	replace
375	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EMPTY)  {  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EMPTY)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EMPTY)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  IllegalStateException  	165	1	replace
376	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	165	8	replace
377	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	165	8	replace
378	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode    ==    null    ||    HelperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	112	None	replace
379	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode    ==    null    ||    HelperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	112	None	replace
380	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    	compilable	  [FE]  IllegalStateException  	47	1	replace
381	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETELEM)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    	compilable	  [FE]  IllegalStateException  	47	1	replace
382	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    	compilable	  [FE]  AssertionFailedError  	47	8	replace
383	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETELEM)  {  [FE]  AssertionFailedError  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    	compilable	  [FE]  AssertionFailedError  	47	8	replace
384	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  helperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  helperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.equals(   "       "))    {    if(helperCode  ==  null  &&  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
385	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  helperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  helperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.equals(   "       "))    {    if(helperCode!=  null  &&  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
386	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  If(helperCode  ==  null  &&  helperCode.equals(   "   "))  {  [CE]  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  If(helperCode  ==  null  &&  helperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.equals(   "       "))    {    If(helperCode  ==  null  &&  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  	21	None	add
387	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  helperCode.equals( ".   "))  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  helperCode.equals( ".   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.equals(   "       "))    {    if(helperCode  ==  null  &&  helperCode.equals( ".   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
388	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  HelperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  HelperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.equals(   "       "))    {    if(helperCode  ==  null  &&  HelperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
389	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.isEmpty())  {  [CE]  cannot  find  symbol  aiderCode  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aiderCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.isEmpty())  {	  if(helperCode!=    null    &&    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	60	None	replace
390	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.isEmpty())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.isEmpty())  {	  if(helperCode!=    null    &&    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
391	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reductions.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  reductions.isEmpty())  {	  if(helperCode!=    null    &&    helperCode.isEmpty())    {    	compilable	  [FE]  IllegalStateException  	60	1	replace
392	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reductions.isEmpty())  {  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reductions.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reductions.isEmpty())  {	  if(helperCode!=    null    &&    helperCode.isEmpty())    {    	compilable	  [FE]  IllegalStateException  	60	1	replace
393	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "- "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.equals( "- "))  {	  if(helperCode!=    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  AssertionFailedError  	24	8	replace
394	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "- "))  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( "- "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals( "- "))  {	  if(helperCode!=    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  AssertionFailedError  	24	8	replace
395	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isSupported(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isSupported(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isSupported(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	17	None	replace
396	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	17	None	replace
397	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isSupported(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isSupported(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isSupported(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	17	None	replace
398	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(reductions))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(reductions))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	17	None	replace
399	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode,  reductions))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode,  reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode,  reductions))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	17	None	replace
400	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isSupported(reductions))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isSupported(reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isSupported(reductions))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	17	None	replace
401	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( ". "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.equals( ". "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  AssertionFailedError  	75	8	replace
402	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( ". "))  {  [FE]  AssertionFailedError  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( ". "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals( ". "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  AssertionFailedError  	75	8	replace
403	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ". "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( ". "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  IllegalStateException  	75	1	replace
404	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ". "))  {  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ". "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( ". "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  IllegalStateException  	75	1	replace
405	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( ": "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.equals( ": "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  AssertionFailedError  	75	8	replace
406	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( ": "))  {  [FE]  AssertionFailedError  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals( ": "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals( ": "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  AssertionFailedError  	75	8	replace
407	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
408	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
409	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
410	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  	9	None	add
411	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
412	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  >>  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  >>  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  ||  helperCode.getType()  >>  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
413	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  HelperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  ||  HelperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  ||  HelperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	9	None	add
414	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "- "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.equals( "- "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    	compilable	  [FE]  IllegalStateException  	30	1	replace
415	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "- "))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals( "- "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.equals( "- "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    	compilable	  [FE]  IllegalStateException  	30	1	replace
416	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "-- "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( "-- "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    	compilable	  [FE]  IllegalStateException  	30	1	replace
417	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "-- "))  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "-- "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( "-- "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    	compilable	  [FE]  IllegalStateException  	30	1	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  reductions,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  reductions,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  reductions,  helperCode);	  NodeTraversal.traverse(compiler,    reducerCode,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode,  reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reducerCode,  reductions);	  NodeTraversal.traverse(compiler,    reducerCode,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  reducerCode);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  reducerCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reductions,  reducerCode);	  NodeTraversal.traverse(compiler,    reducerCode,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
421	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.COST)  {  [CE]  cannot  find  symbol  COST  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.COST)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.COST)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  COST	64	None	replace
422	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(reductions))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(reductions))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	97	None	replace
423	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	97	None	replace
424	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isQuoted(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isQuoted(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isQuoted(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	97	None	replace
425	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isQuoted(reductions))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isQuoted(reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isQuoted(reductions))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	97	None	replace
426	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isQuoted(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isQuoted(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isQuoted(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	97	None	replace
427	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(reduction))  {  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(reduction))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(reduction))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	97	None	replace
428	[BUG]  [BUGGY]  if(helperCode!=  null  &&  HelperCodeUtil.isEmpty(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  HelperCodeUtil.isEmpty(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  HelperCodeUtil.isEmpty(helperCode))  {	  if(helperCode!=    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	130	None	replace
429	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isFunction(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isFunction(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isFunction(helperCode))  {	  if(helperCode!=    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	130	None	replace
430	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aidCode.isSupported())  {  [CE]  cannot  find  symbol  aidCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aidCode.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aidCode.isSupported())  {	  if(helperCode    ==    null    ||    aiderCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	14	None	replace
431	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aidCode.isSupported())  {  [CE]  cannot  find  symbol  aidCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  aidCode.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aidCode.isSupported())  {	  if(helperCode    ==    null    ||    aiderCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	14	None	replace
432	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aiderCode.isSupported())  {  [CE]  cannot  find  symbol  aiderCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  aiderCode.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aiderCode.isSupported())  {	  if(helperCode    ==    null    ||    aiderCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	14	None	replace
433	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  new  GetterReducer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  helperCode,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
434	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
435	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  reductions,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  reductions,  new  GetterReducer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  reductions,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
436	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  new  GetterReducer(),  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  new  GetterReducer(),  reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  new  GetterReducer(),  reductions);	  NodeTraversal.traverse(compiler,    reducerCode,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
437	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  HelperReducer.class,  reducerCode,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  HelperReducer.class,  reducerCode,  new  GetterReducer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  HelperReducer.class,  reducerCode,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
438	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  aiderCode,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  aiderCode,  new  GetterReducer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  aiderCode,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
439	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  GetterReducer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reductions,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
440	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
441	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
442	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    If(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  	106	None	add
443	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
444	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
445	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
446	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
447	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {	  if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	10	8	replace
448	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {	  if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	10	8	replace
449	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
450	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "n   "))  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "n   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    if(helperCode!=  null  ||  helperCode.equals(   "n   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
451	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  If(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  [CE]  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  If(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    If(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {	  	non-compiled	[CE]  	171	None	add
452	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ".n   "))  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ".n   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    if(helperCode  ==  null  ||  helperCode.equals( ".n   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
453	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(helperCode  ==  null  ||  HelperCode.equals(   "n   "))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(helperCode  ==  null  ||  HelperCode.equals(   "n   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    if(helperCode  ==  null  ||  HelperCode.equals(   "n   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
454	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reductions.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reductions.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reductions.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    &&    aiderCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
455	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reduction.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  reduction  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reduction.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reduction.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    &&    aiderCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	replace
456	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reducer.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  [FE]                      AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reducer.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reducer.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    &&    aiderCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
457	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aidCode.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  aidCode  [FE]                        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aidCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aidCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    &&    aiderCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	48	None	replace
458	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  reductions.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  [FE]                          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  reductions.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  reductions.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    &&    aiderCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
459	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.COST)  {  [CE]  cannot  find  symbol  COST  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.COST)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.COST)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  COST	65	None	replace
460	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()!=  Token.FUNCTION)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	65	8	replace
461	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.FUNCTION)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	65	8	replace
462	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
463	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
464	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
465	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
466	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [CE]  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    If(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  	11	None	add
467	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  	11	None	add
468	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  helperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  helperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    if(helperCode!=  null  &&  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
469	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  helperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  helperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    if(helperCode  ==  null  &&  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
470	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  helperCode.equals( ".   "))  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  helperCode.equals( ".   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    if(helperCode!=  null  &&  helperCode.equals( ".   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
471	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  If(helperCode!=  null  &&  helperCode.equals(   "   "))  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  If(helperCode!=  null  &&  helperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    If(helperCode!=  null  &&  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  	19	None	add
472	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  HelperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  HelperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    if(helperCode!=  null  &&  HelperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
473	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode  >=  null  &&  helperCode.equals(   "   "))  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode  >=  null  &&  helperCode.equals(   "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    if(helperCode  >=  null  &&  helperCode.equals(   "   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
474	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	164	None	add
475	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	164	None	add
476	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    If(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  	164	None	add
477	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	164	None	add
478	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	164	None	add
479	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode!=  null  &&  helperCode.getType()  >=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	164	None	add
480	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EMPTY_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EMPTY_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EMPTY_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	164	None	add
481	[BUG]  [BUGGY]  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
482	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
483	[BUG]  [BUGGY]  if(helperCode!=  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
484	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
485	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                      AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
486	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  >=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	85	8	replace
487	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.NAME)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  >=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    	compilable	  [FE]  AssertionFailedError  	85	8	replace
488	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	85	1	replace
489	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.NAME)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	85	1	replace
490	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reduction);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(reduction);	  Collection    <    Reduction>    reductions    =    reductionMap.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
491	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeCost);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeCost);	  Collection    <    Reduction>    reductions    =    reductionMap.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
492	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode,  reduction);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode,  reduction);	  Collection    <    Reduction>    reductions    =    reductionMap.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
493	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode,  reducer);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode,  reducer);	  Collection    <    Reduction>    reductions    =    reductionMap.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
494	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode).reductions;  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode).reductions;  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode).reductions;	  Collection    <    Reduction>    reductions    =    reductionMap.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
495	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reducer);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(reducer);	  Collection    <    Reduction>    reductions    =    reductionMap.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
496	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
497	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    if(helperCode!=  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
498	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    If(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  	173	None	add
499	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
500	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    if(helperCode  ==  null  ||  helperCode.getType()  >>  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
501	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    if(helperCode  ==  null  ||  HelperCode.getType()!=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
502	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode  >=  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(helperCode  >=  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    if(helperCode  >=  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
503	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.getParent();  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.getParent();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.getParent();	  Node    addingRoot    =    reducer.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
504	[BUG]  [BUGGY]  Node  addingRoot  =  reducer.getNext();  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reducer.getNext();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reducer.getNext();	  Node    addingRoot    =    reducer.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
505	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.getNext();  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.getNext();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.getNext();	  Node    addingRoot    =    reducer.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
506	[BUG]  [BUGGY]  Node  addingRoot  =  reducer.getAncestor(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reducer.getAncestor(helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reducer.getAncestor(helperCode);	  Node    addingRoot    =    reducer.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
507	[BUG]  [BUGGY]  Node  addingRoot  =  reducer.getReductionRoot();  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reducer.getReductionRoot();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reducer.getReductionRoot();	  Node    addingRoot    =    reducer.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
508	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode,  reducer);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCode,  reducer);	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
509	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  helperCode);	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
510	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode,  reducer);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  helperCode,  reducer);	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
511	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode,  reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  helperCode,  reductions);	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
512	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  helperCode);	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
513	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCode,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCode,  reducer);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCode,  reducer);	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
514	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.isSupported())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.isSupported())  {	  if(helperCode!=    null    ||    helperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol	13	None	replace
515	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCodeCost.isSupported())  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCodeCost.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCodeCost.isSupported())  {	  if(helperCode!=    null    ||    helperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	13	None	replace
516	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null)  {  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null)  {	  if(helperCode!=    null)    {    Node    helperCode    =    parseHelperCode(helper);    if(helperCode!=    null)    {    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	138	None	replace
517	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction);  if(helperCode!=  null)  {  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction);  if(helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  helperCode  =  parseHelperCode(reduction);  if(helperCode!=  null)  {	  if(helperCode!=    null)    {    Node    helperCode    =    parseHelperCode(helper);    if(helperCode!=    null)    {    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	138	None	replace
518	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode  ==  null)  {  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode  ==  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  helperCode  =  parseHelperCode(reducer);  if(helperCode  ==  null)  {	  if(helperCode!=    null)    {    Node    helperCode    =    parseHelperCode(helper);    if(helperCode!=    null)    {    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	138	None	replace
519	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(helper);  if(helperCode!=  null)  {  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  helperCode  =  parseHelperCode(helper);  if(helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  helperCode  =  parseHelperCode(helper);  if(helperCode!=  null)  {	  if(helperCode!=    null)    {    Node    helperCode    =    parseHelperCode(helper);    if(helperCode!=    null)    {    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	138	None	replace
520	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(reduction);  if(helperCode  ==  null)  {  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  helperCode  =  parseHelperCode(reduction);  if(helperCode  ==  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  helperCode  =  parseHelperCode(reduction);  if(helperCode  ==  null)  {	  if(helperCode!=    null)    {    Node    helperCode    =    parseHelperCode(helper);    if(helperCode!=    null)    {    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	138	None	replace
521	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.equals( "   "))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.equals( "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.equals( "   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    HelperCode.equals(       "       "))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	74	None	replace
522	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.equals( "   "))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.equals( "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.equals( "   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    HelperCode.equals(       "       "))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	74	None	replace
523	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
524	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
525	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  &&  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
526	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  If(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  	40	None	add
527	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  HelperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  HelperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  &&  HelperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
528	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
529	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
530	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
531	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
532	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
533	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=  null  &&  helperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
534	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
535	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
536	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
537	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
538	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  	82	None	add
539	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
540	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  HelperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  HelperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  ||  HelperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
541	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  >>  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  >>  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=  null  ||  helperCode.getType()  >>  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	82	None	add
542	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
543	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  &&  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
544	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode  ==  null  &&  helperCode.getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
545	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.RETURN)    {    If(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  	5	None	add
546	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  &&  HelperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  &&  HelperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode  ==  null  &&  HelperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
547	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  &&  helperCode.getType()  >>  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode  ==  null  &&  helperCode.getType()  >>  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode  ==  null  &&  helperCode.getType()  >>  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
548	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
549	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
550	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
551	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
552	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  If(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  If(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.GETPROP)    {    If(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  	177	None	add
553	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
554	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  HelperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  HelperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode!=  null  ||  HelperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
555	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  >>  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  >>  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode!=  null  ||  helperCode.getType()  >>  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	177	None	add
556	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EMPTY)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EMPTY)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	125	8	replace
557	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EMPTY)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EMPTY)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EMPTY)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    	compilable	  [FE]  AssertionFailedError  	125	8	replace
558	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reducer.isSupported())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reducer.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reducer.isSupported())  {	  if(helperCode    ==    null    ||    helperCodeCost.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
559	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	178	8	replace
560	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	178	8	replace
561	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aidCode.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  aidCode  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  aidCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aidCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	70	None	replace
562	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aiderCode.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  aiderCode  [FE]                      AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  aiderCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aiderCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	70	None	replace
563	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	45	8	replace
564	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	45	8	replace
565	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isQuoted(helperCode).isQuoted())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isQuoted(helperCode).isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isQuoted(helperCode).isQuoted())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode).isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	98	None	replace
566	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode,  reductions).isQuoted())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode,  reductions).isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode,  reductions).isQuoted())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode).isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	98	None	replace
567	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode),  helperCodeCost.isQuoted())  {  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode),  helperCodeCost.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode),  helperCodeCost.isQuoted())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode).isQuoted())    {    	non-compiled	[CE]  ')'  expected	98	None	replace
568	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode),  helperCode.isQuoted())  {  [CE]  ')'  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode),  helperCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode),  helperCode.isQuoted())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode).isQuoted())    {    	non-compiled	[CE]  ')'  expected	98	None	replace
569	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCodeCost).isQuoted())  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCodeCost).isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCodeCost).isQuoted())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode).isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	98	None	replace
570	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode),  reducer.isQuoted())  {  [CE]  ')'  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode),  reducer.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode),  reducer.isQuoted())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode).isQuoted())    {    	non-compiled	[CE]  ')'  expected	98	None	replace
571	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null)  {	  if(helperCode!=    null)    {    Node    helperCode    =    parseHelperCode(reducer);    if(helperCode!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
572	[BUG]  [BUGGY]  Node  helperCodeCost  =  parseHelperCode(reducer);  if(helperCodeCost!=  null)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  helperCodeCost  =  parseHelperCode(reducer);  if(helperCodeCost!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  helperCodeCost  =  parseHelperCode(reducer);  if(helperCodeCost!=  null)  {	  if(helperCode!=    null)    {    Node    helperCode    =    parseHelperCode(reducer);    if(helperCode!=    null)    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	137	None	replace
573	[BUG]  [BUGGY]  if(helperCode!=  null)  {  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode  ==  null)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null)  {  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode  ==  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null)  {  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode  ==  null)  {	  if(helperCode!=    null)    {    Node    helperCode    =    parseHelperCode(reducer);    if(helperCode!=    null)    {    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
574	[BUG]  [BUGGY]  Node  helperCodeCost  =  parseHelperCode(reducer);  if(helperCodeCost  ==  null)  {  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  helperCodeCost  =  parseHelperCode(reducer);  if(helperCodeCost  ==  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  helperCodeCost  =  parseHelperCode(reducer);  if(helperCodeCost  ==  null)  {	  if(helperCode!=    null)    {    Node    helperCode    =    parseHelperCode(reducer);    if(helperCode!=    null)    {    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	137	None	replace
575	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    ==    Token.SETPROP)    {    	compilable	  [FE]  AssertionFailedError  	148	8	replace
576	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [FE]  AssertionFailedError  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    ==    Token.SETPROP)    {    	compilable	  [FE]  AssertionFailedError  	148	8	replace
577	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    ==    Token.SETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
578	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    ==    Token.SETPROP)    {    	compilable	  [FE]  IllegalStateException  	148	1	replace
579	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [FE]  IllegalStateException  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    ==    Token.SETPROP)    {    	compilable	  [FE]  IllegalStateException  	148	1	replace
580	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    ==    Token.SETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
581	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reducers);	  NodeTraversal.traverse(compiler,    helperCode,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
582	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
583	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
584	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    If(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  	1	None	add
585	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
586	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
587	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
588	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
589	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode!=    null)    {    if(helperCode    ==    null)    {    	compilable	  [FE]  IllegalStateException  	100	1	replace
590	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.EXPR_RESULT)  {  [FE]  IllegalStateException  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode!=    null)    {    if(helperCode    ==    null)    {    	compilable	  [FE]  IllegalStateException  	100	1	replace
591	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode!=  null)  {	  if(helperCode!=    null)    {    if(helperCode!=    null    ||    helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	140	8	replace
592	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode!=  null)  {  [FE]  AssertionFailedError  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode!=  null)  {	  if(helperCode!=    null)    {    if(helperCode!=    null    ||    helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	140	8	replace
593	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode!=  null)  {	  if(helperCode!=    null)    {    if(helperCode!=    null    ||    helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	140	8	replace
594	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode!=  null)  {  [FE]  AssertionFailedError  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode!=  null)  {	  if(helperCode!=    null)    {    if(helperCode!=    null    ||    helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	140	8	replace
595	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode  ==  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode  ==  null)  {	  if(helperCode!=    null)    {    if(helperCode!=    null    ||    helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	140	8	replace
596	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode  ==  null)  {  [FE]  AssertionFailedError  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode  ==  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode  ==  null)  {	  if(helperCode!=    null)    {    if(helperCode!=    null    ||    helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	140	8	replace
597	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode  >=  null)  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode  >=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode  >=  null)  {	  if(helperCode!=    null)    {    if(helperCode!=    null    ||    helperCode!=    null)    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	140	None	replace
598	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode!=  null)  {	  if(helperCode!=    null)    {    if(helperCode!=    null    ||    helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	140	8	replace
599	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode!=  null)  {  [FE]  AssertionFailedError  [FE]                      AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode!=  null)  {	  if(helperCode!=    null)    {    if(helperCode!=    null    ||    helperCode!=    null)    {    	compilable	  [FE]  AssertionFailedError  	140	8	replace
600	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
601	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
602	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
603	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
604	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [CE]  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  	145	None	add
605	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.SETELEM)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.SETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.SETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
606	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
607	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	166	None	add
608	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	166	None	add
609	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [CE]  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    If(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  	166	None	add
610	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	166	None	add
611	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	166	None	add
612	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode!=  null  &&  helperCode.getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	166	None	add
613	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	166	None	add
614	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getLastChild()))  {  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getLastChild()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(reduction.getLastChild()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	155	None	replace
615	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(reduction.getFirstChild()))  {  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(reduction.getFirstChild()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.equals(reduction.getFirstChild()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	155	None	replace
616	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(root.getFirstChild()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals(root.getFirstChild()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getFirstChild()))    {    	compilable	  [FE]  IllegalStateException  	155	1	replace
617	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(root.getFirstChild()))  {  [FE]  IllegalStateException  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(root.getFirstChild()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(root.getFirstChild()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getFirstChild()))    {    	compilable	  [FE]  IllegalStateException  	155	1	replace
618	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.equals(reduction.getFirstChild()))  {  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.equals(reduction.getFirstChild()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.equals(reduction.getFirstChild()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	155	None	replace
619	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reductionMap.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reductionMap.getFirstChild()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(reductionMap.getFirstChild()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
620	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(region.getFirstChild()))  {  [CE]  cannot  find  symbol  region  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(region.getFirstChild()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(region.getFirstChild()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  region	155	None	replace
621	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reduction.isSupported())  {  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reduction.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reduction.isSupported())  {	  if(helperCode    ==    null    ||    helpingerCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  reduction	153	None	replace
622	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reductions.isSupported())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reductions.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reductions.isSupported())  {	  if(helperCode    ==    null    ||    helpingerCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol	153	None	replace
623	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingRoot.isSupported())  {  [CE]  cannot  find  symbol  helpingRoot  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpingRoot.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingRoot.isSupported())  {	  if(helperCode    ==    null    ||    helpingerCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	153	None	replace
624	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
625	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
626	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  	46	None	add
627	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
628	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
629	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
630	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
631	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
632	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
633	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
634	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  	7	None	add
635	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
636	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
637	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
638	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	94	None	replace
639	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(reductions))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(reductions))  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	94	None	replace
640	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isQuoted(helperCodeCost))  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isQuoted(helperCodeCost))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isQuoted(helperCodeCost))  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	94	None	replace
641	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode,  reductions))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode,  reductions))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode,  reductions))  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	94	None	replace
642	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  HelperCode  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode    ==    null    ||    HelperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	170	None	replace
643	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.CALL)  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.CALL)  {	  if(helperCode    ==    null    ||    HelperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	170	None	replace
644	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.removeChild(parent,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(parent,  helperCode);	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
645	[BUG]  [BUGGY]  NodeUtil.removeChild(parent);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.removeChild(parent);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(parent);	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
646	[BUG]  [BUGGY]  NodeUtil.removeChild(internalNode,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.removeChild(internalNode,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(internalNode,  helperCode);	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
647	[BUG]  [BUGGY]  NodeUtil.removeChild(root,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.removeChild(root,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(root,  helperCode);	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
648	[BUG]  [BUGGY]  NodeUtil.removeChild(externs,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.removeChild(externs,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(externs,  helperCode);	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
649	[BUG]  [BUGGY]  NodeUtil.removeChild(parent,  aiderCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.removeChild(parent,  aiderCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(parent,  aiderCode);	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
650	[BUG]  [BUGGY]  NodeUtil.removeChild(extras,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.removeChild(extras,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(extras,  helperCode);	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
651	[BUG]  [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "   "))  {  [CE]  [FE]            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode  ==  null  ||  helperCode.equals( "   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    If(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  	73	None	replace
652	[BUG]  [BUGGY]  If(helperCode!=  null  ||  helperCode.equals( "   "))  {  [CE]  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode!=  null  ||  helperCode.equals( "   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode!=  null  ||  helperCode.equals( "   "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    If(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  	73	None	replace
653	[BUG]  [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "null "))  {  [CE]  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode  ==  null  ||  helperCode.equals( "null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    If(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  	73	None	replace
654	[BUG]  [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "/ "))  {  [CE]  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "/ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode  ==  null  ||  helperCode.equals( "/ "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    If(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  	73	None	replace
655	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	131	None	add
656	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "*   "))  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  if(helperCode!=  null  ||  helperCode.equals(   "*   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    if(helperCode!=  null  ||  helperCode.equals(   "*   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	131	None	add
657	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ".*   "))  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ".*   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    if(helperCode  ==  null  ||  helperCode.equals( ".*   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	131	None	add
658	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  If(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  If(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    If(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {	  	non-compiled	[CE]  	131	None	add
659	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  if(helperCode  ==  null  ||  HelperCode.equals(   "*   "))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  if(helperCode  ==  null  ||  HelperCode.equals(   "*   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    if(helperCode  ==  null  ||  HelperCode.equals(   "*   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	131	None	add
660	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aidCode.isQuoted())  {  [CE]  cannot  find  symbol  aidCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aidCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aidCode.isQuoted())  {	  if(helperCode    ==    null    ||    aiderCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	95	None	replace
661	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aidCode.isQuoted())  {  [CE]  cannot  find  symbol  aidCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  aidCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aidCode.isQuoted())  {	  if(helperCode    ==    null    ||    aiderCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	95	None	replace
662	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    HelperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
663	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  HelperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    HelperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
664	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	124	None	add
665	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	124	None	add
666	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    If(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  	124	None	add
667	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	124	None	add
668	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode  >=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	124	None	add
669	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode!=  null  ||  helperCode.getType()  >=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	124	None	add
670	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode  >>  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	124	None	add
671	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
672	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
673	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  >=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
674	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  &&  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=  null  &&  helperCode.getType()  >=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	38	None	add
675	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aidCode.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  aidCode  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aidCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aidCode.getType()  ==  Token.GETPROP)  {	  if(helperCode    ==    null    ||    aiderCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	180	None	replace
676	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reductions.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reductions.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reductions.getType()  ==  Token.GETPROP)  {	  if(helperCode    ==    null    ||    aiderCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol	180	None	replace
677	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  reduction.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  reduction.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  reduction.getType()  ==  Token.GETPROP)  {	  if(helperCode    ==    null    ||    aiderCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  reduction	180	None	replace
678	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.isEmpty(helperCode))  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.isEmpty(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.isEmpty(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
679	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	107	8	replace
680	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  AssertionFailedError  	107	8	replace
681	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  IllegalStateException  	107	1	replace
682	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.FUNCTION)  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  IllegalStateException  	107	1	replace
683	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  aiderCode  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	107	None	replace
684	[BUG]  [BUGGY]  if(helperCode!=  null  ||  aiderCode.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  aiderCode  [FE]          AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  aiderCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  aiderCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	107	None	replace
685	[BUG]  [BUGGY]  Node  addingRoot  =  reducer.getLastChild(),  helperCode;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reducer.getLastChild(),  helperCode;  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reducer.getLastChild(),  helperCode;	  Node    addingRoot    =    reducer.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
686	[BUG]  [BUGGY]  Node  addingRoot  =  reducer.removeFirstChild();  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reducer.removeFirstChild();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reducer.removeFirstChild();	  Node    addingRoot    =    reducer.getLastChild();    	non-compiled	[CE]  class,  interface,  or  enum  expected	160	None	replace
687	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isNull(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isNull(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isNull(helperCode))  {	  if(helperCode!=    null    ||    HelperCode.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	62	None	replace
688	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.isEmpty(helperCode))  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.isEmpty(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.isEmpty(helperCode))  {	  if(helperCode!=    null    ||    HelperCode.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
689	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
690	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
691	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
692	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  new  GetterReducer(),  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reducerCode,  new  GetterReducer(),  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducerCode,  new  GetterReducer(),  helperCode);	  NodeTraversal.traverse(compiler,    reducerCode,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
693	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  HelperReducer.class,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  HelperReducer.class,  new  GetterReducer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  HelperReducer.class,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
694	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helpingerCode,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  helpingerCode,  new  GetterReducer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  helpingerCode,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	163	None	replace
695	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( ". "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( ". "))  {	  if(helperCode!=    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	24	1	replace
696	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( ". "))  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( ". "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( ". "))  {	  if(helperCode!=    null    ||    helperCode.equals(   "   "))    {    	compilable	  [FE]  IllegalStateException  	24	1	replace
697	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isGetterReducer())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isGetterReducer())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isGetterReducer())  {	  if(helperCode    ==    null    ||    HelperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	18	None	replace
698	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isReturnStatement())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isReturnStatement())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isReturnStatement())  {	  if(helperCode    ==    null    ||    HelperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	18	None	replace
699	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
700	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
701	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isFunctionReducer(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isFunctionReducer(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isFunctionReducer(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	136	None	replace
702	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSingleReturnStatementReducer(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSingleReturnStatementReducer(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSingleReturnStatementReducer(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	136	None	replace
703	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(reducerCode))  {  [CE]  cannot  find  symbol  reducerCode  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(reducerCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(reducerCode))  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  reducerCode	136	None	replace
704	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isReducer(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isReducer(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isReducer(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	136	None	replace
705	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.NAME)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
706	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
707	[BUG]  [BUGGY]  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
708	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	89	None	replace
709	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reducer.getName()))  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reducer.getName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(reducer.getName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getName()))    {    	non-compiled	[CE]  cannot  find  symbol	154	None	replace
710	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    HelperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
711	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    HelperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
712	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingCode.isQuoted())  {  [CE]  cannot  find  symbol  helpingCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpingCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingCode.isQuoted())  {	  if(helperCode    ==    null    ||    aiderCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  helpingCode	95	None	replace
713	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helfenCode.isQuoted())  {  [CE]  cannot  find  symbol  helfenCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helfenCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helfenCode.isQuoted())  {	  if(helperCode    ==    null    ||    aiderCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  helfenCode	95	None	replace
714	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
715	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  réductions,  helperCode);	  NodeTraversal.traverse(compiler,    reductions,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
716	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helpingerCode);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helpingerCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  helpingerCode);	  NodeTraversal.traverse(compiler,    reductions,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
717	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  helperCode.equals( ",   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  helperCode.equals( ",   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    if(helperCode!=  null  &&  helperCode.equals( ",   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	19	None	add
718	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  helperCode.equals( "))  {  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals(   "     "))  {  if(helperCode!=  null  &&  helperCode.equals( "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.equals(   "       "))    {    if(helperCode!=  null  &&  helperCode.equals( "))  {	  	non-compiled	[CE]  unclosed  string  literal	19	None	add
719	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ",n   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ",n   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    if(helperCode  ==  null  ||  helperCode.equals( ",n   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
720	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode    >=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
721	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode    >=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
722	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(HelperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
723	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	119	None	add
724	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
725	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
726	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	145	None	add
727	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isFunction())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isFunction())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isFunction())  {	  if(helperCode!=    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	63	None	replace
728	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isWhitespace())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isWhitespace())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isWhitespace())  {	  if(helperCode!=    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	63	None	replace
729	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.getType(helperCode)  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.getType(helperCode)  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.getType(helperCode)  ==  Token.GETPROP)  {	  if(helperCode    ==    null    ||    HelperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	179	None	replace
730	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    >=    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
731	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    >=    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
732	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode!=  null  ||  helperCode.equals( "))  {  [CE]  unclosed  string  literal  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "   "))  {  if(helperCode!=  null  ||  helperCode.equals( "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "   "))    {    if(helperCode!=  null  ||  helperCode.equals( "))  {	  	non-compiled	[CE]  unclosed  string  literal	23	None	add
733	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reducerCode);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reducerCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(reducerCode);	  Collection    <    Reduction>    reductions    =    reductionMap.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
734	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helpserCode.isEmpty())  {  [CE]  cannot  find  symbol  helpserCode  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helpserCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helpserCode.isEmpty())  {	  if(helperCode!=    null    &&    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  helpserCode	60	None	replace
735	[BUG]  [BUGGY]  Node  addingRoot  =  reducer.getGrandparent();  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reducer.getGrandparent();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reducer.getGrandparent();	  Node    addingRoot    =    reducer.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
736	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.getType(helperCode)  ==  Token.NAME)  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.getType(helperCode)  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.getType(helperCode)  ==  Token.NAME)  {	  if(helperCode    ==    null    ||    HelperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	170	None	replace
737	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  >=  Token.NAME)  {  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()  >=  Token.NAME)  {	  if(helperCode    ==    null    ||    HelperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	170	None	replace
738	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpserCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  helpserCode  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpserCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpserCode.getType()  ==  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  helpserCode	169	None	replace
739	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helfenCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  helfenCode  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helfenCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helfenCode.getType()  ==  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  helfenCode	169	None	replace
740	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.equals(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.equals(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.equals(helperCode))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    HelperCode.equals(       "       "))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	74	None	replace
741	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.equals(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.equals(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.equals(helperCode))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    HelperCode.equals(       "       "))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	74	None	replace
742	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode  ==  null  ||  HelperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode  ==  null  ||  HelperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    if(helperCode  ==  null  ||  HelperCode.getType()  >=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	84	None	add
743	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  [Delete]  Token.NAME)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()  [Delete]  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()  [Delete]  Token.NAME)  {	  	non-compiled	[CE]  	84	None	add
744	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
745	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
746	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
747	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.SETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
748	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	42	None	add
749	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isReturn())  {  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isReturn())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isReturn())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	123	None	replace
750	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isAllowReturns())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isAllowReturns())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isAllowReturns())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	123	None	replace
751	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
752	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	80	None	add
753	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.get(reducerCode);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.get(reducerCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.get(reducerCode);	  Node    addingRoot    =    reductions.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
754	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=    null    ||    HelperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
755	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  réductions);	  NodeTraversal.traverse(compiler,    reducerCode,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
756	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
757	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
758	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
759	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reducer.getSourceName()))  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reducer.getSourceName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(reducer.getSourceName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getSourceName()))    {    	non-compiled	[CE]  cannot  find  symbol	152	None	replace
760	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(deduction.getSourceName()))  {  [CE]  cannot  find  symbol  deduction  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(deduction.getSourceName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(deduction.getSourceName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getSourceName()))    {    	non-compiled	[CE]  cannot  find  symbol  deduction	152	None	replace
761	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    Node  helperCode  =  parseHelperCode(reducer);  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
762	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RESTURN)  {  [CE]  illegal  start  of  expression  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RESTURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RESTURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
763	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()!=  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	109	8	replace
764	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.CALL)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	compilable	  [FE]  AssertionFailedError  	109	8	replace
765	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCode).isQuoted())  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCode).isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCode).isQuoted())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode).isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	98	None	replace
766	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode)&&  HelperCode.isQuoted())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode)&&  HelperCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode)&&  HelperCode.isQuoted())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode).isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	98	None	replace
767	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode)||  HelperCode.isQuoted())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode)||  HelperCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isQuoted(helperCode)||  HelperCode.isQuoted())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode).isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	98	None	replace
768	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.isQuoted(helperCode).isQuoted())  {  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.isQuoted(helperCode).isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.isQuoted(helperCode).isQuoted())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode).isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol	98	None	replace
769	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.equals( "- "))  {  [CE]  cannot  find  symbol  aiderCode  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.equals( "- "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.equals( "- "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	30	None	replace
770	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ".- "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( ".- "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    	compilable	  [FE]  IllegalStateException  	30	1	replace
771	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ".- "))  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ".- "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( ".- "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    	compilable	  [FE]  IllegalStateException  	30	1	replace
772	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( " "))  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( " "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( " "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode!=    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
773	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( "] "))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( "] "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( "] "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode!=    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
774	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( "* "))  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( "* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( "* "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode!=    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
775	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( "n "))  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( "n "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.equals( "n "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode!=    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
776	[BUG]  [BUGGY]  NodeUtil.removeChild(helperCode,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.removeChild(helperCode,  reduction);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(helperCode,  reduction);	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
777	[BUG]  [BUGGY]  NodeUtil.removeChild(externs);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.removeChild(externs);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(externs);	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
778	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reducer.getFirstChild()))  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reducer.getFirstChild()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(reducer.getFirstChild()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol	155	None	replace
779	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.equals(reduction.getFirstChild()))  {  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.equals(reduction.getFirstChild()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.equals(reduction.getFirstChild()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	155	None	replace
780	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getNext()))  {  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(reduction.getNext()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(reduction.getNext()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getFirstChild()))    {    	non-compiled	[CE]  cannot  find  symbol  reduction	155	None	replace
781	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(HelperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.NAME)    {    if(HelperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
782	[BUG]  [BUGGY]  if(helperCode!=  null  &&  réduir.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  r  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  réduir.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  réduir.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    &&    reducer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  r	168	None	replace
783	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RESULT)  {  [CE]  cannot  find  symbol  RESULT  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RESULT)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  RESULT	2	None	replace
784	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isNull(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isNull(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isNull(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	50	None	replace
785	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunction(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunction(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isFunction(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	50	None	replace
786	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	173	None	add
787	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helpingCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  helpingCode  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helpingCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helpingCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    &&    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  helpingCode	121	None	replace
788	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isGetterReducer(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isGetterReducer(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isGetterReducer(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	94	None	replace
789	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isProperty(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isProperty(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isProperty(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	94	None	replace
790	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "/> "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( "/> "))  {	  if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	28	1	replace
791	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "/> "))  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "/> "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( "/> "))  {	  if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	28	1	replace
792	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "/.* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.equals( "/.* "))  {	  if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	28	1	replace
793	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "/.* "))  {  [FE]  IllegalStateException  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.equals( "/.* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.equals( "/.* "))  {	  if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    	compilable	  [FE]  IllegalStateException  	28	1	replace
794	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(HelperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
795	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RESTURN)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RESTURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RESTURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	7	None	add
796	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.mayHaveSideEffects(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.mayHaveSideEffects(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.mayHaveSideEffects(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	135	None	replace
797	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isNotEmpty(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isNotEmpty(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isNotEmpty(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	135	None	replace
798	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isWhitespace(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isWhitespace(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isWhitespace(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	135	None	replace
799	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RESULT)  {  [CE]  cannot  find  symbol  RESULT  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  RESULT	8	None	replace
800	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reducer);	  NodeTraversal.traverse(compiler,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	37	None	replace
801	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helpingCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  helpingCode  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helpingCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helpingCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  helpingCode	122	None	replace
802	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helfenCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  helfenCode  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helfenCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helfenCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  helfenCode	122	None	replace
803	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(HelperCode  ==  null  ||  helperCode.equals( " "))  {  [CE]  illegal  start  of  expression  [FE]        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null)  {  if(HelperCode  ==  null  ||  helperCode.equals( " "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null)  {  if(HelperCode  ==  null  ||  helperCode.equals( " "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(HelperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
804	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  if(HelperCode  ==  null  ||  helperCode.equals( " "))  {  [CE]  illegal  start  of  expression  [FE]          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  if(HelperCode  ==  null  ||  helperCode.equals( " "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  if(HelperCode  ==  null  ||  helperCode.equals( " "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(HelperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
805	[BUG]  [BUGGY]  if(helperCode!=  null)  {  if(HelperCode  ==  null  ||  HelperCode.equals( " "))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null)  {  if(HelperCode  ==  null  ||  HelperCode.equals( " "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null)  {  if(HelperCode  ==  null  ||  HelperCode.equals( " "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(HelperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
806	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  if(HelperCode  ==  null  ||  HelperCode.equals( " "))  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  if(HelperCode  ==  null  ||  HelperCode.equals( " "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  if(HelperCode  ==  null  ||  HelperCode.equals( " "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(HelperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  illegal  start  of  expression	181	None	replace
807	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingCode.isSupported())  {  [CE]  cannot  find  symbol  helpingCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpingCode.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingCode.isSupported())  {	  if(helperCode    ==    null    ||    aiderCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  helpingCode	14	None	replace
808	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpserCode.isSupported())  {  [CE]  cannot  find  symbol  helpserCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpserCode.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpserCode.isSupported())  {	  if(helperCode    ==    null    ||    aiderCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  helpserCode	14	None	replace
809	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME_STRING)  {  [CE]  cannot  find  symbol  NAME_STRING  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME_STRING)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME_STRING)  {	  if(helperCode    >=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  NAME_STRING	133	None	replace
810	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helfenCode.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  helfenCode  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helfenCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helfenCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  helfenCode	175	None	replace
811	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingCode.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  helpingCode  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpingCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  helpingCode	175	None	replace
812	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpserCode.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  helpserCode  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpserCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpserCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  helpserCode	175	None	replace
813	[BUG]  [BUGGY]  if(helperCode!=  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
814	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
815	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
816	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  helperCode.equals( ",   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  helperCode.equals( ",   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.equals(   "       "))    {    if(helperCode  ==  null  &&  helperCode.equals( ",   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	21	None	add
817	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  helperCode.equals( "))  {  [CE]  unclosed  string  literal  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.equals(   "     "))  {  if(helperCode  ==  null  &&  helperCode.equals( "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.equals(   "       "))    {    if(helperCode  ==  null  &&  helperCode.equals( "))  {	  	non-compiled	[CE]  unclosed  string  literal	21	None	add
818	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.mayHaveSideEffects(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.mayHaveSideEffects(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.mayHaveSideEffects(helperCode))  {	  if(helperCode!=    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	130	None	replace
819	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isNotEmpty(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isNotEmpty(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isNotEmpty(helperCode))  {	  if(helperCode!=    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	130	None	replace
820	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.hasQuoted())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.hasQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.hasQuoted())  {	  if(helperCode    ==    null    ||    helperCodeCost.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
821	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionCode,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionCode,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reductionCode,  helperCode);	  NodeTraversal.traverse(compiler,    reducerCode,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
822	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  saverCode,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  saverCode,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  saverCode,  helperCode);	  NodeTraversal.traverse(compiler,    reducerCode,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
823	[BUG]  [BUGGY]  if(helperCode!=  null)  {  If(helperCode  ==  null  ||  helperCode.equals( " "))  {  [CE]  [FE]            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null)  {  If(helperCode  ==  null  ||  helperCode.equals( " "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null)  {  If(helperCode  ==  null  ||  helperCode.equals( " "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    If(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  	73	None	replace
824	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  If(helperCode  ==  null  ||  helperCode.equals( " "))  {  [CE]  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  If(helperCode  ==  null  ||  helperCode.equals( " "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  If(helperCode  ==  null  ||  helperCode.equals( " "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    If(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  	73	None	replace
825	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ")-   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode  ==  null  ||  helperCode.equals( ")-   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    if(helperCode  ==  null  ||  helperCode.equals( ")-   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
826	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=    null    ||    helperCode.getType()    >=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
827	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()  >=  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=    null    ||    helperCode.getType()    >=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
828	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpserCode.isEmpty())  {  [CE]  cannot  find  symbol  helpserCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpserCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpserCode.isEmpty())  {	  if(helperCode    ==    null    ||    aiderCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  helpserCode	49	None	replace
829	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.SETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
830	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(HelperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
831	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  helperCode,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  helperCode,  reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  roots,  helperCode,  reductions);	  NodeTraversal.traverse(compiler,    helperCode,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
832	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
833	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
834	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.SETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	44	None	add
835	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode    ==    null    ||    helperCode.getType()    >>    Token.RETURN)    {    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
836	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	166	None	add
837	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RESTURN)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RESTURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RESTURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	166	None	add
838	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]              AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
839	[BUG]  [BUGGY]  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
840	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  If(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    If(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ';'  expected	56	None	replace
841	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.getType()!=  Token.RETURN)  {	  if(helperCode!=    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	10	None	replace
842	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
843	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isGetterReducer(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isGetterReducer(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isGetterReducer(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	17	None	replace
844	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reducer.getFirstChild()!=  reducer.getLastChild())  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reducer.getFirstChild()!=  reducer.getLastChild())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reducer.getFirstChild()!=  reducer.getLastChild())  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	17	None	replace
845	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isWhitespace(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isWhitespace(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isWhitespace(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	52	None	replace
846	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETELEM)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
847	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EMPTY)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	124	None	add
848	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EMPTY)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EMPTY)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  IllegalStateException  	107	1	replace
849	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EMPTY)  {  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EMPTY)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.EMPTY)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    	compilable	  [FE]  IllegalStateException  	107	1	replace
850	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
851	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(helperCode!=    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
852	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  HelperReducer.class,  reducerCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  HelperReducer.class,  reducerCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  HelperReducer.class,  reducerCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
853	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  HelperReducer.class,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  HelperReducer.class,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  HelperReducer.class,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
854	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helpingerCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  helpingerCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  helpingerCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reducerCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	126	None	replace
855	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  HelperCode.getType()!=  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  HelperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME  ||  HelperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	158	None	add
856	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(HelperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	164	None	add
857	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EMPTY)  {  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EMPTY)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EMPTY)  {	  	non-compiled	[CE]  illegal  start  of  expression	164	None	add
858	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.RETURN)    {    if(HelperCode  ==  null  &&  helperCode.getType()!=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
859	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingCode.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  helpingCode  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpingCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingCode.getType()  ==  Token.GETPROP)  {	  if(helperCode    ==    null    ||    aiderCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  helpingCode	180	None	replace
860	[BUG]  [BUGGY]  if(helperCode  >=  null)  {  If(helperCode!=  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  >=  null)  {  If(helperCode!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  >=  null)  {  If(helperCode!=  null)  {	  if(helperCode!=    null)    {    If(helperCode!=    null)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
861	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helpingCode.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  helpingCode  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helpingCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helpingCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    &&    aiderCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  helpingCode	48	None	replace
862	[BUG]  [BUGGY]  if(helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
863	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
864	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
865	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()!=  Token.GETPROP)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.getType()!=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	178	None	replace
866	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.getType()!=  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	83	None	replace
867	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  contributingRoot.isSupported())  {  [CE]  cannot  find  symbol  contributingRoot  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  contributingRoot.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  contributingRoot.isSupported())  {	  if(helperCode    ==    null    ||    helpingerCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	153	None	replace
868	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.isSupported(helperCode))  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.isSupported(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.isSupported(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
869	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  Helper.isSupported(helperCode))  {  [CE]  cannot  find  symbol  Helper  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  Helper.isSupported(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  Helper.isSupported(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  Helper	16	None	replace
870	[BUG]  [BUGGY]  if(helperCode  >=  null  ||  HelperCode.isSupported(helperCode))  {  [CE]  bad  operand  types  for  binary  operator  '>='  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  >=  null  ||  HelperCode.isSupported(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  >=  null  ||  HelperCode.isSupported(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isSupported(helperCode))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '>='	16	None	replace
871	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
872	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
873	[BUG]  [BUGGY]  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
874	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(reducerCode))  {  [CE]  cannot  find  symbol  reducerCode  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(reducerCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(reducerCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  reducerCode	97	None	replace
875	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions,  helperCode,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions,  helperCode,  reducer);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  réductions,  helperCode,  reducer);	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
876	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helfenCode.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  helfenCode  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helfenCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helfenCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  helfenCode	157	None	replace
877	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpserCode.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  helpserCode  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpserCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpserCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  helpserCode	157	None	replace
878	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.restrictByNotNullOrUndefined())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	151	None	replace
879	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpserCode.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  helpserCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpserCode.restrictByNotNullOrUndefined())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpserCode.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol  helpserCode	151	None	replace
880	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCodeCost.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  helperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCodeCost.restrictByNotNullOrUndefined())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCodeCost.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	151	None	replace
881	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    ==    Token.SETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
882	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode!=    null    ||    helperCode.getType()    ==    Token.SETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
883	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RESULT)  {  [CE]  cannot  find  symbol  RESULT  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RESULT)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol  RESULT	167	None	replace
884	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode  ==  null  ||  HelperCode.getType()  >=  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode  ==  null  ||  HelperCode.getType()  >=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    if(helperCode  ==  null  ||  HelperCode.getType()  >=  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	11	None	add
885	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  [Delete]  Token.RETURN)  {  [CE]  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.RETURN)  {  if(helperCode  ==  null  ||  helperCode.getType()  [Delete]  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    if(helperCode  ==  null  ||  helperCode.getType()  [Delete]  Token.RETURN)  {	  	non-compiled	[CE]  	11	None	add
886	[BUG]  [BUGGY]  Node  helperCode  =  parseHelperCode(helper);  if(helperCode  ==  null)  {  [CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  helperCode  =  parseHelperCode(helper);  if(helperCode  ==  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  helperCode  =  parseHelperCode(helper);  if(helperCode  ==  null)  {	  if(helperCode!=    null)    {    Node    helperCode    =    parseHelperCode(helper);    if(helperCode!=    null)    {    	non-compiled	[CE]  variable  helperCode  is  already  defined  in  method  process(Node,Node)	138	None	replace
887	[BUG]  [BUGGY]  Node  helperCodeCost  =  parseHelperCode(helper);  if(helperCodeCost!=  null)  {  [CE]  cannot  find  symbol  helper  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  helperCodeCost  =  parseHelperCode(helper);  if(helperCodeCost!=  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  helperCodeCost  =  parseHelperCode(helper);  if(helperCodeCost!=  null)  {	  if(helperCode!=    null)    {    Node    helperCode    =    parseHelperCode(helper);    if(helperCode!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  helper	138	None	replace
888	[BUG]  [BUGGY]  reducerCode.addChildToBack(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  reducerCode.addChildToBack(helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	reducerCode.addChildToBack(helperCode);	  reducerCode.addChildToFront(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
889	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	17	None	replace
890	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reductions.size()  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reductions.size()  <  SAVINGS_THRESHOLD)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reductions.size()  <  SAVINGS_THRESHOLD)  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	17	None	replace
891	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isGetter(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isGetter(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isGetter(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	17	None	replace
892	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reducers.size()  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reducers.size()  >  SAVINGS_THRESHOLD)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode)&&  reducers.size()  >  SAVINGS_THRESHOLD)  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	17	None	replace
893	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helpingerCode.isSupported())  {  [CE]  cannot  find  symbol  helpingerCode  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helpingerCode.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helpingerCode.isSupported())  {	  if(helperCode!=    null    ||    helperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	13	None	replace
894	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aidCode.isEmpty())  {  [CE]  cannot  find  symbol  aidCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aidCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aidCode.isEmpty())  {	  if(helperCode!=    null    ||    aiderCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  aidCode	61	None	replace
895	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helfenCode.isEmpty())  {  [CE]  cannot  find  symbol  helfenCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helfenCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helfenCode.isEmpty())  {	  if(helperCode    ==    null    ||    aiderCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  helfenCode	49	None	replace
896	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  result.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(helperCode!=  null  &&  result.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(helperCode!=  null  &&  result.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	164	None	add
897	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  illegal  start  of  expression	40	None	add
898	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.CALL)  {	  	non-compiled	[CE]  illegal  start  of  expression	108	None	add
899	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(ReductionGatherer.HELPER_SOURCE.getName()))  {  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(ReductionGatherer.HELPER_SOURCE.getName()))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals(ReductionGatherer.HELPER_SOURCE.getName()))  {	  if(helperCode    ==    null    ||    helperCode.equals(reduction.getName()))    {    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	154	None	replace
900	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  illegal  start  of  expression	46	None	add
901	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.FOR)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.FOR)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	66	8	replace
902	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.FOR)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.FOR)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.FOR)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    if(helperCode    ==    null    ||    helperCode.getType()    >=    Token.RETURN)    {    	compilable	  [FE]  AssertionFailedError  	66	8	replace
903	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HelperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HelperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  HelperCode);	  NodeTraversal.traverse(compiler,    reductions,    helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
904	[BUG]  [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "] "))  {  [CE]  [FE]            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "] "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode  ==  null  ||  helperCode.equals( "] "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    If(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  	73	None	replace
905	[BUG]  [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "* "))  {  [CE]  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode  ==  null  ||  helperCode.equals( "* "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    If(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  	73	None	replace
906	[BUG]  [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "n "))  {  [CE]  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  If(helperCode  ==  null  ||  helperCode.equals( "n "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	If(helperCode  ==  null  ||  helperCode.equals( "n "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    If(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    	non-compiled	[CE]  	73	None	replace
907	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  if(helperCode!=  null  ||  helperCode.equals( ")/   "))  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.equals(   "/   "))  {  if(helperCode!=  null  ||  helperCode.equals( ")/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.equals(   "/   "))    {    if(helperCode!=  null  ||  helperCode.equals( ")/   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	27	None	add
908	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSameAssign(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSameAssign(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSameAssign(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	94	None	replace
909	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isPrototype(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isPrototype(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isPrototype(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	94	None	replace
910	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    	compilable	  [FE]  AssertionFailedError  	47	8	replace
911	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETELEM)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    	compilable	  [FE]  AssertionFailedError  	47	8	replace
912	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.GETELEM)  {  [CE]  cannot  find  symbol  aiderCode  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	47	None	replace
913	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.GETELEM)  {  [CE]  cannot  find  symbol  aiderCode  [FE]        AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.GETELEM)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	47	None	replace
914	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.EXPR_RESULT)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	125	None	replace
915	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  cannot  find  symbol  HelperCode  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode    ==    null    ||    HelperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	170	None	replace
916	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.CALL  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.CALL  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
917	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.CALL  ||  helperCode.getType()!=  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.CALL  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.CALL  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	159	8	replace
918	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.VAR)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.VAR)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	118	1	replace
919	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.VAR)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.VAR)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.VAR)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.NAME)    {    	compilable	  [FE]  IllegalStateException  	118	1	replace
920	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSameAssignmentTo(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSameAssignmentTo(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSameAssignmentTo(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	123	None	replace
921	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isGetter())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isGetter())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isGetter())  {	  if(helperCode    ==    null    ||    HelperCode.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	123	None	replace
922	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ": "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( ": "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  IllegalStateException  	75	1	replace
923	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ": "))  {  [FE]  IllegalStateException  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( ": "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( ": "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  IllegalStateException  	75	1	replace
924	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "[null] "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "[null] "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  IllegalStateException  	75	1	replace
925	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "[null] "))  {  [FE]  IllegalStateException  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "[null] "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "[null] "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  IllegalStateException  	75	1	replace
926	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "] "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "] "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  IllegalStateException  	75	1	replace
927	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "] "))  {  [FE]  IllegalStateException  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "] "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "] "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   ".       "))    {    	compilable	  [FE]  IllegalStateException  	75	1	replace
928	[BUG]  [BUGGY]  reducerCode.addChildrenToFront(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  reducerCode.addChildrenToFront(helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	reducerCode.addChildrenToFront(helperCode);	  reducerCode.addChildToFront(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
929	[BUG]  [BUGGY]  reducerCode.removeChild(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  reducerCode.removeChild(helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	reducerCode.removeChild(helperCode);	  reducerCode.addChildToFront(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
930	[BUG]  [BUGGY]  reducerCode.addChildrenToFront(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  reducerCode.addChildrenToFront(reduction);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	reducerCode.addChildrenToFront(reduction);	  reducerCode.addChildToFront(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	129	None	replace
931	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode  ==  null  ||  HelperCode.equals(   "-   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "-   "))  {  if(helperCode  ==  null  ||  HelperCode.equals(   "-   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    if(helperCode  ==  null  ||  HelperCode.equals(   "-   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	29	None	add
932	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	136	None	replace
933	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCode)&&  reductions.size()  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCode)&&  reductions.size()  <  SAVINGS_THRESHOLD)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isFunctionReducer(helperCode)&&  reductions.size()  <  SAVINGS_THRESHOLD)  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	136	None	replace
934	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.isFunctionReducer(helperCode))  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.isFunctionReducer(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.isFunctionReducer(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isFunctionReducer(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol	136	None	replace
935	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	41	1	replace
936	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.SETPROP)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.SETPROP)  {	  if(helperCode    ==    null    &&    helperCode.getType()    ==    Token.GETPROP)    {    	compilable	  [FE]  IllegalStateException  	41	1	replace
937	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  {  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [CE]  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  if(helperCode  {  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(helperCode  {  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	  	non-compiled	[CE]  	42	None	add
938	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.FUNCTION)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.FUNCTION)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	107	None	replace
939	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.CALL)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.getType()  ==  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	109	None	replace
940	[BUG]  [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.CALL)  {  [CE]  cannot  find  symbol  aiderCode  [FE]      AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.CALL)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  aiderCode.getType()  ==  Token.CALL)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.CALL)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	109	None	replace
941	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.get(helperCode,  reductions.size());  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.get(helperCode,  reductions.size());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.get(helperCode,  reductions.size());	  Node    addingRoot    =    reductions.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
942	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.get(helperCode).addChildToFront(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.get(helperCode).addChildToFront(reduction);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.get(helperCode).addChildToFront(reduction);	  Node    addingRoot    =    reductions.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
943	[BUG]  [BUGGY]  Node  addingRoot  =  reductions.get(helperCode,  reductions.size()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reductions.get(helperCode,  reductions.size()  -  1);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reductions.get(helperCode,  reductions.size()  -  1);	  Node    addingRoot    =    reductions.get(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	161	None	replace
944	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "-$ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "-$ "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    	compilable	  [FE]  IllegalStateException  	30	1	replace
945	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "-$ "))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "-$ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "-$ "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "-   "))    {    	compilable	  [FE]  IllegalStateException  	30	1	replace
946	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isReduction(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isReduction(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isReduction(helperCode))  {	  if(helperCode!=    null)    {    if(HelperCode!=    null)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	156	None	replace
947	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  if(HelperCode  ==  null  ||  helperCode.equals(   "/   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "/   "))  {  if(HelperCode  ==  null  ||  helperCode.equals(   "/   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    if(HelperCode  ==  null  ||  helperCode.equals(   "/   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	25	None	add
948	[BUG]  [BUGGY]  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  HelperCode  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(HelperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    if(HelperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	150	None	replace
949	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducer,  helperCode,  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reducer,  helperCode,  reductions);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducer,  helperCode,  reductions);	  NodeTraversal.traverse(compiler,    reducerCode,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
950	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "true "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "true "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
951	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "true "))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "true "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "true "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
952	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "reducer "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "reducer "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
953	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "reducer "))  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "reducer "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "reducer "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    	compilable	  [FE]  IllegalStateException  	172	1	replace
954	[BUG]  [BUGGY]  NodeUtil.removeChild(root);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.removeChild(root);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(root);	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
955	[BUG]  [BUGGY]  NodeUtil.clearChildren();  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.clearChildren();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.clearChildren();	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
956	[BUG]  [BUGGY]  NodeUtil.removeChild(members);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeUtil.removeChild(members);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeUtil.removeChild(members);	  NodeUtil.removeChild(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	36	None	replace
957	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingerCode.isEmpty())  {  [CE]  cannot  find  symbol  helpingerCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpingerCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingerCode.isEmpty())  {	  if(helperCode    ==    null    ||    helperCodeCost.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	51	None	replace
958	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.CATCH)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.CATCH)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	167	1	replace
959	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.CATCH)  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.CATCH)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.RETURN  ||  helperCode.getType()  ==  Token.CATCH)  {	  if(helperCode!=    null    &&    helperCode.getType()    ==    Token.RETURN)    {    	compilable	  [FE]  IllegalStateException  	167	1	replace
960	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionMap,  helperCode,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionMap,  helperCode,  reducer);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reductionMap,  helperCode,  reducer);	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	127	None	replace
961	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.EXPR_RESULT)    {    if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.EXPR_RESULT)  {	  	non-compiled	[CE]  illegal  start  of  expression	124	None	add
962	[BUG]  [BUGGY]  Node  addingRoot  =  reduction.getParent();  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  Node  addingRoot  =  reduction.getParent();  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	Node  addingRoot  =  reduction.getParent();	  Node    addingRoot    =    reducer.getParent();    	non-compiled	[CE]  class,  interface,  or  enum  expected	162	None	replace
963	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helfenerCode.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  helfenerCode  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helfenerCode.restrictByNotNullOrUndefined())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helfenerCode.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol  helfenerCode	151	None	replace
964	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingerCode.restrictByNotNullOrUndefined())  {  [CE]  cannot  find  symbol  helpingerCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpingerCode.restrictByNotNullOrUndefined())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingerCode.restrictByNotNullOrUndefined())  {	  if(helperCode    ==    null    ||    helperCode.restrictByNotNullOrUndefined())    {    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	151	None	replace
965	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingCode.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  helpingCode  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpingCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingCode.getType()  ==  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  helpingCode	169	None	replace
966	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.GETPROP)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()!=    Token.GETPROP)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	178	None	replace
967	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingerCode.isQuoted())  {  [CE]  cannot  find  symbol  helpingerCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpingerCode.isQuoted())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingerCode.isQuoted())  {	  if(helperCode    ==    null    ||    helperCodeCost.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	96	None	replace
968	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.hasChildren())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.hasChildren())  {	  if(helperCode    ==    null    ||    helperCodeCost.isQuoted())    {    	compilable	  [FE]  AssertionFailedError  	96	8	replace
969	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.hasChildren())  {  [FE]  AssertionFailedError  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.hasChildren())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.hasChildren())  {	  if(helperCode    ==    null    ||    helperCodeCost.isQuoted())    {    	compilable	  [FE]  AssertionFailedError  	96	8	replace
970	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.hasReferences())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.hasReferences())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.hasReferences())  {	  if(helperCode    ==    null    ||    helperCodeCost.isQuoted())    {    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
971	[BUG]  [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  &&  helperCode.getType()!=  Token.NAME)  {  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    &&    helperCode.getType()!=    Token.NAME)    {    if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	78	None	add
972	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.returnType()!=  Token.RETURN)  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.returnType()!=  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.returnType()!=  Token.RETURN)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  cannot  find  symbol	175	None	replace
973	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupportedFromRoot(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupportedFromRoot(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSupportedFromRoot(helperCode))  {	  if(helperCode    ==    null    ||    HelperCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	18	None	replace
974	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.equals( "* "))  {  [CE]  cannot  find  symbol  aiderCode  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.equals( "* "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.equals( "* "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	132	None	replace
975	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/Null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "/Null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    	compilable	  [FE]  IllegalStateException  	132	1	replace
976	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/Null "))  {  [FE]  IllegalStateException  [FE]      IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/Null "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "/Null "))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    	compilable	  [FE]  IllegalStateException  	132	1	replace
977	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  {  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [CE]  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  if(helperCode  {  null  ||  helperCode.getType()  ==  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    if(helperCode  {  null  ||  helperCode.getType()  ==  Token.GETELEM)  {	  	non-compiled	[CE]  	145	None	add
978	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  helperCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
979	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionMap,  helperCode,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionMap,  helperCode,  new  ReductionGatherer());  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  root,  reductionMap,  helperCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    helperCode,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	128	None	replace
980	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isSameAssignmentTo(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isSameAssignmentTo(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isSameAssignmentTo(helperCode))  {	  if(helperCode!=    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	63	None	replace
981	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCode.isWhitespace(helperCode))  {  [CE]  cannot  find  symbol  HelperCode  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCode.isWhitespace(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCode.isWhitespace(helperCode))  {	  if(helperCode!=    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	63	None	replace
982	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/))  {  [CE]  unclosed  string  literal  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "/))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "/))  {	  if(helperCode    ==    null    ||    helperCode.equals(   "/   "))    {    	non-compiled	[CE]  unclosed  string  literal	26	None	replace
983	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  {  null  ||  helperCode.getType()  ==  Token.NAME)  {  [CE]  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.NAME)  {  if(helperCode  {  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(helperCode  {  null  ||  helperCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  	80	None	add
984	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode).isSupported())  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode).isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isSupported(helperCode).isSupported())  {	  if(helperCode    ==    null    ||    helperCodeCost.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	15	None	replace
985	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.VAR)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.VAR)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RESTURN)    {    	compilable	  [FE]  AssertionFailedError  	176	8	replace
986	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.VAR)  {  [FE]  AssertionFailedError  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.VAR)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.VAR)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RESTURN)    {    	compilable	  [FE]  AssertionFailedError  	176	8	replace
987	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  illegal  start  of  expression	1	None	add
988	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.SETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	45	8	replace
989	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.SETPROP)  {  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.SETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.SETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    	compilable	  [FE]  AssertionFailedError  	45	8	replace
990	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isImmutableValue(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isImmutableValue(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isImmutableValue(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	135	None	replace
991	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSameAssign(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isSameAssign(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isSameAssign(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	135	None	replace
992	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducer,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  NodeTraversal.traverse(compiler,  reducer,  helperCode);  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	NodeTraversal.traverse(compiler,  reducer,  helperCode);	  NodeTraversal.traverse(compiler,    helperCode,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
993	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  resultCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(helperCode!=  null  &&  resultCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    &&    helperCode.getType()    ==    Token.NAME)    {    if(helperCode!=  null  &&  resultCode.getType()  ==  Token.NAME)  {	  	non-compiled	[CE]  illegal  start  of  expression	117	None	add
994	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  if(HelperCode  ==  null  ||  helperCode.equals(   "*   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "*   "))  {  if(HelperCode  ==  null  ||  helperCode.equals(   "*   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "*   "))    {    if(HelperCode  ==  null  ||  helperCode.equals(   "*   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	131	None	add
995	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "__ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( "__ "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   "))    {    	compilable	  [FE]  IllegalStateException  	147	1	replace
996	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "__ "))  {  [FE]  IllegalStateException  [FE]        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( "__ "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( "__ "))  {	  if(helperCode    ==    null    ||    helperCode.equals(       "       "))    {    if(helperCode    ==    null    ||    helperCode.equals(   "))    {    	compilable	  [FE]  IllegalStateException  	147	1	replace
997	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
998	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.RETURN)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.FUNCTION)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.RETURN)    {    	non-compiled	[CE]  ';'  expected	68	None	replace
999	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(HelperCode  ==  null  ||  helperCode.equals(   "n   "))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals(   "n   "))  {  if(HelperCode  ==  null  ||  helperCode.equals(   "n   "))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.equals(   "n   "))    {    if(HelperCode  ==  null  ||  helperCode.equals(   "n   "))  {	  	non-compiled	[CE]  illegal  start  of  expression	171	None	add
1000	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {	  if(helperCode    ==    null    ||    HelperCode.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	16	None	replace
1001	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode)&&  reductions.size()  <  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode)&&  reductions.size()  <  SAVINGS_THRESHOLD)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode)&&  reductions.size()  <  SAVINGS_THRESHOLD)  {	  if(helperCode    ==    null    ||    HelperCode.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	16	None	replace
1002	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode)&&  reducers.size()  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode)&&  reducers.size()  >  SAVINGS_THRESHOLD)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isSupported(helperCode)&&  reducers.size()  >  SAVINGS_THRESHOLD)  {	  if(helperCode    ==    null    ||    HelperCode.isSupported(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	16	None	replace
1003	[BUG]  [BUGGY]  if(helperCode!=  null)  {  If(reductions  ==  null)  {  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null)  {  If(reductions  ==  null)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null)  {  If(reductions  ==  null)  {	  if(helperCode!=    null)    {    If(helperCode!=    null)    {    	non-compiled	[CE]  ';'  expected	101	None	replace
1004	[BUG]  [BUGGY]  if(helperCode!=  null  ||  Helper.isEmpty(helperCode))  {  [CE]  cannot  find  symbol  Helper  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  Helper.isEmpty(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  Helper.isEmpty(helperCode))  {	  if(helperCode!=    null    ||    HelperCode.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  Helper	62	None	replace
1005	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [CE]  illegal  start  of  expression  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.GETPROP)  {  if(HelperCode!=  null  ||  HelperCode.getType()  ==  Token.GETPROP)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
1006	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isWhitespace(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isWhitespace(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isWhitespace(helperCode))  {	  if(helperCode!=    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	130	None	replace
1007	[BUG]  [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isSameAssign(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  HelperCodeUtil.isSameAssign(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  HelperCodeUtil.isSameAssign(helperCode))  {	  if(helperCode!=    null    ||    HelperCodeUtil.isEmpty(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	130	None	replace
1008	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helfenCode.isSupported())  {  [CE]  cannot  find  symbol  helfenCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helfenCode.isSupported())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helfenCode.isSupported())  {	  if(helperCode    ==    null    ||    aiderCode.isSupported())    {    	non-compiled	[CE]  cannot  find  symbol  helfenCode	14	None	replace
1009	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.FUNCTION)  {  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.FUNCTION)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
1010	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.BLOCK)  {  [CE]  ';'  expected  [FE]                  AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.BLOCK)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.BLOCK)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
1011	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.TRY)  {  [CE]  ';'  expected  [FE]                    AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.TRY)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()!=  Token.NAME)  {  If(helperCode  ==  null  ||  helperCode.getType()!=  Token.TRY)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    If(helperCode    ==    null    ||    helperCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  ';'  expected	114	None	replace
1012	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  {  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [CE]  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.GETPROP)  {  if(helperCode  {  null  ||  helperCode.getType()!=  Token.GETPROP)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()!=    Token.GETPROP)    {    if(helperCode  {  null  ||  helperCode.getType()!=  Token.GETPROP)  {	  	non-compiled	[CE]  	44	None	add
1013	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.EXPR_RESULT)  {  [CE]  cannot  find  symbol  aiderCode  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.EXPR_RESULT)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  aiderCode.getType()!=  Token.EXPR_RESULT)  {	  if(helperCode    ==    null    ||    helperCode.getType()!=    Token.EXPR_RESULT)    {    	non-compiled	[CE]  cannot  find  symbol  aiderCode	174	None	replace
1014	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  {  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [CE]  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  ==  Token.RETURN)  {  if(helperCode  {  null  ||  helperCode.getType()  ==  Token.RETURN)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.RETURN)    {    if(helperCode  {  null  ||  helperCode.getType()  ==  Token.RETURN)  {	  	non-compiled	[CE]  	7	None	add
1015	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isNullOrEmpty())  {  [CE]  cannot  find  symbol  HelperCode  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.isNullOrEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.isNullOrEmpty())  {	  if(helperCode    ==    null    ||    HelperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  HelperCode	52	None	replace
1016	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETPROP,  reductions)  {  [CE]  ')'  expected  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETPROP,  reductions)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCode.getType()  ==  Token.GETPROP,  reductions)  {	  if(helperCode    ==    null    ||    HelperCode.getType()    ==    Token.GETPROP)    {    	non-compiled	[CE]  ')'  expected	179	None	replace
1017	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helpingCode.getType()!=  Token.NAME)  {  [CE]  cannot  find  symbol  helpingCode  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helpingCode.getType()!=  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helpingCode.getType()!=  Token.NAME)  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol  helpingCode	157	None	replace
1018	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.hasType())  {  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.hasType())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.hasType())  {	  if(helperCode    ==    null    ||    aiderCode.getType()!=    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	157	None	replace
1019	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETELEM)  {	  if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    	compilable	  [FE]  AssertionFailedError  	146	8	replace
1020	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETELEM)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETELEM)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()  >=  Token.GETELEM)  {	  if(helperCode    ==    null    ||    helperCode.getType()    ==    Token.GETELEM)    {    	compilable	  [FE]  AssertionFailedError  	146	8	replace
1021	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [CE]  illegal  start  of  expression  [FE]        AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helperCode.getType()  ==  Token.NAME)  {  if(HelperCode!=  null  ||  HelperCode.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    if(HelperCode!=    null    ||    helperCode.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
1022	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reduction.isEmpty())  {  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reduction.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reduction.isEmpty())  {	  if(helperCode!=    null    &&    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  reduction	60	None	replace
1023	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reducerCode.isEmpty())  {  [CE]  cannot  find  symbol  reducerCode  [FE]                IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reducerCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reducerCode.isEmpty())  {	  if(helperCode!=    null    &&    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  reducerCode	60	None	replace
1024	[BUG]  [BUGGY]  if(helperCode!=  null  &&  helpingerCode.isEmpty())  {  [CE]  cannot  find  symbol  helpingerCode  [FE]                  IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  helpingerCode.isEmpty())  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  helpingerCode.isEmpty())  {	  if(helperCode!=    null    &&    helperCode.isEmpty())    {    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	60	None	replace
1025	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [CE]  illegal  start  of  expression  [FE]    AssertionFailedError    [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=    null    ||    helperCode.getType()    ==    Token.FUNCTION)    {    if(HelperCode!=  null  ||  helperCode.getType()  ==  Token.FUNCTION)  {	  	non-compiled	[CE]  illegal  start  of  expression	106	None	add
1026	[BUG]  [BUGGY]  if(helperCode!=  null  &&  reductionMap.getType()  ==  Token.NAME)  {  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode!=  null  &&  reductionMap.getType()  ==  Token.NAME)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  &&  reductionMap.getType()  ==  Token.NAME)  {	  if(helperCode!=    null    &&    reducer.getType()    ==    Token.NAME)    {    	non-compiled	[CE]  cannot  find  symbol	168	None	replace
1027	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isVoid(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                      IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isVoid(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isVoid(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	97	None	replace
1028	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isGetProp(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                        IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isGetProp(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isGetProp(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	97	None	replace
1029	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isLocal(helperCode))  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                          IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isLocal(helperCode))  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isLocal(helperCode))  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	97	None	replace
1030	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                            IllegalStateException      [CONTEXT]      new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);      [BUGGY]  if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {  [BUGGY]      continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  HelperCodeUtil.isQuoted(helperCode)&&  reductions.size()  >  SAVINGS_THRESHOLD)  {	  if(helperCode    ==    null    ||    HelperCodeUtil.isQuoted(helperCode))    {    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	97	None	replace
