bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode!=  null)  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null)  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	8	replace
2	[BUG]  [BUGGY]  if(helperCode!=  null)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode!=  null)  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null)  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	8	replace
3	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.isEmpty())  {  [CE]  cannot  find  symbol  [FE]      IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode!=  null  ||  helperCode.isEmpty())  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.isEmpty())  {	if  (helperCode  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
4	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.isEmpty())  {  [CE]  cannot  find  symbol  [FE]        IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode  ==  null  ||  helperCode.isEmpty())  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.isEmpty())  {	if  (helperCode  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
5	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]          IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	8	replace
6	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [FE]  AssertionFailedError  [FE]          IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.NAME)  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	8	replace
7	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	8	replace
8	[BUG]  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [FE]  AssertionFailedError  [FE]            IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode!=  null  ||  helperCode.getType()  ==  Token.GETPROP)  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	8	replace
9	[BUG]  [BUGGY]    [CE]  class,  interface,  or  enum  expected  [FE]              IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]    [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	  	if  (helperCode  ==  null)  {  	non-compiled	[CE]  class,  interface,  or  enum  expected	3	None	replace
10	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( " "))  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.equals( " "))  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  IllegalStateException  	3	1	replace
11	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( " "))  {  [FE]  IllegalStateException  [FE]    IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode  ==  null  ||  helperCode.equals( " "))  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.equals( " "))  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  IllegalStateException  	3	1	replace
12	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.isSupported())  {  [CE]  cannot  find  symbol  [FE]      IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode  ==  null  ||  helperCode.isSupported())  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.isSupported())  {	if  (helperCode  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
13	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	8	replace
14	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [FE]  AssertionFailedError  [FE]    IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.NAME)  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	8	replace
15	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.isQuoted())  {  [CE]  cannot  find  symbol  [FE]      IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode  ==  null  ||  helperCode.isQuoted())  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.isQuoted())  {	if  (helperCode  ==  null)  {  	non-compiled	[CE]  cannot  find  symbol	3	None	replace
16	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	8	replace
17	[BUG]  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [FE]  AssertionFailedError  [FE]        IllegalStateException  [CONTEXT]  new  ReductionGatherer(reducers,  reductionMap));  for  (Reducer  reducer  :  reducers)  {  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  [BUGGY]  if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {  [BUGGY]  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	if(helperCode  ==  null  ||  helperCode.getType()!=  Token.RETURN)  {	if  (helperCode  ==  null)  {  	compilable	  [FE]  AssertionFailedError  	3	8	replace
