bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  reductions.addChildToBack(reduction);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildToBack(reduction);	  reduction.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
2	[BUG]  [BUGGY]  reduction.addChildToBack(helperCode);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(helperCode);	  reduction.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
3	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(reduction);  compiler.reportCodeChange();	          reducer.addChildrenToFront(helperCode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
4	[BUG]  [BUGGY]  reducingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  reducingRoot  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducingRoot.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	          reducer.addChildrenToFront(helperCode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	79	None	replace
5	[BUG]  [BUGGY]  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction);  compiler.reportCodeChange();	          reducer.addChildrenToFront(helperCode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
6	[BUG]  [BUGGY]  reduction.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	          reducer.addChildrenToFront(helperCode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
7	[BUG]  [BUGGY]  reducings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  reducings  [FE]                      AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducings.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	          reducer.addChildrenToFront(helperCode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  reducings	79	None	replace
8	[BUG]  [BUGGY]  reducer.addChildrenToFront(saving);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  saving  [FE]                        AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(saving);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(saving);  compiler.reportCodeChange();	          reducer.addChildrenToFront(helperCode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  saving	79	None	replace
9	[BUG]  [BUGGY]  réduir.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  r  [FE]                          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduir.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduir.addChildrenToFront(reduction);  compiler.reportCodeChange();	          reducer.addChildrenToFront(helperCode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  r	79	None	replace
10	[BUG]  [BUGGY]  reductions.removeChild(helperCodeCost);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.removeChild(helperCodeCost);	  reducings.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
11	[BUG]  [BUGGY]  reducers.removeChild(reduction);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.removeChild(reduction);	  reducings.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	60	None	replace
12	[BUG]  [BUGGY]  reducings.addChildToFront(reduction);  [CE]  cannot  find  symbol  reducings  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducings.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducings.addChildToFront(reduction);	  reducings.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducings	60	None	replace
13	[BUG]  [BUGGY]  reduction.apply(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  saving);	  reduction.apply(reduction,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	37	None	replace
14	[BUG]  [BUGGY]  reduction.apply(saving,  HelperCodeCost);  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(saving,  HelperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(saving,  HelperCodeCost);	  reduction.apply(reduction,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	37	None	replace
15	[BUG]  [BUGGY]  reduction.apply(reduction,  savings);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  savings);	  reduction.apply(reduction,    HelperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	37	None	replace
16	[BUG]  [BUGGY]  reduction.apply(reduction,  Savings);  [CE]  cannot  find  symbol  Savings  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  Savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  Savings);	  reduction.apply(reduction,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  Savings	37	None	replace
17	[BUG]  [BUGGY]  reduction.apply(reduction,  Saving);  [CE]  cannot  find  symbol  Saving  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  Saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  Saving);	  reduction.apply(reduction,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  Saving	37	None	replace
18	[BUG]  [BUGGY]  reductions.addChildToFront(helperCodeCost);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildToFront(helperCodeCost);	  reduction.addChildToFront(saver);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
19	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  HELPER_SOURCE);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  HELPER_SOURCE);	  reduction.apply(reduction,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	98	None	replace
20	[BUG]  [BUGGY]  réduction.apply(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  r  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.apply(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.apply(helperCodeCost,  reduction);	  reduction.apply(reduction,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  r	98	None	replace
21	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  réduction);  [CE]  cannot  find  symbol  r  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  réduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  réduction);	  reduction.apply(reduction,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  r	98	None	replace
22	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  HelperCode  [FE]        AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildrenToFront(reduction);  compiler.reportCodeChange();	          helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  HelperCode	76	None	replace
23	[BUG]  [BUGGY]  aiderCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  aiderCodeCost  [FE]          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();	          helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	76	None	replace
24	[BUG]  [BUGGY]  HelperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCodeCost.addChildrenToFront(reduction);  compiler.reportCodeChange();	          helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	76	None	replace
25	[BUG]  [BUGGY]  reduction.addChildToBack(parent);  [CE]  cannot  find  symbol  parent  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(parent);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(parent);	  reduction.addChildToBack(root);    	non-compiled	[CE]  cannot  find  symbol  parent	19	None	replace
26	[BUG]  [BUGGY]  reduction.addChildToBack(null);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(null);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(null);	  reduction.addChildToBack(root);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
27	[BUG]  [BUGGY]  reducer.addChildToBack(root);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToBack(root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToBack(root);	  reduction.addChildToBack(root);    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
28	[BUG]  [BUGGY]  reducer.removeChild(reduction  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction  -  1);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction  -  1);	  reducer.removeChild(reduction;    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	82	None	replace
29	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  reduction);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  reduction);	  reducer.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
30	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  saving);	  reducer.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	25	None	replace
31	[BUG]  [BUGGY]  reducer.addChildToFront(helperCode,  reduction);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(helperCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(helperCode,  reduction);	  reducer.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
32	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  savings);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  savings);	  reducer.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
33	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  root);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  root);	  reducer.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
34	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.addChildToFront(helperCode,  reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.addChildToFront(helperCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.addChildToFront(helperCode,  reduction);	  reducer.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	25	None	replace
35	[BUG]  [BUGGY]  reduction.apply(helperCode,  reduction.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  reduction.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  reduction.DEFAULT_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	97	None	replace
36	[BUG]  [BUGGY]  reduction.apply(reduction,  Savings.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  Savings  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  Savings.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  Savings.DEFAULT_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  Savings	97	None	replace
37	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  HelperCodeCost.DEFAULT_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	97	None	replace
38	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  Reducer.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  Reducer.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  Reducer.DEFAULT_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	97	None	replace
39	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  reduction.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  reduction.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  reduction.DEFAULT_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	97	None	replace
40	[BUG]  [BUGGY]  reduction.apply(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  savings);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  savings);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	97	None	replace
41	[BUG]  [BUGGY]  reduction.apply(helperCode,  Reducer.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  Reducer.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  Reducer.DEFAULT_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	97	None	replace
42	[BUG]  [BUGGY]  reduction.apply(reduction,  helperCode);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  helperCode);	  reduction.apply(reduction);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	34	None	replace
43	[BUG]  [BUGGY]  HelperCode.addChildToFront(reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildToFront(reduction);  compiler.reportCodeChange();	          helperCodeCost.addChildToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  HelperCode	78	None	replace
44	[BUG]  [BUGGY]  aiderCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  aiderCodeCost  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();	          helperCodeCost.addChildToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	78	None	replace
45	[BUG]  [BUGGY]  reduction.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(helperCodeCost);  compiler.reportCodeChange();	          helperCodeCost.addChildToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
46	[BUG]  [BUGGY]  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                  AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCode.addChildToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCode.addChildToFront(reduction);  compiler.reportCodeChange();	          helperCodeCost.addChildToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	78	None	replace
47	[BUG]  [BUGGY]  HelperCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                    AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCodeCost.addChildToFront(reduction);  compiler.reportCodeChange();	          helperCodeCost.addChildToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	78	None	replace
48	[BUG]  [BUGGY]  reductions.addChildToBack(helperCodeCost);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildToBack(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildToBack(helperCodeCost);	  reduction.addChildToBack(saving);    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
49	[BUG]  [BUGGY]  reducer.addChildToFront(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(problemCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(problemCodeCost);	  reducer.addChildToFront(saving);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	66	None	replace
50	[BUG]  [BUGGY]  reducer.addChildToFront(rededuction);  [CE]  cannot  find  symbol  rededuction  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(rededuction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(rededuction);	  reducer.addChildToFront(saving);    	non-compiled	[CE]  cannot  find  symbol  rededuction	66	None	replace
51	[BUG]  [BUGGY]  reducer.addChildToFront(null);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(null);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(null);	  reducer.addChildToFront(saving);    	non-compiled	[CE]  cannot  find  symbol	66	None	replace
52	[BUG]  [BUGGY]  helperCode.addChildrenToFront(reduction,  reduction);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCode.addChildrenToFront(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCode.addChildrenToFront(reduction,  reduction);	          helperCode.addChildrenToFront(reduction);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	44	None	replace
53	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction,  reduction);  [CE]  cannot  find  symbol  HelperCode  [FE]                  AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildrenToFront(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildrenToFront(reduction,  reduction);	          helperCode.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	44	None	replace
54	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                    AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildrenToFront(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildrenToFront(reduction,  saving);	          helperCode.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	44	None	replace
55	[BUG]  [BUGGY]  helperCode.addChildrenToFront(reduction,  reducer);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCode.addChildrenToFront(reduction,  reducer);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCode.addChildrenToFront(reduction,  reducer);	          helperCode.addChildrenToFront(reduction);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	44	None	replace
56	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction,  reducer);  [CE]  cannot  find  symbol  HelperCode  [FE]                        AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildrenToFront(reduction,  reducer);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildrenToFront(reduction,  reducer);	          helperCode.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	44	None	replace
57	[BUG]  [BUGGY]  helperCode.addChildrenToFront(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCode.addChildrenToFront(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCode.addChildrenToFront(reduction,  saving);	          helperCode.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	44	None	replace
58	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSuccess();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSuccess();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost  +=  reduction.estimateSuccess();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
59	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateLocalSavings();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateLocalSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost  +=  reduction.estimateLocalSavings();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
60	[BUG]  [BUGGY]  HelperCodeCost  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]        AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost  +=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCodeCost  +=  reduction.estimateSavings();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	90	None	replace
61	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateStructure();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateStructure();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost  +=  reduction.estimateStructure();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
62	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings()  *  SAVINGS_THRESHOLD;  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	add	helperCodeCost  +=  reduction.estimateSavings()  *  SAVINGS_THRESHOLD;	  helperCodeCost    +=    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	90	9	replace
63	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings()  *  SAVINGS_THRESHOLD;  [FE]  AssertionFailedError  [FE]            AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings()  *  SAVINGS_THRESHOLD;  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost  +=  reduction.estimateSavings()  *  SAVINGS_THRESHOLD;	  helperCodeCost    +=    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	90	9	replace
64	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings()  -  SAVINGS_THRESHOLD;  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	add	helperCodeCost  +=  reduction.estimateSavings()  -  SAVINGS_THRESHOLD;	  helperCodeCost    +=    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	90	9	replace
65	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings()  -  SAVINGS_THRESHOLD;  [FE]  AssertionFailedError  [FE]              AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings()  -  SAVINGS_THRESHOLD;  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost  +=  reduction.estimateSavings()  -  SAVINGS_THRESHOLD;	  helperCodeCost    +=    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	90	9	replace
66	[BUG]  [BUGGY]  reductions.addChildrenToFront(helperCodeCost);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildrenToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildrenToFront(helperCodeCost);	  reducings.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
67	[BUG]  [BUGGY]  reducingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  reducingRoot  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducingRoot.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducingRoot.addChildrenToFront(reduction);	  reducings.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	29	None	replace
68	[BUG]  [BUGGY]  eliminatingRoot.addChildrenToFront(helperCodeCost);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  eliminatingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	eliminatingRoot.addChildrenToFront(helperCodeCost);	  reducings.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	29	None	replace
69	[BUG]  [BUGGY]  savings.addChildrenToFront(helperCodeCost);  [CE]  int  cannot  be  dereferenced  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings.addChildrenToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	savings.addChildrenToFront(helperCodeCost);	  reducings.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  int  cannot  be  dereferenced	29	None	replace
70	[BUG]  [BUGGY]  reducing.addChildToFront(helperCodeCost);  [CE]  cannot  find  symbol  reducing  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.addChildToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.addChildToFront(helperCodeCost);	  reducing.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	7	None	replace
71	[BUG]  [BUGGY]  réduir.addChildToFront(helperCodeCost);  [CE]  cannot  find  symbol  r  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduir.addChildToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduir.addChildToFront(helperCodeCost);	  reducing.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  r	7	None	replace
72	[BUG]  [BUGGY]  helperCodeCost.addChildToBack(reduction,  reduction);  [CE]  int  cannot  be  dereferenced  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost.addChildToBack(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost.addChildToBack(reduction,  reduction);	          helperCodeCost.addChildToBack(reduction);    	non-compiled	[CE]  int  cannot  be  dereferenced	42	None	replace
73	[BUG]  [BUGGY]  HelperCode.addChildToBack(reduction,  reduction);  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildToBack(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildToBack(reduction,  reduction);	          helperCodeCost.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	42	None	replace
74	[BUG]  [BUGGY]  helperCode.addChildToBack(reduction);  [CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCode.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCode.addChildToBack(reduction);	          helperCodeCost.addChildToBack(reduction);    	non-compiled	[CE]  method  addChildToBack  in  class  Node  cannot  be  applied  to  given  types;	42	None	replace
75	[BUG]  [BUGGY]  HelperCode.addChildToBack(reduction);  [CE]  cannot  find  symbol  HelperCode  [FE]                  AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildToBack(reduction);	          helperCodeCost.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	42	None	replace
76	[BUG]  [BUGGY]  HelperCodeCost.addChildToBack(reduction,  reduction);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                    AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost.addChildToBack(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCodeCost.addChildToBack(reduction,  reduction);	          helperCodeCost.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	42	None	replace
77	[BUG]  [BUGGY]  reduction.addChildrenToFront(helperCode,  reduction);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(helperCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(helperCode,  reduction);	  reduction.addChildrenToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
78	[BUG]  [BUGGY]  reduction.addChildrenToFront(reduction,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(reduction,  aiderCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(reduction,  aiderCodeCost);	  reduction.addChildrenToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	88	None	replace
79	[BUG]  [BUGGY]  reduction.addChildrenToFront(saving,  helperCodeCost);  [CE]  cannot  find  symbol  saving  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(saving,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(saving,  helperCodeCost);	  reduction.addChildrenToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	88	None	replace
80	[BUG]  [BUGGY]  reduction.addChildrenToFront(reduction,  helperCode);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(reduction,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(reduction,  helperCode);	  reduction.addChildrenToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
81	[BUG]  [BUGGY]  reduction.addChildrenToFront(reduction,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(reduction,  HelperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(reduction,  HelperCodeCost);	  reduction.addChildrenToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	88	None	replace
82	[BUG]  [BUGGY]  reduction.addChildToBack(save);  [CE]  cannot  find  symbol  save  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(save);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(save);	  reduction.addChildToBack(saver);    	non-compiled	[CE]  cannot  find  symbol  save	16	None	replace
83	[BUG]  [BUGGY]  reduction.apply(savings,  reduction.helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(savings,  reduction.helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(savings,  reduction.helperCodeCost);	  reduction.apply(reduction.helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	38	None	replace
84	[BUG]  [BUGGY]  reduction.apply(reduction.getSavings(),  savings);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction.getSavings(),  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction.getSavings(),  savings);	  reduction.apply(reduction.helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
85	[BUG]  [BUGGY]  reduction.apply(reduction.getName(),  savings);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction.getName(),  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction.getName(),  savings);	  reduction.apply(reduction.helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
86	[BUG]  [BUGGY]  reduction.apply(reduction.helperCodeCost,  saving);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction.helperCodeCost,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction.helperCodeCost,  saving);	  reduction.apply(reduction.helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	38	None	replace
87	[BUG]  [BUGGY]  reducer.removeChild(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  saving);	  reducer.removeChild(reduction,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  saving	68	None	replace
88	[BUG]  [BUGGY]  reducer.removeChild(reduction,  reduction);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  reduction);	  reducer.removeChild(reduction,    helperCode);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
89	[BUG]  [BUGGY]  reducer.removeChild(reduction,  savings);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  savings);	  reducer.removeChild(reduction,    helperCode);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
90	[BUG]  [BUGGY]  reducer.removeChild(reduction,  root);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  root);	  reducer.removeChild(reduction,    helperCode);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
91	[BUG]  [BUGGY]  reducer.removeChild(reduction,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  helpingRoot);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  helpingRoot);	  reducer.removeChild(reduction,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	68	None	replace
92	[BUG]  [BUGGY]  reducer.removeChild(reduction,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  contributingRoot);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  contributingRoot);	  reducer.removeChild(reduction,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	68	None	replace
93	[BUG]  [BUGGY]  reduction.addChildToBack(reduction,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(reduction,  aiderCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(reduction,  aiderCodeCost);	  reduction.addChildToBack(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	83	None	replace
94	[BUG]  [BUGGY]  reduction.addChildToBack(reduction,  helperCode);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(reduction,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(reduction,  helperCode);	  reduction.addChildToBack(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
95	[BUG]  [BUGGY]  reduction.addChildToBack(reduction,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(reduction,  HelperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(reduction,  HelperCodeCost);	  reduction.addChildToBack(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	83	None	replace
96	[BUG]  [BUGGY]  reduction.addChildToBack(helperCode,  reduction);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(helperCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(helperCode,  reduction);	  reduction.addChildToBack(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
97	[BUG]  [BUGGY]  reducing.addChildToBack(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reducing  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.addChildToBack(reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.addChildToBack(reduction,  helperCodeCost);	  reduction.addChildToBack(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	83	None	replace
98	[BUG]  [BUGGY]  helperCode.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCode.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCode.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();	          helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	77	None	replace
99	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction,  saving);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  saving  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildrenToFront(reduction,  saving);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildrenToFront(reduction,  saving);  compiler.reportCodeChange();	          helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  saving	77	None	replace
100	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  HelperCode  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();	          helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  HelperCode	77	None	replace
101	[BUG]  [BUGGY]  reducer.addChildToBack(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToBack(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToBack(reduction,  saving);	          reducer.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	43	None	replace
102	[BUG]  [BUGGY]  reducer.addChildToBack(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToBack(reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToBack(reduction,  helperCodeCost);	          reducer.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
103	[BUG]  [BUGGY]  reducer.addChildToBack(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToBack(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToBack(helperCodeCost,  reduction);	          reducer.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
104	[BUG]  [BUGGY]  réduir.addChildToBack(helperCodeCost);  [CE]  cannot  find  symbol  r  [FE]                    AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduir.addChildToBack(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduir.addChildToBack(helperCodeCost);	          reducer.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  r	43	None	replace
105	[BUG]  [BUGGY]  reduction.apply(root,  reduction,  helperCodeCost);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(root,  reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(root,  reduction,  helperCodeCost);	  reduction.apply(root,    helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	36	None	replace
106	[BUG]  [BUGGY]  reduction.apply(reduction,  helperCodeCost,  savings);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  helperCodeCost,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  helperCodeCost,  savings);	  reduction.apply(root,    helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	36	None	replace
107	[BUG]  [BUGGY]  reduction.apply(reduction,  helperCodeCost,  reduction);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  helperCodeCost,  reduction);	  reduction.apply(root,    helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	36	None	replace
108	[BUG]  [BUGGY]  reduction.apply(helperCode,  root);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  root);	  reduction.apply(root,    helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	36	None	replace
109	[BUG]  [BUGGY]  reduction.apply(root,  reduction);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(root,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(root,  reduction);	  reduction.apply(root,    helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	36	None	replace
110	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  root);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  root);	  reduction.apply(root,    helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	36	None	replace
111	[BUG]  [BUGGY]  reduction.apply(reduction,  helperCodeCost,  reducer);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  helperCodeCost,  reducer);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  helperCodeCost,  reducer);	  reduction.apply(root,    helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	36	None	replace
112	[BUG]  [BUGGY]  elimination.removeChild(reduction);  [CE]  cannot  find  symbol  elimination  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  elimination.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	elimination.removeChild(reduction);	  elimination.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  elimination	74	None	replace
113	[BUG]  [BUGGY]  eliminatingRoot.removeChild(helperCodeCost);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  eliminatingRoot.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	eliminatingRoot.removeChild(helperCodeCost);	  elimination.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	74	None	replace
114	[BUG]  [BUGGY]  elimination.removeChild(root);  [CE]  cannot  find  symbol  elimination  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  elimination.removeChild(root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	elimination.removeChild(root);	  elimination.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  elimination	74	None	replace
115	[BUG]  [BUGGY]  removal.removeChild(reduction);  [CE]  cannot  find  symbol  removal  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  removal.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	removal.removeChild(reduction);	  elimination.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  removal	74	None	replace
116	[BUG]  [BUGGY]  eliminatingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  eliminatingRoot.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	eliminatingRoot.removeChild(reduction);	  elimination.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	74	None	replace
117	[BUG]  [BUGGY]  eliminating.removeChild(reduction);  [CE]  cannot  find  symbol  eliminating  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  eliminating.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	eliminating.removeChild(reduction);	  elimination.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  eliminating	74	None	replace
118	[BUG]  [BUGGY]  helperCode.removeChild(reduction);  [CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCode.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCode.removeChild(reduction);	  réduir.removeChild(reduction);    	non-compiled	[CE]  method  removeChild  in  class  Node  cannot  be  applied  to  given  types;	62	None	replace
119	[BUG]  [BUGGY]  HelperCode.removeChild(reduction);  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.removeChild(reduction);	  réduir.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	62	None	replace
120	[BUG]  [BUGGY]  aiderCode.removeChild(reduction);  [CE]  cannot  find  symbol  aiderCode  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCode.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCode.removeChild(reduction);	  réduir.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	62	None	replace
121	[BUG]  [BUGGY]  reduction.addChildToFront(helperCode,  reduction);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(helperCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(helperCode,  reduction);	  reduction.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
122	[BUG]  [BUGGY]  reduction.addChildToFront(saving,  helperCodeCost);  [CE]  cannot  find  symbol  saving  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(saving,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(saving,  helperCodeCost);	  reduction.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	6	None	replace
123	[BUG]  [BUGGY]  reduction.addChildToFront(parent,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  parent  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(parent,  reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(parent,  reduction,  helperCodeCost);	  reduction.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  parent	6	None	replace
124	[BUG]  [BUGGY]  reduction.addChildToFront(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(reduction,  saving);	  reduction.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	6	None	replace
125	[BUG]  [BUGGY]  reduction.addChildToFront(saverCode,  reduction);  [CE]  cannot  find  symbol  saverCode  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(saverCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(saverCode,  reduction);	  reduction.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saverCode	6	None	replace
126	[BUG]  [BUGGY]  reduction.addChildToFront(saverCodeCost,  reduction);  [CE]  cannot  find  symbol  saverCodeCost  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(saverCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(saverCodeCost,  reduction);	  reduction.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	6	None	replace
127	[BUG]  [BUGGY]  Helfer.removeChild(helperCodeCost);  [CE]  cannot  find  symbol  Helfer  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Helfer.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Helfer.removeChild(helperCodeCost);	  réduir.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  Helfer	55	None	replace
128	[BUG]  [BUGGY]  aiderCode.removeChild(helperCodeCost);  [CE]  cannot  find  symbol  aiderCode  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCode.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCode.removeChild(helperCodeCost);	  réduir.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	55	None	replace
129	[BUG]  [BUGGY]  helperCodeCost.removeChild(reduction);  [CE]  int  cannot  be  dereferenced  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost.removeChild(reduction);	  réduir.removeChild(helperCodeCost);    	non-compiled	[CE]  int  cannot  be  dereferenced	55	None	replace
130	[BUG]  [BUGGY]  Aider.removeChild(helperCodeCost);  [CE]  cannot  find  symbol  Aider  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Aider.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Aider.removeChild(helperCodeCost);	  réduir.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  Aider	55	None	replace
131	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);	  Reducer    reducer    =    compiler.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	80	None	replace
132	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null);	  Reducer    reducer    =    compiler.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	80	None	replace
133	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction).removeChild(helperCodeCost);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction).removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction).removeChild(helperCodeCost);	  Reducer    reducer    =    compiler.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	80	None	replace
134	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.removeChild(reduction,  helperCodeCost);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.removeChild(reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.removeChild(reduction,  helperCodeCost);	  Reducer    reducer    =    compiler.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	80	None	replace
135	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.replaceChild(root,  reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.replaceChild(root,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.replaceChild(root,  reduction);	  Reducer    reducer    =    compiler.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	80	None	replace
136	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);	  Reducer    reducer    =    compiler.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	80	None	replace
137	[BUG]  [BUGGY]  reduction.addChildrenToFront(parent,  reduction);  [CE]  cannot  find  symbol  parent  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(parent,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(parent,  reduction);	  reduction.addChildrenToFront(root);    	non-compiled	[CE]  cannot  find  symbol  parent	12	None	replace
138	[BUG]  [BUGGY]  reduction.addChildrenToFront(root,  reduction);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(root,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(root,  reduction);	  reduction.addChildrenToFront(root);    	non-compiled	[CE]  cannot  find  symbol	12	None	replace
139	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.removeChild(helperCodeCost);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reductions.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reductions.removeChild(helperCodeCost);	  Reducer    reducer    =    reductions.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	104	None	replace
140	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.getChildren().removeChild(reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reductions.getChildren().removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reductions.getChildren().removeChild(reduction);	  Reducer    reducer    =    reductions.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	104	None	replace
141	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.getReductions().removeChild(reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.getReductions().removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.getReductions().removeChild(reduction);	  Reducer    reducer    =    reductions.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	104	None	replace
142	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(parent);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.removeChild(parent);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.removeChild(parent);	  Reducer    reducer    =    reductions.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	104	None	replace
143	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.get(reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reductions.get(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reductions.get(reduction);	  Reducer    reducer    =    reductions.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	104	None	replace
144	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCode);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.removeChild(helperCode);	  Reducer    reducer    =    reductions.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	104	None	replace
145	[BUG]  [BUGGY]  reduction.removeChild(null);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(null);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(null);	  reduction.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
146	[BUG]  [BUGGY]  reduction.removeChild(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(problemCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(problemCodeCost);	  reduction.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	48	None	replace
147	[BUG]  [BUGGY]  reduction.removeChild(helperCodeCost  +  reduction);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(helperCodeCost  +  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(helperCodeCost  +  reduction);	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	73	None	replace
148	[BUG]  [BUGGY]  reduction.removeChild(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD);	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	73	None	replace
149	[BUG]  [BUGGY]  reduction.removeChild(reduction  +  SAVINGS_THRESHOLD);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(reduction  +  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(reduction  +  SAVINGS_THRESHOLD);	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	73	None	replace
150	[BUG]  [BUGGY]  reduction.removeChild(saverCodeCost  +  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  saverCodeCost  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(saverCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(saverCodeCost  +  SAVINGS_THRESHOLD);	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	73	None	replace
151	[BUG]  [BUGGY]  reduction.removeChild(reduction.helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(reduction.helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(reduction.helperCodeCost  +  SAVINGS_THRESHOLD);	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	73	None	replace
152	[BUG]  [BUGGY]  reduction.removeChild(saver  +  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  saver  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(saver  +  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(saver  +  SAVINGS_THRESHOLD);	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  saver	73	None	replace
153	[BUG]  [BUGGY]  reduction.removeChild(root  +  SAVINGS_THRESHOLD);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(root  +  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(root  +  SAVINGS_THRESHOLD);	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	73	None	replace
154	[BUG]  [BUGGY]  reducer.removeChild(root,  reduction);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(root,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(root,  reduction);	  reducer.removeChild(root);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
155	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(root);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.removeChild(root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.removeChild(root);	  reducer.removeChild(root);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	63	None	replace
156	[BUG]  [BUGGY]  reducer.removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(parent);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(parent);	  reducer.removeChild(root);    	non-compiled	[CE]  cannot  find  symbol  parent	63	None	replace
157	[BUG]  [BUGGY]  reduction.apply(reduction,  reduction,  helperCodeCost);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  reduction,  helperCodeCost);	  reduction.apply(reduction,    helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	33	None	replace
158	[BUG]  [BUGGY]  reduction.apply(reduction,  contributingRoot,  helperCodeCost);  [CE]  cannot  find  symbol  contributingRoot  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  contributingRoot,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  contributingRoot,  helperCodeCost);	  reduction.apply(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	33	None	replace
159	[BUG]  [BUGGY]  reduction.apply(reduction,  saving,  helperCodeCost);  [CE]  cannot  find  symbol  saving  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  saving,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  saving,  helperCodeCost);	  reduction.apply(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	33	None	replace
160	[BUG]  [BUGGY]  reduction.apply(reduction,  root,  helperCodeCost);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  root,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  root,  helperCodeCost);	  reduction.apply(reduction,    helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	33	None	replace
161	[BUG]  [BUGGY]  eliminatingRoot.addChildToFront(helperCodeCost);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  eliminatingRoot.addChildToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	eliminatingRoot.addChildToFront(helperCodeCost);	  reducings.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	23	None	replace
162	[BUG]  [BUGGY]  reducingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  reducingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducingRoot.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducingRoot.addChildToFront(reduction);	  reducings.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	23	None	replace
163	[BUG]  [BUGGY]  savings.addChildToFront(helperCodeCost);  [CE]  int  cannot  be  dereferenced  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings.addChildToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	savings.addChildToFront(helperCodeCost);	  reducings.addChildToFront(helperCodeCost);    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
164	[BUG]  [BUGGY]  reductions.addChildToFront(reduction);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildToFront(reduction);	  reduction.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
165	[BUG]  [BUGGY]  savingRoot.addChildrenToFront(helperCodeCost);  [CE]  cannot  find  symbol  savingRoot  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savingRoot.addChildrenToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	savingRoot.addChildrenToFront(helperCodeCost);	  reducingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	30	None	replace
166	[BUG]  [BUGGY]  helpingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  helpingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helpingRoot.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helpingRoot.addChildrenToFront(reduction);	  reducingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	30	None	replace
167	[BUG]  [BUGGY]  eliminatingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  eliminatingRoot.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	eliminatingRoot.addChildrenToFront(reduction);	  reducingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	30	None	replace
168	[BUG]  [BUGGY]  addingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  addingRoot  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  addingRoot.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	addingRoot.addChildrenToFront(reduction);	  reducingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  addingRoot	30	None	replace
169	[BUG]  [BUGGY]  lettingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  lettingRoot  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  lettingRoot.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	lettingRoot.addChildrenToFront(reduction);	  reducingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  lettingRoot	30	None	replace
170	[BUG]  [BUGGY]  contributingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  contributingRoot  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  contributingRoot.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	contributingRoot.addChildrenToFront(reduction);	  reducingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	30	None	replace
171	[BUG]  [BUGGY]  reductions.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildrenToFront(reduction);	  reduction.addChildrenToFront(savings);    	non-compiled	[CE]  cannot  find  symbol	102	None	replace
172	[BUG]  [BUGGY]  reducingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  reducingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducingRoot.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducingRoot.removeChild(reduction);	  reducingr.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	95	None	replace
173	[BUG]  [BUGGY]  reduction.removeChild(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(reduction,  helperCodeCost);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
174	[BUG]  [BUGGY]  reduction.removeChild(reduction,  helperCode);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(reduction,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(reduction,  helperCode);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
175	[BUG]  [BUGGY]  reduction.removeChild(reduction,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(reduction,  aiderCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(reduction,  aiderCodeCost);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	51	None	replace
176	[BUG]  [BUGGY]  reducing.removeChild(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reducing  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.removeChild(reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.removeChild(reduction,  helperCodeCost);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	51	None	replace
177	[BUG]  [BUGGY]  reductions.removeChild(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.removeChild(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.removeChild(helperCodeCost,  reduction);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
178	[BUG]  [BUGGY]  reduction.removeChild(reduction,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(reduction,  HelperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(reduction,  HelperCodeCost);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	51	None	replace
179	[BUG]  [BUGGY]  reducer.addChildToFront(root);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(root);	  reduction.addChildToFront(root);    	non-compiled	[CE]  cannot  find  symbol	5	None	replace
180	[BUG]  [BUGGY]  reduction.apply(helperCode,  reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  reduction,  saving);	  reduction.apply(helperCode,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	71	None	replace
181	[BUG]  [BUGGY]  reduction.apply(helperCode,  reduction,  savings);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  reduction,  savings);	  reduction.apply(helperCode,    reduction);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	71	None	replace
182	[BUG]  [BUGGY]  reduction.apply(helperCode,  reduction,  helperCodeCost);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  reduction,  helperCodeCost);	  reduction.apply(helperCode,    reduction);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	71	None	replace
183	[BUG]  [BUGGY]  helperCodeCost.addChildToFront(reduction,  reduction);  [CE]  int  cannot  be  dereferenced  [FE]          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost.addChildToFront(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost.addChildToFront(reduction,  reduction);	          helperCodeCost.addChildToFront(reduction);    	non-compiled	[CE]  int  cannot  be  dereferenced	41	None	replace
184	[BUG]  [BUGGY]  HelperCode.addChildToFront(reduction,  reduction);  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildToFront(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildToFront(reduction,  reduction);	          helperCodeCost.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	41	None	replace
185	[BUG]  [BUGGY]  helperCode.addChildToFront(reduction);  [CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCode.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCode.addChildToFront(reduction);	          helperCodeCost.addChildToFront(reduction);    	non-compiled	[CE]  method  addChildToFront  in  class  Node  cannot  be  applied  to  given  types;	41	None	replace
186	[BUG]  [BUGGY]  HelperCode.addChildToFront(reduction);  [CE]  cannot  find  symbol  HelperCode  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildToFront(reduction);	          helperCodeCost.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	41	None	replace
187	[BUG]  [BUGGY]  HelperCodeCost.addChildToFront(reduction,  reduction);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost.addChildToFront(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCodeCost.addChildToFront(reduction,  reduction);	          helperCodeCost.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	41	None	replace
188	[BUG]  [BUGGY]  reduction.apply(saving,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  saving  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(saving,  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(saving,  SAVINGS_THRESHOLD);	  reduction.apply(reduction,    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	72	None	replace
189	[BUG]  [BUGGY]  reduction.apply(savings,  reduction);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(savings,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(savings,  reduction);	  reduction.apply(reduction,    aiderCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	72	None	replace
190	[BUG]  [BUGGY]  reduction.removeChild(child);  [CE]  cannot  find  symbol  child  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(child);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(child);	  reduction.removeChild(saver);    	non-compiled	[CE]  cannot  find  symbol  child	52	None	replace
191	[BUG]  [BUGGY]  reduction.removeChild(saving);  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(saving);	  reduction.removeChild(saver);    	non-compiled	[CE]  cannot  find  symbol  saving	52	None	replace
192	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.addChildrenToFront(helperCodeCost);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.addChildrenToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.addChildrenToFront(helperCodeCost);	  reducer.addChildrenToFront(saved);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	107	None	replace
193	[BUG]  [BUGGY]  reducer.addChildrenToFront(rededuction);  [CE]  cannot  find  symbol  rededuction  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(rededuction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(rededuction);	  reducer.addChildrenToFront(saved);    	non-compiled	[CE]  cannot  find  symbol  rededuction	107	None	replace
194	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction;  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(reduction;  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(reduction;	  reducer.addChildrenToFront(saved);    	non-compiled	[CE]  ')'  expected	107	None	replace
195	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(reduction,  saving);	  reducer.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	28	None	replace
196	[BUG]  [BUGGY]  reducer.addChildrenToFront(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(helperCodeCost,  reduction);	  reducer.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
197	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  reduction);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(reduction,  reduction);	  reducer.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
198	[BUG]  [BUGGY]  Reduction  reduction  =  reduction.removeChild(helperCodeCost);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reduction  reduction  =  reduction.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reduction  reduction  =  reduction.removeChild(helperCodeCost);	  réduction.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	86	None	replace
199	[BUG]  [BUGGY]  prevention.removeChild(helperCodeCost);  [CE]  cannot  find  symbol  prevention  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  prevention.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	prevention.removeChild(helperCodeCost);	  réduction.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  prevention	86	None	replace
200	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
201	[BUG]  [BUGGY]  HelperCodeHelperCode  helperCodeCost  =  reduction.getHelperCodeCost();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeHelperCode  helperCodeCost  =  reduction.getHelperCodeCost();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCodeHelperCode  helperCodeCost  =  reduction.getHelperCodeCost();	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
202	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction,  reduction.getHelperCodeCost();  [CE]  ';'  expected  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction,  reduction.getHelperCodeCost();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCodeCost  =  reduction,  reduction.getHelperCodeCost();	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  ';'  expected	92	None	replace
203	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(saving);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(saving);	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
204	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  aiderCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  aiderCodeCost);	  reducer.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	99	None	replace
205	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  HelperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  HelperCodeCost);	  reducer.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	99	None	replace
206	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  helping);  [CE]  cannot  find  symbol  helping  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  helping);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  helping);	  reducer.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  helping	99	None	replace
207	[BUG]  [BUGGY]  reducings.addChildToFront(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reducings  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducings.addChildToFront(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducings.addChildToFront(helperCodeCost,  reduction);	  reducer.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducings	99	None	replace
208	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  helperCode);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  helperCode);	  reducer.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	99	None	replace
209	[BUG]  [BUGGY]  reducings.removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducings.removeChild(parent);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducings.removeChild(parent);	  reducings.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  parent	56	None	replace
210	[BUG]  [BUGGY]  helpingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  helpingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helpingRoot.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helpingRoot.addChildToFront(reduction);	  reducingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	24	None	replace
211	[BUG]  [BUGGY]  savingRoot.addChildToFront(helperCodeCost);  [CE]  cannot  find  symbol  savingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savingRoot.addChildToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	savingRoot.addChildToFront(helperCodeCost);	  reducingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	24	None	replace
212	[BUG]  [BUGGY]  eliminatingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  eliminatingRoot  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  eliminatingRoot.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	eliminatingRoot.addChildToFront(reduction);	  reducingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  eliminatingRoot	24	None	replace
213	[BUG]  [BUGGY]  lettingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  lettingRoot  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  lettingRoot.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	lettingRoot.addChildToFront(reduction);	  reducingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  lettingRoot	24	None	replace
214	[BUG]  [BUGGY]  contributingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  contributingRoot  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  contributingRoot.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	contributingRoot.addChildToFront(reduction);	  reducingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	24	None	replace
215	[BUG]  [BUGGY]  Savings.addChildToFront(reduction);  [CE]  cannot  find  symbol  Savings  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Savings.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Savings.addChildToFront(reduction);	  reducingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  Savings	24	None	replace
216	[BUG]  [BUGGY]  reducer.removeChild(reduction,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  aiderCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  aiderCodeCost);	  reducer.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	81	None	replace
217	[BUG]  [BUGGY]  reducer.removeChild(reduction,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  HelperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  HelperCodeCost);	  reducer.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	81	None	replace
218	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost,  reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.removeChild(helperCodeCost,  reduction);	  reducer.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	81	None	replace
219	[BUG]  [BUGGY]  reducings.removeChild(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reducings  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducings.removeChild(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducings.removeChild(helperCodeCost,  reduction);	  reducer.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducings	81	None	replace
220	[BUG]  [BUGGY]  reducer.addChildToFront(save);  [CE]  cannot  find  symbol  save  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(save);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(save);	  reducer.addChildToFront(reductionCost);    	non-compiled	[CE]  cannot  find  symbol  save	26	None	replace
221	[BUG]  [BUGGY]  reduction.addChildToBack(new  HelperCodeCost,  reduction);  [CE]  '('  or  '['  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(new  HelperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(new  HelperCodeCost,  reduction);	  reduction.addChildToBack(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
222	[BUG]  [BUGGY]  reducer.addChildToBack(new  HelperCodeCost,  reduction);  [CE]  '('  or  '['  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToBack(new  HelperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToBack(new  HelperCodeCost,  reduction);	  reduction.addChildToBack(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
223	[BUG]  [BUGGY]  reduction.addChildToBack(new  HelperCodeCost,  saving);  [CE]  '('  or  '['  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(new  HelperCodeCost,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(new  HelperCodeCost,  saving);	  reduction.addChildToBack(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
224	[BUG]  [BUGGY]  reducer.addChildToBack(new  HelperCodeCost);  [CE]  '('  or  '['  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToBack(new  HelperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToBack(new  HelperCodeCost);	  reduction.addChildToBack(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
225	[BUG]  [BUGGY]  reducer.addChildToFront(saving,  helperCode);  [CE]  cannot  find  symbol  saving  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(saving,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(saving,  helperCode);	  reducer.addChildToFront(reductionCost,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  saving	27	None	replace
226	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  Saving);  [CE]  cannot  find  symbol  Saving  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  Saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  Saving);	  reducer.addChildToFront(reductionCost,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  Saving	27	None	replace
227	[BUG]  [BUGGY]  reducings.addChildToBack(helperCodeCost);  [CE]  cannot  find  symbol  reducings  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducings.addChildToBack(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducings.addChildToBack(helperCodeCost);	  reducings.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducings	21	None	replace
228	[BUG]  [BUGGY]  reducers.addChildToBack(reduction);  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.addChildToBack(reduction);	  reducings.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
229	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.addChildToFront(helperCodeCost);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.addChildToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.addChildToFront(helperCodeCost);	  reducer.addChildToFront(saved);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	100	None	replace
230	[BUG]  [BUGGY]  reducer.addChildToFront(reduction;  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction;  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction;	  reducer.addChildToFront(saved);    	non-compiled	[CE]  ')'  expected	100	None	replace
231	[BUG]  [BUGGY]  réduction.addChildrenToFront(helperCodeCost);  [CE]  cannot  find  symbol  r  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.addChildrenToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.addChildrenToFront(helperCodeCost);	  reduction.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  r	8	None	replace
232	[BUG]  [BUGGY]  reductions.removeChild(helperCode);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.removeChild(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.removeChild(helperCode);	  reductions.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
233	[BUG]  [BUGGY]  reductions.removeChild(parent);  [CE]  cannot  find  symbol  parent  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.removeChild(parent);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.removeChild(parent);	  reductions.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  parent	47	None	replace
234	[BUG]  [BUGGY]  reduction.addChildToFront(root,  helperCode);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(root,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(root,  helperCode);	  reduction.addChildToFront(parent,    helperCode);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
235	[BUG]  [BUGGY]  reduction.addChildToFront(externs,  helperCode);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(externs,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(externs,  helperCode);	  reduction.addChildToFront(parent,    helperCode);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
236	[BUG]  [BUGGY]  reduction.addChildToFront(null,  helperCode);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(null,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(null,  helperCode);	  reduction.addChildToFront(parent,    helperCode);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
237	[BUG]  [BUGGY]  reduction.addChildToFront(newChild,  helperCode);  [CE]  cannot  find  symbol  newChild  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(newChild,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(newChild,  helperCode);	  reduction.addChildToFront(parent,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  newChild	59	None	replace
238	[BUG]  [BUGGY]  reducer.addChildrenToFront(helperCode,  reduction);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(helperCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(helperCode,  reduction);	  reducer.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
239	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  savings);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(reduction,  savings);	  reducer.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
240	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.addChildrenToFront(helperCode,  reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.addChildrenToFront(helperCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.addChildrenToFront(helperCode,  reduction);	  reducer.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	31	None	replace
241	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(reduction,  reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(reduction,  reduction,  helperCodeCost);	  reducer.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
242	[BUG]  [BUGGY]  reducing.addChildrenToFront(helperCodeCost);  [CE]  cannot  find  symbol  reducing  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.addChildrenToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.addChildrenToFront(helperCodeCost);	  reducing.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	13	None	replace
243	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.removeChild(reduction,  reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.removeChild(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.removeChild(reduction,  reduction);	  Reducer    reducer    =    compiler.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	67	None	replace
244	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.removeChild(reduction,  saving);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.removeChild(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.removeChild(reduction,  saving);	  Reducer    reducer    =    compiler.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	67	None	replace
245	[BUG]  [BUGGY]  reducer.removeChild(reduction,  helperCodeCost,  savings);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  helperCodeCost,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  helperCodeCost,  savings);	  reducer.removeChild(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
246	[BUG]  [BUGGY]  helperCodeCost.addChildrenToFront(reduction,  reduction);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost.addChildrenToFront(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost.addChildrenToFront(reduction,  reduction);	          helperCodeCost.addChildrenToFront(reduction);    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
247	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  HelperCode  [FE]          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode.addChildrenToFront(reduction);	          helperCodeCost.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	40	None	replace
248	[BUG]  [BUGGY]  reductions.addChildToFront(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildToFront(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildToFront(helperCodeCost,  reduction);	  reduction.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
249	[BUG]  [BUGGY]  reduction.addChildToFront(reduction,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(reduction,  aiderCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(reduction,  aiderCodeCost);	  reduction.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	2	None	replace
250	[BUG]  [BUGGY]  reduction.addChildToFront(reduction,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(reduction,  HelperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(reduction,  HelperCodeCost);	  reduction.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	2	None	replace
251	[BUG]  [BUGGY]  savingRoot.addChildrenToFront(helperCode);  [CE]  cannot  find  symbol  savingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savingRoot.addChildrenToFront(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	savingRoot.addChildrenToFront(helperCode);	  reducingRoot.addChildrenToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	32	None	replace
252	[BUG]  [BUGGY]  reducingRoot.addChildrenToFront(saving);  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducingRoot.addChildrenToFront(saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducingRoot.addChildrenToFront(saving);	  reducingRoot.addChildrenToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  saving	32	None	replace
253	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  helperCodeCost  +=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	add	helperCodeCost    +=    reduction.estimateSavings();    helperCodeCost  +=  reduction.estimateSavings();	  	compilable	  [FE]  IllegalStateException  	89	1	add
254	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  helperCodeCost  +=  reduction.estimateSavings();  [FE]  IllegalStateException  [FE]    AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  helperCodeCost  +=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    helperCodeCost  +=  reduction.estimateSavings();	  	compilable	  [FE]  IllegalStateException  	89	1	add
255	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  HelperCodeCost  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]      AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  HelperCodeCost  +=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    HelperCodeCost  +=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	89	None	add
256	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  for(Reduction  reduction  :  reduction.estimateSavings())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  for(Reduction  reduction  :  reduction.estimateSavings())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    for(Reduction  reduction  :  reduction.estimateSavings())  {  helperCodeCost  +=  reduction.estimateSavings();  }	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	89	None	add
257	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  for(Reduction  reduction  :  reduction.estimateSavings())  {  HelperCodeCost  +=  reduction.estimateSavings();  }  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  for(Reduction  reduction  :  reduction.estimateSavings())  {  HelperCodeCost  +=  reduction.estimateSavings();  }  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    for(Reduction  reduction  :  reduction.estimateSavings())  {  HelperCodeCost  +=  reduction.estimateSavings();  }	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	89	None	add
258	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  for(Reduction  reduction  :  reduction.estimateSavings())  {  helperCodeCost  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  for(Reduction  reduction  :  reduction.estimateSavings())  {  helperCodeCost  +=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    for(Reduction  reduction  :  reduction.estimateSavings())  {  helperCodeCost  +=  reduction.estimateSavings();	  	non-compiled	[CE]  illegal  start  of  expression	89	None	add
259	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  int  helperCodeCost  =  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    int  helperCodeCost  =  reduction.estimateSavings();	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	89	None	add
260	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  for(Reduction  reduction  :  reduction.estimateSavings())  {  saverCodeCost  +=  reduction.estimateSavings();  }  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]                AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  for(Reduction  reduction  :  reduction.estimateSavings())  {  saverCodeCost  +=  reduction.estimateSavings();  }  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    for(Reduction  reduction  :  reduction.estimateSavings())  {  saverCodeCost  +=  reduction.estimateSavings();  }	  	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	89	None	add
261	[BUG]  [BUGGY]  reduction.addChildrenToFront(parent,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  parent  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(parent,  reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(parent,  reduction,  helperCodeCost);	  reduction.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  parent	11	None	replace
262	[BUG]  [BUGGY]  reduction.addChildrenToFront(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(reduction,  saving);	  reduction.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	11	None	replace
263	[BUG]  [BUGGY]  reduction.addChildrenToFront(saverCode,  reduction);  [CE]  cannot  find  symbol  saverCode  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(saverCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(saverCode,  reduction);	  reduction.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saverCode	11	None	replace
264	[BUG]  [BUGGY]  reduction.addChildrenToFront(saverCodeCost,  reduction);  [CE]  cannot  find  symbol  saverCodeCost  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(saverCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(saverCodeCost,  reduction);	  reduction.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	11	None	replace
265	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost);	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
266	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.helperCodeCost.getHelperCode();  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCode  =  reduction.helperCodeCost.getHelperCode();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCode  =  reduction.helperCodeCost.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
267	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeCost();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
268	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
269	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode();  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCode  =  reductions.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  cannot  find  symbol	91	None	replace
270	[BUG]  [BUGGY]  helpingRoot.addChildToFront(helperCodeCost);  [CE]  cannot  find  symbol  helpingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helpingRoot.addChildToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helpingRoot.addChildToFront(helperCodeCost);	  réduction.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	93	None	replace
271	[BUG]  [BUGGY]  reducers.add(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                  AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.add(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.add(reduction,  saving);	          reducers.add(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	45	None	replace
272	[BUG]  [BUGGY]  reducers.add(reduction,  helperCodeCost);  [CE]  no  suitable  method  found  for  add(FunctionRewriter.Reduction,int)  [FE]                    AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.add(reduction,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.add(reduction,  helperCodeCost);	          reducers.add(reduction);    	non-compiled	[CE]  no  suitable  method  found  for  add(FunctionRewriter.Reduction,int)	45	None	replace
273	[BUG]  [BUGGY]  reducers.add(reduction,  reduction);  [CE]  no  suitable  method  found  for  add(FunctionRewriter.Reduction,FunctionRewriter.Reduction)  [FE]                      AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.add(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.add(reduction,  reduction);	          reducers.add(reduction);    	non-compiled	[CE]  no  suitable  method  found  for  add(FunctionRewriter.Reduction,FunctionRewriter.Reduction)	45	None	replace
274	[BUG]  [BUGGY]  reducers.add(reduction,  savings);  [CE]  no  suitable  method  found  for  add(FunctionRewriter.Reduction,int)  [FE]                        AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.add(reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.add(reduction,  savings);	          reducers.add(reduction);    	non-compiled	[CE]  no  suitable  method  found  for  add(FunctionRewriter.Reduction,int)	45	None	replace
275	[BUG]  [BUGGY]  reducers.add(reduction,  helperCode);  [CE]  no  suitable  method  found  for  add(FunctionRewriter.Reduction,Node)  [FE]                          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.add(reduction,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.add(reduction,  helperCode);	          reducers.add(reduction);    	non-compiled	[CE]  no  suitable  method  found  for  add(FunctionRewriter.Reduction,Node)	45	None	replace
276	[BUG]  [BUGGY]  reducers.add(reduction,  saver);  [CE]  cannot  find  symbol  saver  [FE]                            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.add(reduction,  saver);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.add(reduction,  saver);	          reducers.add(reduction);    	non-compiled	[CE]  cannot  find  symbol  saver	45	None	replace
277	[BUG]  [BUGGY]  reducer.removeChild(saving);  [CE]  cannot  find  symbol  saving  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(saving);	  reducer.removeChild(rededuction);    	non-compiled	[CE]  cannot  find  symbol  saving	96	None	replace
278	[BUG]  [BUGGY]  réduir.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  r  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduir.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduir.addChildrenToFront(reduction);	  reducer.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	105	None	replace
279	[BUG]  [BUGGY]  reducer.addChildToFront(reduction.helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction.helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction.helperCodeCost);	  reducer.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	64	None	replace
280	[BUG]  [BUGGY]  réduir.addChildToFront(reduction);  [CE]  cannot  find  symbol  r  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduir.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduir.addChildToFront(reduction);	  reducer.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	64	None	replace
281	[BUG]  [BUGGY]  Reduction.removeChild(reduction);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reduction.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reduction.removeChild(reduction);	  reduction.removeChild(root);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
282	[BUG]  [BUGGY]  reduction.addChildToBack(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(reduction,  saving);	  reduction.addChildToBack(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	20	None	replace
283	[BUG]  [BUGGY]  reduction.addChildToBack(saver,  reduction);  [CE]  cannot  find  symbol  saver  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(saver,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(saver,  reduction);	  reduction.addChildToBack(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saver	20	None	replace
284	[BUG]  [BUGGY]  reduction.addChildToBack(saving,  helperCodeCost);  [CE]  cannot  find  symbol  saving  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(saving,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(saving,  helperCodeCost);	  reduction.addChildToBack(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	20	None	replace
285	[BUG]  [BUGGY]  reduction.addChildToBack(reduction,  root);  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(reduction,  root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(reduction,  root);	  reduction.addChildToBack(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
286	[BUG]  [BUGGY]  reduction.addChildToBack(saverCode,  reduction);  [CE]  cannot  find  symbol  saverCode  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(saverCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(saverCode,  reduction);	  reduction.addChildToBack(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saverCode	20	None	replace
287	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.getReduction().removeChild(reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.getReduction().removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.getReduction().removeChild(reduction);	  Reducer    reducer    =    reduction.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	103	None	replace
288	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(null);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.removeChild(null);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.removeChild(null);	  Reducer    reducer    =    reduction.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	103	None	replace
289	[BUG]  [BUGGY]  reducer.addChildrenToFront(null);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(null);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(null);	  reducer.addChildrenToFront(saving);    	non-compiled	[CE]  cannot  find  symbol	75	None	replace
290	[BUG]  [BUGGY]  reducer.addChildrenToFront(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(problemCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(problemCodeCost);	  reducer.addChildrenToFront(saving);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	75	None	replace
291	[BUG]  [BUGGY]  reduction.addChildToFront(new  HelperCodeCost,  reduction);  [CE]  '('  or  '['  expected  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(new  HelperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(new  HelperCodeCost,  reduction);	  reduction.addChildToFront(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	70	None	replace
292	[BUG]  [BUGGY]  reducer.addChildToFront(new  HelperCodeCost,  reduction);  [CE]  '('  or  '['  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(new  HelperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(new  HelperCodeCost,  reduction);	  reduction.addChildToFront(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	70	None	replace
293	[BUG]  [BUGGY]  reduction.addChildToFront(new  HelperCodeCost,  saving);  [CE]  '('  or  '['  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(new  HelperCodeCost,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(new  HelperCodeCost,  saving);	  reduction.addChildToFront(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	70	None	replace
294	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  reduction,  savings);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  reduction,  savings);	  reduction.apply(helperCodeCost,    reduction);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	35	None	replace
295	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  reduction,  saving);	  reduction.apply(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	35	None	replace
296	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  reduction,  SAVINGS_THRESHOLD);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  reduction,  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  reduction,  SAVINGS_THRESHOLD);	  reduction.apply(helperCodeCost,    reduction);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	35	None	replace
297	[BUG]  [BUGGY]  Reducer  helperCodeCost.addChildrenToFront(reduction);  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost.addChildrenToFront(reduction);	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  ';'  expected	61	None	replace
298	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.removeChild(helperCodeCost);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost  =  reduction.removeChild(helperCodeCost);	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	61	None	replace
299	[BUG]  [BUGGY]  Reducer  helperCodeCost.addChildToBack(reduction);  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost.addChildToBack(reduction);	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  ';'  expected	61	None	replace
300	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.removeChild(helperCode);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.removeChild(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost  =  reduction.removeChild(helperCode);	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	61	None	replace
301	[BUG]  [BUGGY]  Reducer  helperCodeCost.addChildToFront(reduction);  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost.addChildToFront(reduction);	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  ';'  expected	61	None	replace
302	[BUG]  [BUGGY]  Reducer  helperCodeCost.removeChild(reduction  -  reduction);  [CE]  ';'  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost.removeChild(reduction  -  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost.removeChild(reduction  -  reduction);	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  ';'  expected	61	None	replace
303	[BUG]  [BUGGY]  reducing.addChildToBack(helperCodeCost);  [CE]  cannot  find  symbol  reducing  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.addChildToBack(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.addChildToBack(helperCodeCost);	  reducing.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	18	None	replace
304	[BUG]  [BUGGY]  reducers.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.addChildrenToFront(reduction);	  reducings.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
305	[BUG]  [BUGGY]  savingRoot.addChildToFront(helperCode);  [CE]  cannot  find  symbol  savingRoot  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savingRoot.addChildToFront(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	savingRoot.addChildToFront(helperCode);	  reducingRoot.addChildToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	65	None	replace
306	[BUG]  [BUGGY]  addingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  addingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  addingRoot.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	addingRoot.addChildToFront(reduction);	  reducingRoot.addChildToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  addingRoot	65	None	replace
307	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(saving);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.removeChild(saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.removeChild(saving);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	53	None	replace
308	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(saved);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.removeChild(saved);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.removeChild(saved);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	53	None	replace
309	[BUG]  [BUGGY]  helpingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  helpingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helpingRoot.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helpingRoot.removeChild(reduction);	  reducingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	94	None	replace
310	[BUG]  [BUGGY]  savingRoot.removeChild(helperCodeCost);  [CE]  cannot  find  symbol  savingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savingRoot.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	savingRoot.removeChild(helperCodeCost);	  reducingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	94	None	replace
311	[BUG]  [BUGGY]  lettingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  lettingRoot  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  lettingRoot.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	lettingRoot.removeChild(reduction);	  reducingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  lettingRoot	94	None	replace
312	[BUG]  [BUGGY]  pruningRoot.removeChild(reduction);  [CE]  cannot  find  symbol  pruningRoot  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  pruningRoot.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	pruningRoot.removeChild(reduction);	  reducingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	94	None	replace
313	[BUG]  [BUGGY]  reduction.addChildToFront(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);	  reduction.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	2	None	replace
314	[BUG]  [BUGGY]  reducing.addChildToFront(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reducing  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.addChildToFront(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.addChildToFront(helperCodeCost,  reduction);	  reduction.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	2	None	replace
315	[BUG]  [BUGGY]  réduction.addChildToFront(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  r  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.addChildToFront(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.addChildToFront(helperCodeCost,  reduction);	  reduction.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  r	2	None	replace
316	[BUG]  [BUGGY]  reduction.addChildToFront(helperCodeCost,  reduction  -  savings);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(helperCodeCost,  reduction  -  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(helperCodeCost,  reduction  -  savings);	  reduction.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	2	None	replace
317	[BUG]  [BUGGY]  reduction.addChildToFront(helperCodeCost,  reduction  /  SAVINGS_THRESHOLD);  [CE]  bad  operand  types  for  binary  operator  '/'  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(helperCodeCost,  reduction  /  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(helperCodeCost,  reduction  /  SAVINGS_THRESHOLD);	  reduction.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '/'	2	None	replace
318	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction,  compiler.getHelperCodeCost();  [CE]  ';'  expected  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction,  compiler.getHelperCodeCost();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCodeCost  =  reduction,  compiler.getHelperCodeCost();	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  ';'  expected	92	None	replace
319	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.helperCodeCost.getHelperCodeCost();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.helperCodeCost.getHelperCodeCost();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCodeCost  =  reduction.helperCodeCost.getHelperCodeCost();	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
320	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reductions.getHelperCodeCost();  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCodeCost  =  reductions.getHelperCodeCost();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCodeCost  =  reductions.getHelperCodeCost();	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
321	[BUG]  [BUGGY]  rduction.removeChild(reduction);  [CE]  cannot  find  symbol  rduction  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  rduction.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	rduction.removeChild(reduction);	  réduction.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  rduction	86	None	replace
322	[BUG]  [BUGGY]  reducers.removeChild(helperCodeCost);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.removeChild(helperCodeCost);	  réduction.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	86	None	replace
323	[BUG]  [BUGGY]  réduirs.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  r  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduirs.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduirs.addChildrenToFront(reduction);	  reducings.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	29	None	replace
324	[BUG]  [BUGGY]  reduction.apply(helperCode,  reduction,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  reduction,  HELPER_SOURCE);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  reduction,  HELPER_SOURCE);	  reduction.apply(helperCode,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	71	None	replace
325	[BUG]  [BUGGY]  reduction.apply(helperCode,  reduction,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  reduction,  helpingRoot);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  reduction,  helpingRoot);	  reduction.apply(helperCode,    reduction);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	71	None	replace
326	[BUG]  [BUGGY]  reducingRoot.addChildToBack(reduction);  [CE]  cannot  find  symbol  reducingRoot  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducingRoot.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducingRoot.addChildToBack(reduction);	  reducings.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	21	None	replace
327	[BUG]  [BUGGY]  reductions.addChildToBack(saving);  [CE]  cannot  find  symbol  saving  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildToBack(saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildToBack(saving);	  reducings.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	21	None	replace
328	[BUG]  [BUGGY]  reducings.addChildToBack(saving);  [CE]  cannot  find  symbol  saving  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducings.addChildToBack(saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducings.addChildToBack(saving);	  reducings.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	21	None	replace
329	[BUG]  [BUGGY]  réduction.addChildToBack(helperCodeCost);  [CE]  cannot  find  symbol  r  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.addChildToBack(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.addChildToBack(helperCodeCost);	  reduction.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  r	15	None	replace
330	[BUG]  [BUGGY]  reducers.addChildToFront(reduction);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.addChildToFront(reduction);	  reducings.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
331	[BUG]  [BUGGY]  réduirs.addChildToFront(reduction);  [CE]  cannot  find  symbol  r  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduirs.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduirs.addChildToFront(reduction);	  reducings.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	23	None	replace
332	[BUG]  [BUGGY]  reducer.removeChild(helperCodeCost;  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(helperCodeCost;  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(helperCodeCost;	  reducer.removeChild(reduction;    	non-compiled	[CE]  ')'  expected	82	None	replace
333	[BUG]  [BUGGY]  réduirs.removeChild(reduction);  [CE]  cannot  find  symbol  r  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduirs.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduirs.removeChild(reduction);	  reducings.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	60	None	replace
334	[BUG]  [BUGGY]  reduction.apply(reduction,  helpingRoot,  helperCodeCost);  [CE]  cannot  find  symbol  helpingRoot  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  helpingRoot,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  helpingRoot,  helperCodeCost);	  reduction.apply(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	33	None	replace
335	[BUG]  [BUGGY]  reduction.apply(reduction,  root,  helperCode);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  root,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  root,  helperCode);	  reduction.apply(reduction,    helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	33	None	replace
336	[BUG]  [BUGGY]  reduction.addChildToBack(new  Node(helperCodeCost,  reduction));  [CE]  no  suitable  constructor  found  for  Node(int,FunctionRewriter.Reduction)  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(new  Node(helperCodeCost,  reduction));  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(new  Node(helperCodeCost,  reduction));	  reduction.addChildToBack(root);    	non-compiled	[CE]  no  suitable  constructor  found  for  Node(int,FunctionRewriter.Reduction)	19	None	replace
337	[BUG]  [BUGGY]  reducings.removeChild(helperCode);  [CE]  cannot  find  symbol  reducings  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducings.removeChild(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducings.removeChild(helperCode);	  reducings.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducings	56	None	replace
338	[BUG]  [BUGGY]  reducing.addChildToFront(helperCode);  [CE]  cannot  find  symbol  reducing  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.addChildToFront(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.addChildToFront(helperCode);	  reducing.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	7	None	replace
339	[BUG]  [BUGGY]  réduction.apply(helperCode,  reduction);  [CE]  cannot  find  symbol  r  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.apply(helperCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.apply(helperCode,  reduction);	  reduction.apply(reduction,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	37	None	replace
340	[BUG]  [BUGGY]  reduction.apply(reduction,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  contributingRoot);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  contributingRoot);	  reduction.apply(reduction,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	37	None	replace
341	[BUG]  [BUGGY]  reduction.apply(reduction,  HelperCodeReducer.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperCodeReducer  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  HelperCodeReducer.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  HelperCodeReducer.DEFAULT_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeReducer	37	None	replace
342	[BUG]  [BUGGY]  reduction.apply(reduction,  HelperCodeInsertion.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperCodeInsertion  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  HelperCodeInsertion.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  HelperCodeInsertion.DEFAULT_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeInsertion	37	None	replace
343	[BUG]  [BUGGY]  reduction.apply(reduction,  root);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  root);	  reduction.apply(reduction,    helpingerCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	39	None	replace
344	[BUG]  [BUGGY]  reducing.removeChild(helperCode);  [CE]  cannot  find  symbol  reducing  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.removeChild(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.removeChild(helperCode);	  reducing.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	50	None	replace
345	[BUG]  [BUGGY]  reducer.addChildToFront(saving,  helperCodeCost);  [CE]  cannot  find  symbol  saving  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(saving,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(saving,  helperCodeCost);	  reducer.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	99	None	replace
346	[BUG]  [BUGGY]  reducer.addChildToFront(helperCodeCost,  reduction  -  savings);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(helperCodeCost,  reduction  -  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(helperCodeCost,  reduction  -  savings);	  reducer.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	99	None	replace
347	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction,  compiler.getHelperCode();  [CE]  ';'  expected  [FE]          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCode  =  reduction,  compiler.getHelperCode();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCode  =  reduction,  compiler.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  ';'  expected	91	None	replace
348	[BUG]  [BUGGY]  reducingRoot.addChildToBack(helperCodeCost);  [CE]  cannot  find  symbol  reducingRoot  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducingRoot.addChildToBack(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducingRoot.addChildToBack(helperCodeCost);	  reducing.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	18	None	replace
349	[BUG]  [BUGGY]  reducing.addChildrenToFront(helperCode);  [CE]  cannot  find  symbol  reducing  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.addChildrenToFront(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.addChildrenToFront(helperCode);	  reducing.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	13	None	replace
350	[BUG]  [BUGGY]  reducer.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(helperCodeCost);  compiler.reportCodeChange();	          reducer.addChildrenToFront(helperCode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
351	[BUG]  [BUGGY]  reducingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  reducingRoot  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();	          reducer.addChildrenToFront(helperCode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	79	None	replace
352	[BUG]  [BUGGY]  reducer.removeChild(helperCode,  reduction);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(helperCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(helperCode,  reduction);	  reducer.removeChild(reduction,    helperCode);    	non-compiled	[CE]  cannot  find  symbol	68	None	replace
353	[BUG]  [BUGGY]  savingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  savingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savingRoot.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	savingRoot.addChildrenToFront(reduction);	  reducingRoot.addChildrenToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	32	None	replace
354	[BUG]  [BUGGY]  raisingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  raisingRoot  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  raisingRoot.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	raisingRoot.addChildrenToFront(reduction);	  reducingRoot.addChildrenToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  raisingRoot	32	None	replace
355	[BUG]  [BUGGY]  rduction.addChildToBack(reduction);  [CE]  cannot  find  symbol  rduction  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  rduction.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	rduction.addChildToBack(reduction);	  réduction.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  rduction	85	None	replace
356	[BUG]  [BUGGY]  aiderCode.addChildToBack(reduction);  [CE]  cannot  find  symbol  aiderCode  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCode.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCode.addChildToBack(reduction);	  réduction.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	85	None	replace
357	[BUG]  [BUGGY]  reducer.addChildrenToFront(saving,  helperCodeCost);  [CE]  cannot  find  symbol  saving  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(saving,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(saving,  helperCodeCost);	  reducer.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	31	None	replace
358	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(reduction,  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(reduction,  SAVINGS_THRESHOLD);	  reducer.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
359	[BUG]  [BUGGY]  reduction.apply(externs,  root,  helperCodeCost);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(externs,  root,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(externs,  root,  helperCodeCost);	  reduction.apply(root,    helperCodeCost);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	36	None	replace
360	[BUG]  [BUGGY]  reducer.removeChild(reduction,  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  HelperCodeCost.DEFAULT_THRESHOLD);	  reducer.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	81	None	replace
361	[BUG]  [BUGGY]  reducer.removeChild(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);	  reducer.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	81	None	replace
362	[BUG]  [BUGGY]  reducer.removeChild(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD);	  reducer.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	81	None	replace
363	[BUG]  [BUGGY]  reducer.removeChild(reduction,  HelperCodeCost.DEFAULT);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  HelperCodeCost.DEFAULT);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  HelperCodeCost.DEFAULT);	  reducer.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	81	None	replace
364	[BUG]  [BUGGY]  reduction.apply(reduction.getNameNode(),  savings);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction.getNameNode(),  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction.getNameNode(),  savings);	  reduction.apply(reduction.helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
365	[BUG]  [BUGGY]  reduction.apply(reduction.helperCode,  reduction);  [CE]  cannot  find  symbol  helperCode  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction.helperCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction.helperCode,  reduction);	  reduction.apply(reduction.helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol  helperCode	38	None	replace
366	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  savings);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  savings);	  reduction.apply(reduction.helperCodeCost,    savings);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	38	None	replace
367	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	61	None	replace
368	[BUG]  [BUGGY]  Reducer  helperCodeCost.removeChild(helperCodeCost);  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost.removeChild(helperCodeCost);	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  ';'  expected	61	None	replace
369	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	61	None	replace
370	[BUG]  [BUGGY]  raisingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  raisingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  raisingRoot.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	raisingRoot.removeChild(reduction);	  reducingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  raisingRoot	94	None	replace
371	[BUG]  [BUGGY]  improvingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  improvingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  improvingRoot.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	improvingRoot.removeChild(reduction);	  reducingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  improvingRoot	94	None	replace
372	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.removeChild(helperCode);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reductions.removeChild(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reductions.removeChild(helperCode);	  Reducer    reducer    =    reductions.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	104	None	replace
373	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.getChild(reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reductions.getChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reductions.getChild(reduction);	  Reducer    reducer    =    reductions.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	104	None	replace
374	[BUG]  [BUGGY]  reducers.addChildToFront(helperCodeCost);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.addChildToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.addChildToFront(helperCodeCost);	  réduction.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	93	None	replace
375	[BUG]  [BUGGY]  aiderCode.addChildToFront(reduction);  [CE]  cannot  find  symbol  aiderCode  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCode.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCode.addChildToFront(reduction);	  réduction.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	93	None	replace
376	[BUG]  [BUGGY]  raisingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  raisingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  raisingRoot.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	raisingRoot.addChildToFront(reduction);	  reducingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  raisingRoot	24	None	replace
377	[BUG]  [BUGGY]  improvingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  improvingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  improvingRoot.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	improvingRoot.addChildToFront(reduction);	  reducingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  improvingRoot	24	None	replace
378	[BUG]  [BUGGY]  réductions.removeChild(helperCodeCost);  [CE]  cannot  find  symbol  r  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réductions.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réductions.removeChild(helperCodeCost);	  reductions.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  r	47	None	replace
379	[BUG]  [BUGGY]  reductions.removeChild(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.removeChild(problemCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.removeChild(problemCodeCost);	  reductions.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	47	None	replace
380	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.removeChild(root);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.removeChild(root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.removeChild(root);	  reducer.removeChild(root);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	63	None	replace
381	[BUG]  [BUGGY]  reducer.removeChild(null);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(null);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(null);	  reducer.removeChild(root);    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
382	[BUG]  [BUGGY]  reducing.addChildToBack(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reducing  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.addChildToBack(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.addChildToBack(helperCodeCost,  reduction);	  reduction.addChildToBack(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	83	None	replace
383	[BUG]  [BUGGY]  réduction.addChildToBack(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  r  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.addChildToBack(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.addChildToBack(helperCodeCost,  reduction);	  reduction.addChildToBack(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  r	83	None	replace
384	[BUG]  [BUGGY]  reductions.addChildToBack(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildToBack(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildToBack(helperCodeCost,  reduction);	  reduction.addChildToBack(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	83	None	replace
385	[BUG]  [BUGGY]  helperCode.addChildrenToFront(reduction,  savings);  [CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCode.addChildrenToFront(reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCode.addChildrenToFront(reduction,  savings);	          helperCode.addChildrenToFront(reduction);    	non-compiled	[CE]  method  addChildrenToFront  in  class  Node  cannot  be  applied  to  given  types;	44	None	replace
386	[BUG]  [BUGGY]  reduction.addChildToBack(reduction,  savings);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(reduction,  savings);	  reduction.addChildToBack(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
387	[BUG]  [BUGGY]  Reduction  reduction  =  compiler.removeChild(root);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reduction  reduction  =  compiler.removeChild(root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reduction  reduction  =  compiler.removeChild(root);	  reduction.removeChild(root);    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	49	None	replace
388	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.reportCodeChange();  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.reportCodeChange();	  Reducer    reducer    =    compiler.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	80	None	replace
389	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.removeChild(reduction;  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.removeChild(reduction;  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.removeChild(reduction;	  Reducer    reducer    =    compiler.removeChild(helperCodeCost);    	non-compiled	[CE]  ')'  expected	80	None	replace
390	[BUG]  [BUGGY]  reducingRoot.removeChild(helperCode);  [CE]  cannot  find  symbol  reducingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducingRoot.removeChild(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducingRoot.removeChild(helperCode);	  reducingr.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducingRoot	95	None	replace
391	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  -=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	add	helperCodeCost  -=  reduction.estimateSavings();	  helperCodeCost    +=    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	90	9	replace
392	[BUG]  [BUGGY]  helperCodeCost  -=  reduction.estimateSavings();  [FE]  AssertionFailedError  [FE]    AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  -=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost  -=  reduction.estimateSavings();	  helperCodeCost    +=    reduction.estimateSavings();    	compilable	  [FE]  AssertionFailedError  	90	9	replace
393	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateThrees();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateThrees();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost  +=  reduction.estimateThrees();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
394	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateHeaders();  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateHeaders();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost  +=  reduction.estimateHeaders();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
395	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateFunctionState();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateFunctionState();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost  +=  reduction.estimateFunctionState();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
396	[BUG]  [BUGGY]  réduction.addChildToFront(helperCode,  reduction);  [CE]  cannot  find  symbol  r  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.addChildToFront(helperCode,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.addChildToFront(helperCode,  reduction);	  reduction.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	6	None	replace
397	[BUG]  [BUGGY]  reduction.addChildToFront(reduction,  root);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(reduction,  root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(reduction,  root);	  reduction.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
398	[BUG]  [BUGGY]  reduction.apply(saving,  HELPER_SOURCE);  [CE]  cannot  find  symbol  saving  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(saving,  HELPER_SOURCE);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(saving,  HELPER_SOURCE);	  reduction.apply(reduction,    aiderCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saving	72	None	replace
399	[BUG]  [BUGGY]  reduction.addChildToBack(new  HelperCodeReduction);  [CE]  '('  or  '['  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(new  HelperCodeReduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(new  HelperCodeReduction);	  reduction.addChildToBack(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
400	[BUG]  [BUGGY]  elimination.removeChild(helperCodeCost  +  reduction);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  elimination.removeChild(helperCodeCost  +  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	elimination.removeChild(helperCodeCost  +  reduction);	  elimination.removeChild(helperCodeCost);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	74	None	replace
401	[BUG]  [BUGGY]  eliminare.removeChild(reduction);  [CE]  cannot  find  symbol  eliminare  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  eliminare.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	eliminare.removeChild(reduction);	  elimination.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  eliminare	74	None	replace
402	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(reduction,  saving);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  saving  [FE]          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCode.addChildrenToFront(reduction,  saving);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCode.addChildrenToFront(reduction,  saving);  compiler.reportCodeChange();	          helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  saving	77	None	replace
403	[BUG]  [BUGGY]  helperCode.addChildrenToFront(reduction,  saving);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  saving  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCode.addChildrenToFront(reduction,  saving);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCode.addChildrenToFront(reduction,  saving);  compiler.reportCodeChange();	          helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  saving	77	None	replace
404	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  aiderCode  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCode.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCode.addChildrenToFront(reduction,  reduction);  compiler.reportCodeChange();	          helperCode.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  aiderCode	77	None	replace
405	[BUG]  [BUGGY]  reduction.apply(helperCodecost,  reduction);  [CE]  cannot  find  symbol  helperCodecost  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodecost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodecost,  reduction);	  reduction.apply(reduction);    	non-compiled	[CE]  cannot  find  symbol  helperCodecost	34	None	replace
406	[BUG]  [BUGGY]  reduction.apply(helperCode);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode);	  reduction.apply(reduction);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	34	None	replace
407	[BUG]  [BUGGY]  reducer.removeChild(helperCode);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(helperCode);	  reducer.removeChild(rededuction);    	non-compiled	[CE]  cannot  find  symbol	96	None	replace
408	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.removeChild(reduction,  helperCode);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  compiler.removeChild(reduction,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  compiler.removeChild(reduction,  helperCode);	  Reducer    reducer    =    compiler.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	67	None	replace
409	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.getChildren().removeChild(reduction);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.getChildren().removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.getChildren().removeChild(reduction);	  Reducer    reducer    =    reduction.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	103	None	replace
410	[BUG]  [BUGGY]  Reducer  reduction  =  reduction.removeChild(helperCodeCost);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reduction  =  reduction.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reduction  =  reduction.removeChild(helperCodeCost);	  Reducer    reducer    =    reduction.removeChild(reduction);    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	103	None	replace
411	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.getReduction().removeChild(helperCodeCost);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.getReduction().removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.getReduction().removeChild(helperCodeCost);	  Reducer    reducer    =    reduction.removeChild(reduction);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	103	None	replace
412	[BUG]  [BUGGY]  reduction.addChildToFront(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(problemCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(problemCodeCost);	  reduction.addChildToFront(parent);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	58	None	replace
413	[BUG]  [BUGGY]  reduction.addChildToFront(newChild);  [CE]  cannot  find  symbol  newChild  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(newChild);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(newChild);	  reduction.addChildToFront(parent);    	non-compiled	[CE]  cannot  find  symbol  newChild	58	None	replace
414	[BUG]  [BUGGY]  reducer.addChildToBack(reduction,  helperCode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToBack(reduction,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToBack(reduction,  helperCode);	          reducer.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
415	[BUG]  [BUGGY]  reduction.addChildrenToFront(reduction,  savings);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(reduction,  savings);	  reduction.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
416	[BUG]  [BUGGY]  reduction.addChildrenToFront(null,  reduction);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(null,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(null,  reduction);	  reduction.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
417	[BUG]  [BUGGY]  reduction.removeChild(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	51	None	replace
418	[BUG]  [BUGGY]  reducing.removeChild(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reducing  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.removeChild(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.removeChild(helperCodeCost,  reduction);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	51	None	replace
419	[BUG]  [BUGGY]  reduction.removeChild(helperCodeCost,  reduction  -  1);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(helperCodeCost,  reduction  -  1);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(helperCodeCost,  reduction  -  1);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	51	None	replace
420	[BUG]  [BUGGY]  réduction.removeChild(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  r  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.removeChild(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.removeChild(helperCodeCost,  reduction);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  r	51	None	replace
421	[BUG]  [BUGGY]  reduction.removeChild(helperCodeCost,  reduction  -  savings);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(helperCodeCost,  reduction  -  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(helperCodeCost,  reduction  -  savings);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	51	None	replace
422	[BUG]  [BUGGY]  reduction.addChildrenToFront(helperCodeCost,  savings);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(helperCodeCost,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(helperCodeCost,  savings);	  reduction.addChildrenToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
423	[BUG]  [BUGGY]  reducing.addChildrenToFront(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reducing  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.addChildrenToFront(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.addChildrenToFront(helperCodeCost,  reduction);	  reduction.addChildrenToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	88	None	replace
424	[BUG]  [BUGGY]  réduction.addChildrenToFront(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  r  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.addChildrenToFront(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.addChildrenToFront(helperCodeCost,  reduction);	  reduction.addChildrenToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  r	88	None	replace
425	[BUG]  [BUGGY]  reduction.addChildrenToFront(helperCodeCost,  reduction  -  savings);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(helperCodeCost,  reduction  -  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(helperCodeCost,  reduction  -  savings);	  reduction.addChildrenToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	88	None	replace
426	[BUG]  [BUGGY]  reducingRoot.addChildToFront(saving);  [CE]  cannot  find  symbol  saving  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducingRoot.addChildToFront(saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducingRoot.addChildToFront(saving);	  reducingRoot.addChildToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  saving	65	None	replace
427	[BUG]  [BUGGY]  reduction.removeChild(helperCodeCost  +  savings);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(helperCodeCost  +  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(helperCodeCost  +  savings);	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
428	[BUG]  [BUGGY]  reducing.removeChild(helperCodeCost  +  reduction);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducing.removeChild(helperCodeCost  +  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducing.removeChild(helperCodeCost  +  reduction);	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	73	None	replace
429	[BUG]  [BUGGY]  reducer.removeChild(helperCodeCost  +  reduction);  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(helperCodeCost  +  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(helperCodeCost  +  reduction);	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	73	None	replace
430	[BUG]  [BUGGY]  reduction.removeChild(helperCodeCost  +  reduction.toString());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(helperCodeCost  +  reduction.toString());  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(helperCodeCost  +  reduction.toString());	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
431	[BUG]  [BUGGY]  ajutar.removeChild(helperCodeCost);  [CE]  cannot  find  symbol  ajutar  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  ajutar.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	ajutar.removeChild(helperCodeCost);	  réduir.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  ajutar	55	None	replace
432	[BUG]  [BUGGY]  reduction.addChildToFront(reduction.oldChild,  helperCode);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(reduction.oldChild,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(reduction.oldChild,  helperCode);	  reduction.addChildToFront(parent,    helperCode);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
433	[BUG]  [BUGGY]  reduction.addChildToFront(reduction,  helperCode);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(reduction,  helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(reduction,  helperCode);	  reduction.addChildToFront(parent,    helperCode);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
434	[BUG]  [BUGGY]  reduction.addChildrenToFront(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(problemCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(problemCodeCost);	  reduction.addChildrenToFront(parent);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	57	None	replace
435	[BUG]  [BUGGY]  reduction.addChildrenToFront(newChild);  [CE]  cannot  find  symbol  newChild  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(newChild);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(newChild);	  reduction.addChildrenToFront(parent);    	non-compiled	[CE]  cannot  find  symbol  newChild	57	None	replace
436	[BUG]  [BUGGY]  HelperCodeCost.addChildToFront(reduction);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCodeCost.addChildToFront(reduction);	          helperCodeCost.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	41	None	replace
437	[BUG]  [BUGGY]  helperCodeCost.addChildToFront(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost.addChildToFront(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost.addChildToFront(reduction,  saving);	          helperCodeCost.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	41	None	replace
438	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  reduction,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  reduction,  HELPER_SOURCE);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  reduction,  HELPER_SOURCE);	  reduction.apply(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	35	None	replace
439	[BUG]  [BUGGY]  reduction.apply(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);  [CE]  bad  operand  types  for  binary  operator  '-'  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCodeCost,  reduction  -  SAVINGS_THRESHOLD);	  reduction.apply(helperCodeCost,    reduction);    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '-'	35	None	replace
440	[BUG]  [BUGGY]  helperCodeCost.addChildrenToFront(reduction,  savings);  [CE]  int  cannot  be  dereferenced  [FE]        AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost.addChildrenToFront(reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost.addChildrenToFront(reduction,  savings);	          helperCodeCost.addChildrenToFront(reduction);    	non-compiled	[CE]  int  cannot  be  dereferenced	40	None	replace
441	[BUG]  [BUGGY]  helperCodeCost.addChildrenToFront(reduction,  saving);  [CE]  cannot  find  symbol  saving  [FE]          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost.addChildrenToFront(reduction,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost.addChildrenToFront(reduction,  saving);	          helperCodeCost.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  saving	40	None	replace
442	[BUG]  [BUGGY]  HelperCodeCost.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCodeCost.addChildrenToFront(reduction);	          helperCodeCost.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	40	None	replace
443	[BUG]  [BUGGY]  reduction.removeChild(saved);  [CE]  cannot  find  symbol  saved  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.removeChild(saved);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.removeChild(saved);	  reduction.removeChild(parent);    	non-compiled	[CE]  cannot  find  symbol  saved	48	None	replace
444	[BUG]  [BUGGY]  reduction.addChildToFront(new  HelperCodeInsertion);  [CE]  '('  or  '['  expected  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(new  HelperCodeInsertion);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(new  HelperCodeInsertion);	  reduction.addChildToFront(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	70	None	replace
445	[BUG]  [BUGGY]  reducer.removeChild(reduction,  helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  helperCodeCost  +  SAVINGS_THRESHOLD);	  reducer.removeChild(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
446	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  HelperCodeCost  -=  reduction.estimateSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]    AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  HelperCodeCost  -=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    HelperCodeCost  -=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	89	None	add
447	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  assisterCodeCost  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  assisterCodeCost  [FE]      AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  assisterCodeCost  +=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    assisterCodeCost  +=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  assisterCodeCost	89	None	add
448	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  helperCodeCost  -=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	add	helperCodeCost    +=    reduction.estimateSavings();    helperCodeCost  -=  reduction.estimateSavings();	  	compilable	  [FE]  IllegalStateException  	89	1	add
449	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  helperCodeCost  -=  reduction.estimateSavings();  [FE]  IllegalStateException  [FE]        AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  helperCodeCost  -=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    helperCodeCost  -=  reduction.estimateSavings();	  	compilable	  [FE]  IllegalStateException  	89	1	add
450	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  aiderCodeCost  +=  reduction.estimateSavings();  [CE]  cannot  find  symbol  aiderCodeCost  [FE]          AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  aiderCodeCost  +=  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    aiderCodeCost  +=  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	89	None	add
451	[BUG]  [BUGGY]  reducings.addChildrenToFront(helperCode);  [CE]  cannot  find  symbol  reducings  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducings.addChildrenToFront(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducings.addChildrenToFront(helperCode);	  reducings.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducings	106	None	replace
452	[BUG]  [BUGGY]  aiderCodeCost.addChildToBack(reduction);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCodeCost.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCodeCost.addChildToBack(reduction);	          helperCodeCost.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	42	None	replace
453	[BUG]  [BUGGY]  HelperCodeCost.addChildToBack(reduction);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeCost.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCodeCost.addChildToBack(reduction);	          helperCodeCost.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	42	None	replace
454	[BUG]  [BUGGY]  reducers.add(reduction,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducers.add(reduction,  HELPER_SOURCE);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducers.add(reduction,  HELPER_SOURCE);	          reducers.add(reduction);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	45	None	replace
455	[BUG]  [BUGGY]  reduction.apply(helperCode,  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  HelperCodeCost.DEFAULT_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	97	None	replace
456	[BUG]  [BUGGY]  reduction.apply(reduction,  HelperCodeCost.DEFAULT_THRESHOLD  +  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  HelperCodeCost.DEFAULT_THRESHOLD  +  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  HelperCodeCost.DEFAULT_THRESHOLD  +  SAVINGS_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	97	None	replace
457	[BUG]  [BUGGY]  reduction.apply(helperCode,  reducer.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  reducer.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  reducer.DEFAULT_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	97	None	replace
458	[BUG]  [BUGGY]  reduction.apply(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  saving);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  HelperCodeCost.DEFAULT_THRESHOLD,  saving);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	97	None	replace
459	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	53	None	replace
460	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  savings);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  savings);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	53	None	replace
461	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  -  1);  [CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  -  1);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  reducer  =  reduction.removeChild(helperCodeCost  -  1);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  variable  reducer  is  already  defined  in  method  process(Node,Node)	53	None	replace
462	[BUG]  [BUGGY]  réduirs.addChildToBack(reduction);  [CE]  cannot  find  symbol  r  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduirs.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduirs.addChildToBack(reduction);	  reducings.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  r	21	None	replace
463	[BUG]  [BUGGY]  savings.addChildToBack(reduction);  [CE]  int  cannot  be  dereferenced  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savings.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	savings.addChildToBack(reduction);	  reducings.addChildToBack(reduction);    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
464	[BUG]  [BUGGY]  réductions.addChildToBack(reduction);  [CE]  cannot  find  symbol  r  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réductions.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réductions.addChildToBack(reduction);	  reducings.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  r	21	None	replace
465	[BUG]  [BUGGY]  reducings.add(reduction);  [CE]  cannot  find  symbol  reducings  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducings.add(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducings.add(reduction);	  reducings.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducings	21	None	replace
466	[BUG]  [BUGGY]  réduction.addChildToFront(reduction);  [CE]  cannot  find  symbol  r  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.addChildToFront(reduction);	  reduction.addChildToFront(new    HelperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	70	None	replace
467	[BUG]  [BUGGY]  reductions.addChildrenToFront(helperCode);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildrenToFront(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildrenToFront(helperCode);	  reducings.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol	106	None	replace
468	[BUG]  [BUGGY]  reduction.apply(reduction.getLocation(),  savings);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction.getLocation(),  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction.getLocation(),  savings);	  reduction.apply(reduction.helperCodeCost,    savings);    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
469	[BUG]  [BUGGY]  reduction.addChildToFront(reduction,  helpingerCodeCost);  [CE]  cannot  find  symbol  helpingerCodeCost  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(reduction,  helpingerCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(reduction,  helpingerCodeCost);	  reduction.addChildToFront(parent,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  helpingerCodeCost	59	None	replace
470	[BUG]  [BUGGY]  reduction.addChildToFront(reduction,  savings);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(reduction,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(reduction,  savings);	  reduction.addChildToFront(parent,    helperCode);    	non-compiled	[CE]  cannot  find  symbol	59	None	replace
471	[BUG]  [BUGGY]  pruningRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  pruningRoot  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  pruningRoot.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	pruningRoot.addChildToFront(reduction);	  reducingRoot.addChildToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	65	None	replace
472	[BUG]  [BUGGY]  SavingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  SavingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  SavingRoot.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	SavingRoot.addChildToFront(reduction);	  reducingRoot.addChildToFront(helperCode);    	non-compiled	[CE]  cannot  find  symbol  SavingRoot	65	None	replace
473	[BUG]  [BUGGY]  reduction.addChildToBack(new  HelperCodeCost,  savings);  [CE]  '('  or  '['  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(new  HelperCodeCost,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(new  HelperCodeCost,  savings);	  reduction.addChildToBack(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
474	[BUG]  [BUGGY]  reduction.addChildToBack(new  HelperCodeCost,  reducer);  [CE]  '('  or  '['  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(new  HelperCodeCost,  reducer);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(new  HelperCodeCost,  reducer);	  reduction.addChildToBack(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
475	[BUG]  [BUGGY]  réduction.addChildToBack(new  HelperCodeCost,  reduction);  [CE]  '('  or  '['  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.addChildToBack(new  HelperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.addChildToBack(new  HelperCodeCost,  reduction);	  reduction.addChildToBack(new    HelperCodeCost);    	non-compiled	[CE]  '('  or  '['  expected	84	None	replace
476	[BUG]  [BUGGY]  Aider.removeChild(reduction);  [CE]  cannot  find  symbol  Aider  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Aider.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Aider.removeChild(reduction);	  réduir.removeChild(reduction);    	non-compiled	[CE]  cannot  find  symbol  Aider	62	None	replace
477	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateChildren();  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateChildren();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost  +=  reduction.estimateChildren();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol	90	None	replace
478	[BUG]  [BUGGY]  reduction.addChildToBack(reduction,  helpingerCodeCost);  [CE]  cannot  find  symbol  helpingerCodeCost  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(reduction,  helpingerCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(reduction,  helpingerCodeCost);	  reduction.addChildToBack(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  helpingerCodeCost	83	None	replace
479	[BUG]  [BUGGY]  reduction.addChildToBack(reduction,  reduction);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(reduction,  reduction);	  reduction.addChildToBack(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
480	[BUG]  [BUGGY]  reduction.addChildToBack(reduction,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(reduction,  contributingRoot);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(reduction,  contributingRoot);	  reduction.addChildToBack(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	20	None	replace
481	[BUG]  [BUGGY]  reduction.addChildToBack(reduction,  helpingRoot);  [CE]  cannot  find  symbol  helpingRoot  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(reduction,  helpingRoot);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(reduction,  helpingRoot);	  reduction.addChildToBack(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	20	None	replace
482	[BUG]  [BUGGY]  reduction.addChildToBack(reduction,  Saving);  [CE]  cannot  find  symbol  Saving  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToBack(reduction,  Saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToBack(reduction,  Saving);	  reduction.addChildToBack(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  Saving	20	None	replace
483	[BUG]  [BUGGY]  savingRoot.addChildToFront(reduction);  [CE]  cannot  find  symbol  savingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  savingRoot.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	savingRoot.addChildToFront(reduction);	  reducingRoot.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  savingRoot	24	None	replace
484	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  cannot  find  symbol	92	None	replace
485	[BUG]  [BUGGY]  réduction.apply(reduction,  root,  helperCodeCost);  [CE]  cannot  find  symbol  r  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduction.apply(reduction,  root,  helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduction.apply(reduction,  root,  helperCodeCost);	  reduction.apply(root,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	36	None	replace
486	[BUG]  [BUGGY]  aiderCodeCost.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]        AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCodeCost.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCodeCost.addChildrenToFront(reduction);	          helperCodeCost.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	40	None	replace
487	[BUG]  [BUGGY]  reduction.addChildrenToFront(saved);  [CE]  cannot  find  symbol  saved  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(saved);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(saved);	  reduction.addChildrenToFront(parent);    	non-compiled	[CE]  cannot  find  symbol  saved	57	None	replace
488	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction,  Saving);  [CE]  cannot  find  symbol  Saving  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(reduction,  Saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(reduction,  Saving);	  reducer.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  Saving	31	None	replace
489	[BUG]  [BUGGY]  reducer.addChildrenToFront(saved,  reduction);  [CE]  cannot  find  symbol  saved  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(saved,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(saved,  reduction);	  reducer.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saved	31	None	replace
490	[BUG]  [BUGGY]  SavingRoot.removeChild(reduction);  [CE]  cannot  find  symbol  SavingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  SavingRoot.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	SavingRoot.removeChild(reduction);	  reducingRoot.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  SavingRoot	94	None	replace
491	[BUG]  [BUGGY]  reduction.apply(reduction,  helpingRoot,  reduction);  [CE]  cannot  find  symbol  helpingRoot  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(reduction,  helpingRoot,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(reduction,  helpingRoot,  reduction);	  reduction.apply(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	33	None	replace
492	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  HelperCodeCost  =  reduction.estimateSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]    AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  HelperCodeCost  =  reduction.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    HelperCodeCost  =  reduction.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	89	None	add
493	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  HelperCodeCost  =  reducer.estimateSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]      AssertionFailedError    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  HelperCodeCost  =  reducer.estimateSavings();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCodeCost    +=    reduction.estimateSavings();    HelperCodeCost  =  reducer.estimateSavings();	  	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	89	None	add
494	[BUG]  [BUGGY]  reduction.apply(helperCode,  reduction,  reduction);  [CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  reduction,  reduction);	  reduction.apply(helperCode,    reduction);    	non-compiled	[CE]  method  apply  in  class  FunctionRewriter.Reduction  cannot  be  applied  to  given  types;	71	None	replace
495	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  helpingerCodeCost);  [CE]  cannot  find  symbol  helpingerCodeCost  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  helpingerCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  helpingerCodeCost);	  reducer.addChildToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  helpingerCodeCost	99	None	replace
496	[BUG]  [BUGGY]  reducer.removeChild(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(problemCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(problemCodeCost);	  reducer.removeChild(root);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	63	None	replace
497	[BUG]  [BUGGY]  pruningRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  pruningRoot  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  pruningRoot.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	pruningRoot.addChildrenToFront(reduction);	  reducingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	30	None	replace
498	[BUG]  [BUGGY]  SavingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  SavingRoot  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  SavingRoot.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	SavingRoot.addChildrenToFront(reduction);	  reducingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  SavingRoot	30	None	replace
499	[BUG]  [BUGGY]  improvingRoot.addChildrenToFront(reduction);  [CE]  cannot  find  symbol  improvingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  improvingRoot.addChildrenToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	improvingRoot.addChildrenToFront(reduction);	  reducingRoot.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  improvingRoot	30	None	replace
500	[BUG]  [BUGGY]  reducer.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);	  reduction.removeChild(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol	73	None	replace
501	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(reduction,  reduction);  [CE]  cannot  find  symbol  aiderCode  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCode.addChildrenToFront(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCode.addChildrenToFront(reduction,  reduction);	          helperCode.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	44	None	replace
502	[BUG]  [BUGGY]  helperCode.addChildrenToFront(reduction,reducing);  [CE]  cannot  find  symbol  reducing  [FE]                  AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  helperCode.addChildrenToFront(reduction,reducing);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	helperCode.addChildrenToFront(reduction,reducing);	          helperCode.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  reducing	44	None	replace
503	[BUG]  [BUGGY]  reducer.addChildToBack(helperCodeCost);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToBack(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToBack(helperCodeCost);	          reducer.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
504	[BUG]  [BUGGY]  reducer.addChildToBack(helperCode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToBack(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToBack(helperCode);	          reducer.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
505	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getChildren();  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getChildren();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost  =  reduction.getChildren();	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	61	None	replace
506	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reducer.removeChild(reduction);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost  =  reducer.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost  =  reducer.removeChild(reduction);	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	61	None	replace
507	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reducer.removeChild(helperCodeCost);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reducer  helperCodeCost  =  reducer.removeChild(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reducer  helperCodeCost  =  reducer.removeChild(helperCodeCost);	  Reducer    helperCodeCost.removeChild(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	61	None	replace
508	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  aiderCode  [FE]        AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCode.addChildrenToFront(reduction);  compiler.reportCodeChange();	          helperCodeCost.addChildrenToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  aiderCode	76	None	replace
509	[BUG]  [BUGGY]  reducer.removeChild(reduction,  Saving);  [CE]  cannot  find  symbol  Saving  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  Saving);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  Saving);	  reducer.removeChild(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  Saving	54	None	replace
510	[BUG]  [BUGGY]  reduction.addChildrenToFront(reduction,  reduction);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(reduction,  reduction);	  reduction.addChildrenToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	11	None	replace
511	[BUG]  [BUGGY]  reduction.addChildrenToFront(reduction,  helpingerCodeCost);  [CE]  cannot  find  symbol  helpingerCodeCost  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildrenToFront(reduction,  helpingerCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildrenToFront(reduction,  helpingerCodeCost);	  reduction.addChildrenToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  helpingerCodeCost	88	None	replace
512	[BUG]  [BUGGY]  reductions.addChildrenToFront(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildrenToFront(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildrenToFront(helperCodeCost,  reduction);	  reduction.addChildrenToFront(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol	88	None	replace
513	[BUG]  [BUGGY]  aiderCode.addChildToFront(reduction);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  aiderCode  [FE]            AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCode.addChildToFront(reduction);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCode.addChildToFront(reduction);  compiler.reportCodeChange();	          helperCodeCost.addChildToFront(reduction);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  aiderCode	78	None	replace
514	[BUG]  [BUGGY]  reducer.removeChild(saved);  [CE]  cannot  find  symbol  saved  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(saved);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(saved);	  reducer.removeChild(rededuction);    	non-compiled	[CE]  cannot  find  symbol  saved	96	None	replace
515	[BUG]  [BUGGY]  HelperCodeUtil.removeChild(reduction);  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  HelperCodeUtil.removeChild(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	HelperCodeUtil.removeChild(reduction);	  réduir.removeChild(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	55	None	replace
516	[BUG]  [BUGGY]  reduction.addChildToFront(reduction,  reduction);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(reduction,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(reduction,  reduction);	  reduction.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
517	[BUG]  [BUGGY]  reductions.addChildToFront(helperCode);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reductions.addChildToFront(helperCode);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reductions.addChildToFront(helperCode);	  reducings.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
518	[BUG]  [BUGGY]  réduirs.addChildToFront(helperCodeCost);  [CE]  cannot  find  symbol  r  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduirs.addChildToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduirs.addChildToFront(helperCodeCost);	  reducings.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	23	None	replace
519	[BUG]  [BUGGY]  reduction  =  reduction.addChildToFront(helperCodeCost);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction  =  reduction.addChildToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction  =  reduction.addChildToFront(helperCodeCost);	  reduction.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
520	[BUG]  [BUGGY]  reduction.addChildToFront(saved);  [CE]  cannot  find  symbol  saved  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.addChildToFront(saved);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.addChildToFront(saved);	  reduction.addChildToFront(parent);    	non-compiled	[CE]  cannot  find  symbol  saved	58	None	replace
521	[BUG]  [BUGGY]  aiderCodeCost.addChildToFront(reduction);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]          AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  aiderCodeCost.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	aiderCodeCost.addChildToFront(reduction);	          helperCodeCost.addChildToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	41	None	replace
522	[BUG]  [BUGGY]  réduir.addChildrenToFront(helperCodeCost);  [CE]  cannot  find  symbol  r  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduir.addChildrenToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduir.addChildrenToFront(helperCodeCost);	  reducing.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol  r	13	None	replace
523	[BUG]  [BUGGY]  reducer.addChildrenToFront(savings);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(savings);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(savings);  compiler.reportCodeChange();	          reducer.addChildrenToFront(helperCode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
524	[BUG]  [BUGGY]  reducer.addChildrenToFront(saved);  compiler.reportCodeChange();  [CE]  cannot  find  symbol  saved  [FE]                AssertionFailedError      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildrenToFront(saved);  compiler.reportCodeChange();  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildrenToFront(saved);  compiler.reportCodeChange();	          reducer.addChildrenToFront(helperCode);    compiler.reportCodeChange();    	non-compiled	[CE]  cannot  find  symbol  saved	79	None	replace
525	[BUG]  [BUGGY]  AiderCode.addChildToFront(reduction);  [CE]  cannot  find  symbol  AiderCode  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  AiderCode.addChildToFront(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	AiderCode.addChildToFront(reduction);	  réduction.addChildToFront(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  AiderCode	93	None	replace
526	[BUG]  [BUGGY]  Reduction  reduction  =  reduction.removeChild(root);  [CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  Reduction  reduction  =  reduction.removeChild(root);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	Reduction  reduction  =  reduction.removeChild(root);	  reduction.removeChild(root);    	non-compiled	[CE]  variable  reduction  is  already  defined  in  method  process(Node,Node)	49	None	replace
527	[BUG]  [BUGGY]  reduction.apply(helperCode,  reduction,  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction.apply(helperCode,  reduction,  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction.apply(helperCode,  reduction,  HelperCodeCost.DEFAULT_THRESHOLD);	  reduction.apply(reduction,    HelperCodeCost.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	97	None	replace
528	[BUG]  [BUGGY]  AiderCode.addChildToBack(reduction);  [CE]  cannot  find  symbol  AiderCode  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  AiderCode.addChildToBack(reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	AiderCode.addChildToBack(reduction);	  réduction.addChildToBack(reduction);    	non-compiled	[CE]  cannot  find  symbol  AiderCode	85	None	replace
529	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  contributingRoot);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  contributingRoot);	  reducer.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	25	None	replace
530	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  helpingerCodeCost,  savings);  [CE]  cannot  find  symbol  helpingerCodeCost  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.addChildToFront(reduction,  helpingerCodeCost,  savings);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.addChildToFront(reduction,  helpingerCodeCost,  savings);	  reducer.addChildToFront(reduction,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  helpingerCodeCost	25	None	replace
531	[BUG]  [BUGGY]  reduction  =  reduction.addChildrenToFront(helperCodeCost);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reduction  =  reduction.addChildrenToFront(helperCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reduction  =  reduction.addChildrenToFront(helperCodeCost);	  reduction.addChildrenToFront(reduction);    	non-compiled	[CE]  cannot  find  symbol	8	None	replace
532	[BUG]  [BUGGY]  réduir.removeChild(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  r  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  réduir.removeChild(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	réduir.removeChild(helperCodeCost,  reduction);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  r	51	None	replace
533	[BUG]  [BUGGY]  elimination.removeChild(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  elimination  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  elimination.removeChild(helperCodeCost,  reduction);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	elimination.removeChild(helperCodeCost,  reduction);	  reduction.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  elimination	51	None	replace
534	[BUG]  [BUGGY]  reducer.removeChild(reduction,  helpingerCodeCost);  [CE]  cannot  find  symbol  helpingerCodeCost  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {      [BUGGY]  reducer.removeChild(reduction,  helpingerCodeCost);  [BUGGY]      }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	reducer.removeChild(reduction,  helpingerCodeCost);	  reducer.removeChild(helperCodeCost,    reduction);    	non-compiled	[CE]  cannot  find  symbol  helpingerCodeCost	81	None	replace
