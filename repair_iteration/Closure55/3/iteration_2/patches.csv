bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
2	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
3	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
4	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
5	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.HEELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
6	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
7	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction;  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction;  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction;	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction;    	non-compiled	[CE]  ')'  expected	52	None	replace
8	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    aiderCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	7	None	replace
9	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Node)  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Node)	48	None	replace
10	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	48	None	replace
11	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reduction);  [CE]  cannot  find  symbol  aiderCode  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	48	None	replace
12	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>,Node)  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>,Node)	29	None	replace
13	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reductions);  [CE]  no  suitable  method  found  for  getCost(Multimap<Reducer,FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Multimap<Reducer,FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)	29	None	replace
14	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	29	None	replace
15	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  deductions,  helperCode);  [CE]  cannot  find  symbol  deductions  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  deductions,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  deductions,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    reductions);    	non-compiled	[CE]  cannot  find  symbol  deductions	29	None	replace
16	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions.getSourceName());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
17	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode.getSourceName());  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reduction	32	None	replace
18	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName(),  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName(),  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName(),  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reduction	32	None	replace
19	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode.getSourceName());  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reduction	32	None	replace
20	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer.getSourceName());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
21	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	11	None	replace
22	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	11	None	replace
23	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducers);  [CE]  no  suitable  method  found  for  getCost(Node,List<Reducer>)  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducers);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducers);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,List<Reducer>)	11	None	replace
24	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  root);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  root);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node)	11	None	replace
25	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HelperType.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperType  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HelperType.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HelperType.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HelperType	11	None	replace
26	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reduction	56	None	replace
27	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName());  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reduction	56	None	replace
28	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap.getSourceName());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
29	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode.getSourceName());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
30	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(compiler.getSourceName());  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(compiler.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(compiler.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
31	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(compiler,  helperCode.getSourceName());  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(compiler,  helperCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(compiler,  helperCode.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
32	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reductions);  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reductions);	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
33	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperReductionGatherer  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.DEFAULT_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperReductionGatherer	43	None	replace
34	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  reduction);  [CE]  cannot  find  symbol  HelperReducer  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	43	None	replace
35	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperReducer  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.DEFAULT_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	43	None	replace
36	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.DEFAULT_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	43	None	replace
37	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  helperCode);  [CE]  cannot  find  symbol  HelperReducer  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	43	None	replace
38	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.DEFAULT_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	43	None	replace
39	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(root);    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
40	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  reductions);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(root);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
41	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductionMap,  root);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductionMap,  root);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(reductionMap,  root);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(root);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
42	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductions,  root);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductions,  root);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(reductions,  root);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(root);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
43	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  reducer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(root);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
44	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                  AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(root);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	1	None	replace
45	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(parent,  root);  [CE]  cannot  find  symbol  parent  [FE]                    AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(parent,  root);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(parent,  root);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(root);    	non-compiled	[CE]  cannot  find  symbol  parent	1	None	replace
46	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
47	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	15	None	replace
48	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  deduction);  [CE]  cannot  find  symbol  deduction  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  deduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  deduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  deduction	15	None	replace
49	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions.size());  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,int)  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions.size());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions.size());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions.size());    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,int)	65	None	replace
50	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode,  reductions.size());  [CE]  cannot  find  symbol  aiderCode  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode,  reductions.size());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode,  reductions.size());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions.size());    	non-compiled	[CE]  cannot  find  symbol  aiderCode	65	None	replace
51	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  reductions.size());  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  reductions.size());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  reductions.size());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions.size());    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)	65	None	replace
52	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  -  1);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  -  1);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  -  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions.size());    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)	65	None	replace
53	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  reductions.size());  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node,int)  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  reductions.size());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  reductions.size());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions.size());    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node,int)	65	None	replace
54	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reductions.size());  [CE]  no  suitable  method  found  for  getCost(Node,Node,int)  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reductions.size());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reductions.size());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions.size());    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node,int)	65	None	replace
55	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reductions.size());  [CE]  cannot  find  symbol  aiderCode  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reductions.size());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reductions.size());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions.size());    	non-compiled	[CE]  cannot  find  symbol  aiderCode	65	None	replace
56	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reduction);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reduction);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
57	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	replace
58	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  deduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  deduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  deduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	replace
59	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getSourceName(),  reduction);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getSourceName(),  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getSourceName(),  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reduction);    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
60	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  mitigation);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  mitigation);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  mitigation);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	replace
61	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reductions);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reductions);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
62	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reductions,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reductions,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reductions,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reductions);    	non-compiled	[CE]  cannot  find  symbol  reduction	33	None	replace
63	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getSourceName(),  reductions);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getSourceName(),  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getSourceName(),  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reductions);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
64	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap.getSourceName(),  reductions);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap.getSourceName(),  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap.getSourceName(),  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reductions);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
65	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(compiler.getSourceName(),  reductions);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(compiler.getSourceName(),  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(compiler.getSourceName(),  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reductions);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
66	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  saving);  [CE]  cannot  find  symbol  saving  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  saving);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    savings);    	non-compiled	[CE]  cannot  find  symbol  saving	51	None	replace
67	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  SAVINGS_THRESHOLD);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  SAVINGS_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    savings);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)	51	None	replace
68	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  contributingRoot);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  contributingRoot);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    savings);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	51	None	replace
69	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  savings);  [CE]  cannot  find  symbol  savings  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  savings);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    savings);    	non-compiled	[CE]  cannot  find  symbol  savings	51	None	replace
70	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [CE]  no  suitable  method  found  for  getCost(Reducer)  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helpercode);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Reducer)	80	None	replace
71	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperType.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperType  [FE]        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperType.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperType.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root);    	non-compiled	[CE]  cannot  find  symbol  HelperType	46	None	replace
72	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperType.HEELPER_SOURCE);  [CE]  cannot  find  symbol  HelperType  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperType.HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperType.HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root);    	non-compiled	[CE]  cannot  find  symbol  HelperType	46	None	replace
73	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.DEFAULT_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	46	None	replace
74	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperConstants.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperConstants  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperConstants.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperConstants.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root);    	non-compiled	[CE]  cannot  find  symbol  HelperConstants	46	None	replace
75	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getHelperCost(root);    	non-compiled	[CE]  cannot  find  symbol  reduction	47	None	replace
76	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  reductions);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getHelperCost(root);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
77	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getHelperCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	47	None	replace
78	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  reducer);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getHelperCost(root);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
79	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_COLLECTION);  [CE]  cannot  find  symbol  DEFAULT_COLLECTION  [FE]                  AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_COLLECTION);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_COLLECTION);	  int    helperCodeCost    =    InlineCostEstimator.getHelperCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_COLLECTION	47	None	replace
80	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT);  [CE]  cannot  find  symbol  DEFAULT  [FE]                    AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT);	  int    helperCodeCost    =    InlineCostEstimator.getHelperCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	47	None	replace
81	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_SOURCE);  [CE]  cannot  find  symbol  DEFAULT_SOURCE  [FE]                      AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getHelperCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SOURCE	47	None	replace
82	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reduction.getSourceName());  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reduction.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reduction.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  HelperCode	55	None	replace
83	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode,  reduction.getSourceName());  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode,  reduction.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode,  reduction.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  HelperCode	55	None	replace
84	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getSourceName(),  reduction);  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getSourceName(),  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getSourceName(),  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  HelperCode	55	None	replace
85	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getName());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
86	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getName());  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
87	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
88	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  reductions);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
89	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getName());  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
90	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]    NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(null);    int  helperCodeCost  =  InlineCostEstimator.getCost(null);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	27	None	add
91	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  HelperCodeCost  =  InlineCostEstimator.getCost(null);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]      NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  HelperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(null);    int  HelperCodeCost  =  InlineCostEstimator.getCost(null);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	27	None	add
92	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  aiderCodeCost  =  InlineCostEstimator.getCost(null);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  aiderCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(null);    int  aiderCodeCost  =  InlineCostEstimator.getCost(null);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	27	None	add
93	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helpercodeCost  =  InlineCostEstimator.getCost(null);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helpercodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(null);    int  helpercodeCost  =  InlineCostEstimator.getCost(null);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	27	None	add
94	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helperCodeCost  =  InlineCostEstimator.getCost(null));  [CE]  ';'  expected  [FE]            NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helperCodeCost  =  InlineCostEstimator.getCost(null));  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(null);    int  helperCodeCost  =  InlineCostEstimator.getCost(null));	  	non-compiled	[CE]  ';'  expected	27	None	add
95	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  reducer);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node,Reducer)  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node,Reducer)	50	None	replace
96	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode,  reducer);  [CE]  cannot  find  symbol  aiderCode  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reducer);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	50	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    compiler);    	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
98	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCode);	  NodeTraversal.traverse(compiler,    reduction,    compiler);    	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
99	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  helperCode,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    compiler);    	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
100	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    compiler);    	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
101	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  aiderCode);  [CE]  cannot  find  symbol  reduction  [FE]                                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  aiderCode);	  NodeTraversal.traverse(compiler,    reduction,    compiler);    	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
102	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.DEFAULT_HEELPER_SOURCE);  [CE]  cannot  find  symbol  HelperReductionGatherer  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.DEFAULT_HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.DEFAULT_HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReductionGatherer	44	None	replace
103	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  helperCode);  [CE]  cannot  find  symbol  HelperReducer  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	44	None	replace
104	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reduction);  [CE]  cannot  find  symbol  HelperReducer  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	44	None	replace
105	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  aiderCode);  [CE]  cannot  find  symbol  HelperReducer  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	44	None	replace
106	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.DEFAULT_HEELPER_SOURCE);  [CE]  cannot  find  symbol  HelperReducer  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.DEFAULT_HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.DEFAULT_HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	44	None	replace
107	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reductions);  [CE]  cannot  find  symbol  HelperReducer  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	44	None	replace
108	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null,  helperCode);  [CE]  no  suitable  method  found  for  getCost(<null>,Node)  [FE]    NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(null,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(null);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(<null>,Node)	28	None	replace
109	[BUG]  [BUGGY]  Reduction  reduction  =  compiler.getReduction(helperCode);  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Reduction  reduction  =  compiler.getReduction(helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  compiler.getReduction(helperCode);	  Reduction    reduction    =    compiler.getReduction(reduction);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
110	[BUG]  [BUGGY]  Reduction  reduction  =  compiler.getReduction(reduction,  helperCode);  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Reduction  reduction  =  compiler.getReduction(reduction,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  compiler.getReduction(reduction,  helperCode);	  Reduction    reduction    =    compiler.getReduction(reduction);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
111	[BUG]  [BUGGY]  Reduction  reduction  =  compiler.getReduction(helperCode,  reduction);  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Reduction  reduction  =  compiler.getReduction(helperCode,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  compiler.getReduction(helperCode,  reduction);	  Reduction    reduction    =    compiler.getReduction(reduction);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
112	[BUG]  [BUGGY]  Reduction  reduction  =  compiler.getReduction(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Reduction  reduction  =  compiler.getReduction(helperCodeCost,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  compiler.getReduction(helperCodeCost,  reduction);	  Reduction    reduction    =    compiler.getReduction(reduction);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	62	None	replace
113	[BUG]  [BUGGY]  Reduction  reduction  =  compiler.getReduction(helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Reduction  reduction  =  compiler.getReduction(helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  compiler.getReduction(helperCodeCost);	  Reduction    reduction    =    compiler.getReduction(reduction);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	62	None	replace
114	[BUG]  [BUGGY]  Reduction  reduction  =  compiler.getReduction(null,  reduction);  [CE]  cannot  find  symbol  [FE]                                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Reduction  reduction  =  compiler.getReduction(null,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  compiler.getReduction(null,  reduction);	  Reduction    reduction    =    compiler.getReduction(reduction);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
115	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducer,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Reducer,Node)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducer,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducer,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Reducer,Node)	30	None	replace
116	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  root,  reducer);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node,Reducer)  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  root,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  root,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node,Reducer)	30	None	replace
117	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  reducer);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Reducer)  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Reducer)	30	None	replace
118	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
119	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductions);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(reductions);	  int    helperCodeCost    =    InlineCostEstimator.getInstance();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
120	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reduction);  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(reduction);	  int    helperCodeCost    =    InlineCostEstimator.getInstance();    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
121	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceUTC();  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceUTC();  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstanceUTC();	  int    helperCodeCost    =    InlineCostEstimator.getInstance();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
122	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductionMap);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductionMap);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(reductionMap);	  int    helperCodeCost    =    InlineCostEstimator.getInstance();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
123	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(compiler,  helperCode.getSourceName());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(compiler,  helperCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(compiler,  helperCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
124	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode.getSourceName());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
125	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap.getSourceName());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
126	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(compiler.getSourceName());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(compiler.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(compiler.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
127	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer.getSourceName());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helpercode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
128	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root.getSourceName());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helpercode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	54	None	replace
129	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  helperCode);	  NodeTraversal.traverse(compiler,    reduction,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node)	77	None	replace
130	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCode);	  NodeTraversal.traverse(compiler,    reduction,    root);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	77	None	replace
131	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  HelperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  HelperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    root);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	77	None	replace
132	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    root);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	77	None	replace
133	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  HelperReducer.class);  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  HelperReducer.class);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  HelperReducer.class);	  NodeTraversal.traverse(compiler,    reduction,    root);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
134	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer)  [FE]                                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    root);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer)	77	None	replace
135	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionsduction);  [CE]  cannot  find  symbol  reductionsduction  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionsduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionsduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    réduction);    	non-compiled	[CE]  cannot  find  symbol  reductionsduction	73	None	replace
136	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  root,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node,Node)  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  root,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  root,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    helperCode);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node,Node)	13	None	replace
137	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reductions,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Multimap<Reducer,FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>,Node)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reductions,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reductions,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    helperCode);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Multimap<Reducer,FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>,Node)	13	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,GetterReducer)  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reductions,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,GetterReducer)	75	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Reducer>,GetterReducer)  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reductions,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Reducer>,GetterReducer)	75	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reductions,  new  GetterReducer());  [CE]  cannot  find  symbol  roots  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reductions,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  roots,  reductions,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reductions,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  roots	75	None	replace
141	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions,  new  GetterReducer());  [CE]  cannot  find  symbol  r  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  réductions,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reductions,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  r	75	None	replace
142	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  reductions,  new  GetterReducer());  [CE]  cannot  find  symbol  Context  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Context.traverse(compiler,  root,  reductions,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Context.traverse(compiler,  root,  reductions,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reductions,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  Context	75	None	replace
143	[BUG]  [BUGGY]  Traversal.traverse(compiler,  root,  reductions,  new  GetterReducer());  [CE]  cannot  find  symbol  Traversal  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Traversal.traverse(compiler,  root,  reductions,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Traversal.traverse(compiler,  root,  reductions,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reductions,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  Traversal	75	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigations,  new  GetterReducer());  [CE]  cannot  find  symbol  mitigations  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigations,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  mitigations,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reductions,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  mitigations	75	None	replace
145	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Multimap<Reducer,FunctionRewriter.Reduction>,Node)  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    helperCode);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Multimap<Reducer,FunctionRewriter.Reduction>,Node)	26	None	replace
146	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperConstants.HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperConstants.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperConstants.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	26	None	replace
147	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  reductions);  [CE]  no  suitable  method  found  for  getCost(Node,Reducer,Collection<FunctionRewriter.Reduction>)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    aiderCode,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Reducer,Collection<FunctionRewriter.Reduction>)	14	None	replace
148	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HelperType.HEELPER_SOURCE);  [CE]  cannot  find  symbol  HelperType  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HelperType.HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HelperType.HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    aiderCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HelperType	14	None	replace
149	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HelperConstants.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperConstants  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HelperConstants.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  HelperConstants.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    aiderCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HelperConstants	14	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	58	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  helperCode,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	58	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  ReductionGatherer());  [CE]  cannot  find  symbol  roots  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  roots,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  roots	58	None	replace
153	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  new  ReductionGatherer());  [CE]  cannot  find  symbol  pruningRoot  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  pruningRoot,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	58	None	replace
154	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  extension,  new  ReductionGatherer());  [CE]  cannot  find  symbol  extension  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  extension,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  extension,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  extension	58	None	replace
155	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCodeCost,  new  ReductionGatherer());  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  helperCodeCost,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  helperCodeCost,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	58	None	replace
156	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  Preconditions  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.GETPROP);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.GETPROP);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	59	None	replace
157	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.SCRIPT);  [CE]  cannot  find  symbol  Preconditions  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.SCRIPT);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	59	None	replace
158	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.FUNCTION);  [CE]  cannot  find  symbol  Preconditions  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.FUNCTION);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.FUNCTION);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	59	None	replace
159	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.COST);  [CE]  cannot  find  symbol  COST  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.COST);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()!=  Token.COST);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  COST	59	None	replace
160	[BUG]  [BUGGY]  int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  cannot  find  symbol  helperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    HelperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	6	None	replace
161	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
162	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  reductions);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
163	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  reducer);  [CE]  cannot  find  symbol  [FE]                  AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
164	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]                    AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	49	None	replace
165	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                      AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	49	None	replace
166	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT);  [CE]  cannot  find  symbol  DEFAULT  [FE]                        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	49	None	replace
167	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_COLLECTION);  [CE]  cannot  find  symbol  DEFAULT_COLLECTION  [FE]                          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_COLLECTION);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_COLLECTION);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_COLLECTION	49	None	replace
168	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.INSTANCE);  [CE]  cannot  find  symbol  INSTANCE  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.INSTANCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.INSTANCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.INSTANCE);    	non-compiled	[CE]  cannot  find  symbol  INSTANCE	45	None	replace
169	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.INSTANCE);  [CE]  cannot  find  symbol  HelperReducer  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.INSTANCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.INSTANCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.INSTANCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	45	None	replace
170	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.INSTANCE);  [CE]  cannot  find  symbol  HelperReductionGatherer  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.INSTANCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.INSTANCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.INSTANCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReductionGatherer	45	None	replace
171	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.INSTANCE);  [CE]  cannot  find  symbol  HelperCode  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.INSTANCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.INSTANCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.INSTANCE);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	45	None	replace
172	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  reduction);  [CE]  cannot  find  symbol  HelperReducer  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.INSTANCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	45	None	replace
173	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.INSTANCE);  [CE]  cannot  find  symbol  INSTANCE  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.INSTANCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(ReductionGatherer.INSTANCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.INSTANCE);    	non-compiled	[CE]  cannot  find  symbol  INSTANCE	45	None	replace
174	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  reductions);  [CE]  cannot  find  symbol  HelperReducer  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.INSTANCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	45	None	replace
175	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  reduction);  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	40	None	replace
176	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  reductions);  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	40	None	replace
177	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  reducer);  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	40	None	replace
178	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE  +  1);  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE  +  1);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	40	None	replace
179	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  aiderCode);  [CE]  cannot  find  symbol  HelperCode  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	40	None	replace
180	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  deductions);  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  deductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  deductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	40	None	replace
181	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Node)	18	None	replace
182	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	18	None	replace
183	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Reducer>,Node)  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Reducer>,Node)	18	None	replace
184	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Collection<FunctionRewriter.Reduction>)  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCode,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  helperCode,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,Collection<FunctionRewriter.Reduction>)	18	None	replace
185	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	18	None	replace
186	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	18	None	replace
187	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	18	None	replace
188	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Node,Reducer,Node)  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Reducer,Node)	37	None	replace
189	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	37	None	replace
190	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	37	None	replace
191	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  root);  [CE]  no  suitable  method  found  for  getCost(Reducer,Node)  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  root);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Reducer,Node)	37	None	replace
192	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionsductions);  [CE]  cannot  find  symbol  reductionsductions  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionsductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionsductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    réductions);    	non-compiled	[CE]  cannot  find  symbol  reductionsductions	68	None	replace
193	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions;  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions;  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions;	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    réductions);    	non-compiled	[CE]  ')'  expected	68	None	replace
194	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducerductions);  [CE]  cannot  find  symbol  reducerductions  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducerductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducerductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    réductions);    	non-compiled	[CE]  cannot  find  symbol  reducerductions	68	None	replace
195	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionductions);  [CE]  cannot  find  symbol  reductionductions  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    réductions);    	non-compiled	[CE]  cannot  find  symbol  reductionductions	68	None	replace
196	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.parent);  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.parent);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.parent);	  int    helperCodeCost    =    InlineCostEstimator.getCost(parent);    	non-compiled	[CE]  cannot  find  symbol  reduction	4	None	replace
197	[BUG]  [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  [CE]  cannot  find  symbol  ImlineCostEstimator  [FE]        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  ImlineCostEstimator.getCost(root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    ImlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  ImlineCostEstimator	70	None	replace
198	[BUG]  [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(helperCode);  [CE]  cannot  find  symbol  ImlineCostEstimator  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  ImlineCostEstimator.getCost(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    ImlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  ImlineCostEstimator	70	None	replace
199	[BUG]  [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  helperCode);  [CE]  cannot  find  symbol  ImlineCostEstimator  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    ImlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  ImlineCostEstimator	70	None	replace
200	[BUG]  [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    ImlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  reduction	70	None	replace
201	[BUG]  [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  reducer);  [CE]  cannot  find  symbol  ImlineCostEstimator  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    ImlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  ImlineCostEstimator	70	None	replace
202	[BUG]  [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(parent);  [CE]  cannot  find  symbol  parent  [FE]                  AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(parent);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  ImlineCostEstimator.getCost(parent);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    ImlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  parent	70	None	replace
203	[BUG]  [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                    AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  ImlineCostEstimator.getCost(root,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    ImlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	70	None	replace
204	[BUG]  [BUGGY]  Node  addRoot  =  reductionMap.get(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  addRoot  =  reductionMap.get(helperCodeCost,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  addRoot  =  reductionMap.get(helperCodeCost,  reduction);	  Node    addRoot    =    reductionMap.get(helperCode);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	19	None	replace
205	[BUG]  [BUGGY]  Node  addRoot  =  reductionMap.get(helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  addRoot  =  reductionMap.get(helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  addRoot  =  reductionMap.get(helperCodeCost);	  Node    addRoot    =    reductionMap.get(helperCode);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	19	None	replace
206	[BUG]  [BUGGY]  Node  addRoot  =  reductionMap.get(helperCode,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  addRoot  =  reductionMap.get(helperCode,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  addRoot  =  reductionMap.get(helperCode,  reduction);	  Node    addRoot    =    reductionMap.get(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	replace
207	[BUG]  [BUGGY]  Node  addRoot  =  reductionMap.get(helperCode,  reductions);  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  addRoot  =  reductionMap.get(helperCode,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  addRoot  =  reductionMap.get(helperCode,  reductions);	  Node    addRoot    =    reductionMap.get(helperCode);    	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	19	None	replace
208	[BUG]  [BUGGY]  Node  addRoot  =  reductionMap.get(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  addRoot  =  reductionMap.get(reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  addRoot  =  reductionMap.get(reduction);	  Node    addRoot    =    reductionMap.get(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	19	None	replace
209	[BUG]  [BUGGY]  Node  addRoot  =  reductionMap.get(helperCodeCost,  reductions);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  addRoot  =  reductionMap.get(helperCodeCost,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  addRoot  =  reductionMap.get(helperCodeCost,  reductions);	  Node    addRoot    =    reductionMap.get(helperCode);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	19	None	replace
210	[BUG]  [BUGGY]  Node  addRoot  =  reductionMap.get(helperCode,  reducer);  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  addRoot  =  reductionMap.get(helperCode,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  addRoot  =  reductionMap.get(helperCode,  reducer);	  Node    addRoot    =    reductionMap.get(helperCode);    	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	19	None	replace
211	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeCost);  [CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeCost);	  Collection    <    Reduction>    reductions    =    reductionMap.get(reduction);    	non-compiled	[CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)	21	None	replace
212	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode,  reduction);  [CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode,  reduction);	  Collection    <    Reduction>    reductions    =    reductionMap.get(reduction);    	non-compiled	[CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)	21	None	replace
213	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeCost,  reduction);  [CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeCost,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeCost,  reduction);	  Collection    <    Reduction>    reductions    =    reductionMap.get(reduction);    	non-compiled	[CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)	21	None	replace
214	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reducerMap.get(reduction);  [CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Collection  <  Reduction>  reductions  =  reducerMap.get(reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Collection  <  Reduction>  reductions  =  reducerMap.get(reduction);	  Collection    <    Reduction>    reductions    =    reductionMap.get(reduction);    	non-compiled	[CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)	21	None	replace
215	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeReduction);  [CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeReduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(helperCodeReduction);	  Collection    <    Reduction>    reductions    =    reductionMap.get(reduction);    	non-compiled	[CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)	21	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)	74	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  helperCode,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)	74	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  GetterReducer());  [CE]  cannot  find  symbol  roots  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  roots,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  roots	74	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  extension,  new  GetterReducer());  [CE]  cannot  find  symbol  extension  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  extension,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  extension,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  extension	74	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  new  GetterReducer());  [CE]  cannot  find  symbol  pruningRoot  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  pruningRoot,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	74	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  result,  new  GetterReducer());  [CE]  cannot  find  symbol  result  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  result,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  result,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  result	74	None	replace
222	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	8	None	replace
223	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }  [CE]  cannot  find  symbol  reduction  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
224	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]                  AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  root);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
225	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  reductions);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node,Collection<FunctionRewriter.Reduction>)  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node,Collection<FunctionRewriter.Reduction>)	12	None	replace
226	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductionMap,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Node,Multimap<Reducer,FunctionRewriter.Reduction>,Node)  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductionMap,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductionMap,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Multimap<Reducer,FunctionRewriter.Reduction>,Node)	12	None	replace
227	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducers,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Node,List<Reducer>,Node)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducers,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducers,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,List<Reducer>,Node)	12	None	replace
228	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  compiler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,AbstractCompiler)  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  compiler);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  compiler);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,AbstractCompiler)	20	None	replace
229	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Collection<FunctionRewriter.Reduction>,Node)  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reductions,  helperCode);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Collection<FunctionRewriter.Reduction>,Node)	20	None	replace
230	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCodeCost,  reductions);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCodeCost,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reductions,  helperCodeCost,  reductions);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	20	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reductions,  aiderCode);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	20	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reductions,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	20	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCodeCost,  compiler);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  helperCodeCost,  compiler);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reductions,  helperCodeCost,  compiler);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	20	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter)  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter)	76	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  this);  [CE]  cannot  find  symbol  roots  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  this);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  roots,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  cannot  find  symbol  roots	76	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter)  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  this);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  helperCode,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter)	76	None	replace
237	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  this);  [CE]  cannot  find  symbol  pruningRoot  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  this);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  pruningRoot,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	76	None	replace
238	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  extension,  this);  [CE]  cannot  find  symbol  extension  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  extension,  this);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  extension,  this);	  NodeTraversal.traverse(compiler,    reduction,    this);    	non-compiled	[CE]  cannot  find  symbol  extension	76	None	replace
239	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reduction,  helperCode);  [CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reduction,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(reduction,  helperCode);	  Collection    <    Reduction>    reductions    =    reductionMap.get(helperCode);    	non-compiled	[CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)	22	None	replace
240	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reducer);  [CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(reducer);	  Collection    <    Reduction>    reductions    =    reductionMap.get(helperCode);    	non-compiled	[CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)	22	None	replace
241	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  savingSize);  [CE]  cannot  find  symbol  savingSize  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  savingSize);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  savingSize);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  savingSize	67	None	replace
242	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  saver);  [CE]  cannot  find  symbol  saver  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  saver);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  saver);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  saver	67	None	replace
243	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  HELPER_THRESHOLD);  [CE]  cannot  find  symbol  HELPER_THRESHOLD  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  HELPER_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  HELPER_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HELPER_THRESHOLD	67	None	replace
244	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE,  helperCode);  [CE]  cannot  find  symbol  HelperType  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	17	None	replace
245	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperType.HEELPER_SOURCE);  [CE]  cannot  find  symbol  HelperType  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperType.HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperType.HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	17	None	replace
246	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  HelperType.HEELPER_SOURCE);  [CE]  cannot  find  symbol  HelperType  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  HelperType.HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  HelperType.HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	17	None	replace
247	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE,  aiderCode);  [CE]  cannot  find  symbol  HelperType  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	17	None	replace
248	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE,  HELPER_THRESHOLD);  [CE]  cannot  find  symbol  HelperType  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE,  HELPER_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE,  HELPER_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	17	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	79	None	replace
250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  null);  [CE]  cannot  find  symbol  roots  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  roots,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  roots	79	None	replace
251	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  null);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  helperCode,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	79	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  extension,  null);  [CE]  cannot  find  symbol  extension  [FE]                                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  extension,  null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  extension,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  extension	79	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  null);  [CE]  cannot  find  symbol  pruningRoot  [FE]                                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  pruningRoot,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	79	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	60	None	replace
255	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	60	None	replace
256	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reductions,  new  ReductionGatherer());  [CE]  cannot  find  symbol  roots  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reductions,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  roots,  reductions,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  roots	60	None	replace
257	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions,  new  ReductionGatherer());  [CE]  cannot  find  symbol  r  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  réductions,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  r	60	None	replace
258	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigations,  new  ReductionGatherer());  [CE]  cannot  find  symbol  mitigations  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  mitigations,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  mitigations,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  mitigations	60	None	replace
259	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  resolutions,  new  ReductionGatherer());  [CE]  cannot  find  symbol  resolutions  [FE]                                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  resolutions,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  resolutions,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  resolutions	60	None	replace
260	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reduction.getSourceName());  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reduction.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reduction.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reduction	35	None	replace
261	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  compiler.getSourceName());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  compiler.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  compiler.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
262	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducer.getSourceName());  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducer.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducer.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
263	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductionMap.getSourceName());  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductionMap.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductionMap.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
264	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reductions.getSourceName());  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reductions.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reductions.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
265	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reduction);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  reduction	61	None	replace
266	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reductions);  [CE]  cannot  find  symbol  Preconditions  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reductions);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	61	None	replace
267	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.NAME);  [CE]  cannot  find  symbol  Preconditions  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.NAME);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()!=  Token.NAME);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	61	None	replace
268	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  helperCodeCost);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	61	None	replace
269	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reductions.size());  [CE]  cannot  find  symbol  Preconditions  [FE]                                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reductions.size());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reductions.size());	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	61	None	replace
270	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Preconditions  [FE]                                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.NAME);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.NAME);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	61	None	replace
271	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperReductionGatherer  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReductionGatherer.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReductionGatherer	42	None	replace
272	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  helperCode);  [CE]  cannot  find  symbol  HelperReducer  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	42	None	replace
273	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  reduction);  [CE]  cannot  find  symbol  HelperReducer  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	42	None	replace
274	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperReducer  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperReducer.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	42	None	replace
275	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  aiderCode);  [CE]  cannot  find  symbol  HelperReducer  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	42	None	replace
276	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  reductions);  [CE]  cannot  find  symbol  HelperReducer  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	42	None	replace
277	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reducer,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Multimap<Reducer,FunctionRewriter.Reduction>,Reducer,Node)  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reducer,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  reducer,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Multimap<Reducer,FunctionRewriter.Reduction>,Reducer,Node)	71	None	replace
278	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
279	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  reductions);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(helperCode);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
280	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductionMap,  helperCode);  [CE]  cannot  find  symbol  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductionMap,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(reductionMap,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(helperCode);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
281	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reduction,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reduction,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(reduction,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
282	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductions,  helperCode);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(reductions,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(reductions,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(helperCode);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
283	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions,  HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	64	None	replace
284	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  root,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Reducer,Node,Node)  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  root,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  root,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducer,    helperCode);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Reducer,Node,Node)	38	None	replace
285	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  root,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  root,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  root,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducer,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	38	None	replace
286	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  SAVINGS_THRESHOLD);  [CE]  no  suitable  method  found  for  getCost(Node,Reducer,int)  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  SAVINGS_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  SAVINGS_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    HELPER_SOURCE);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Reducer,int)	72	None	replace
287	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction,  SAVINGS_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction,  SAVINGS_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  reduction	72	None	replace
288	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  reduction	72	None	replace
289	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  FACTORY_METHOD_NAME);  [CE]  cannot  find  symbol  FACTORY_METHOD_NAME  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  FACTORY_METHOD_NAME);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  FACTORY_METHOD_NAME);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  FACTORY_METHOD_NAME	72	None	replace
290	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  savings);  [CE]  cannot  find  symbol  savings  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  savings);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  savings	72	None	replace
291	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode,  root);  [CE]  no  suitable  method  found  for  getCost(Reducer,Node,Node)  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode,  root);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode,  root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Reducer,Node,Node)	36	None	replace
292	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  HelperType.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperType  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  HelperType.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  HelperType.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HelperType	36	None	replace
293	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  HelperConstants.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperConstants  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  HelperConstants.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer,  HelperConstants.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HelperConstants	36	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reductions.size());  [CE]  cannot  find  symbol  Preconditions  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reductions.size());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reductions.size());	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	57	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reduction);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  reduction	57	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCode.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  Preconditions  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCode.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCode.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	57	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(reductionMap.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(reductionMap.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(reductionMap.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
298	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  Preconditions  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.EXPR_RESULT);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	57	None	replace
299	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reductions);  [CE]  cannot  find  symbol  Preconditions  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reductions);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	57	None	replace
300	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getDefaultCost(root);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
301	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getDefaultCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	3	None	replace
302	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root,  reductions);  [CE]  cannot  find  symbol  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getDefaultCost(root);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
303	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_COLLECTION);  [CE]  cannot  find  symbol  DEFAULT_COLLECTION  [FE]                  AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_COLLECTION);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_COLLECTION);	  int    helperCodeCost    =    InlineCostEstimator.getDefaultCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_COLLECTION	3	None	replace
304	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root,  reducer);  [CE]  cannot  find  symbol  [FE]                    AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getDefaultCost(root);    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
305	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.INSTANCE);  [CE]  cannot  find  symbol  INSTANCE  [FE]                      AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.INSTANCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.INSTANCE);	  int    helperCodeCost    =    InlineCostEstimator.getDefaultCost(root);    	non-compiled	[CE]  cannot  find  symbol  INSTANCE	3	None	replace
306	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT);  [CE]  cannot  find  symbol  DEFAULT  [FE]                        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT);	  int    helperCodeCost    =    InlineCostEstimator.getDefaultCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT	3	None	replace
307	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE,  helperCode);  [CE]  cannot  find  symbol  HelperType  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	16	None	replace
308	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperType.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperType  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperType.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperType.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	16	None	replace
309	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  HelperType.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperType  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  HelperType.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductionMap,  HelperType.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	16	None	replace
310	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE,  aiderCode);  [CE]  cannot  find  symbol  HelperType  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	16	None	replace
311	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE  +  1);  [CE]  cannot  find  symbol  HelperType  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE  +  1);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	16	None	replace
312	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reduction);  [CE]  cannot  find  symbol  HelperCode  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	39	None	replace
313	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reductions);  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	39	None	replace
314	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  SAVINGS_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  SAVINGS_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	39	None	replace
315	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reducer);  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	39	None	replace
316	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD  +  1);  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD  +  1);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	39	None	replace
317	[BUG]  [BUGGY]  Node  reduction  =  reductionMap.get(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  reduction  =  reductionMap.get(helperCodeCost,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  reduction  =  reductionMap.get(helperCodeCost,  reduction);	  Node    reduction    =    reductionMap.get(helperCode);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	24	None	replace
318	[BUG]  [BUGGY]  Node  reduction  =  reductionMap.get(helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  reduction  =  reductionMap.get(helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  reduction  =  reductionMap.get(helperCodeCost);	  Node    reduction    =    reductionMap.get(helperCode);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	24	None	replace
319	[BUG]  [BUGGY]  Node  reduction  =  reductionMap.get(helperCode,  reductions);  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]                                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  reduction  =  reductionMap.get(helperCode,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  reduction  =  reductionMap.get(helperCode,  reductions);	  Node    reduction    =    reductionMap.get(helperCode);    	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	24	None	replace
320	[BUG]  [BUGGY]  Node  reduction  =  reductionMap.get(helperCode,  reduction);  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]                                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  reduction  =  reductionMap.get(helperCode,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  reduction  =  reductionMap.get(helperCode,  reduction);	  Node    reduction    =    reductionMap.get(helperCode);    	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	24	None	replace
321	[BUG]  [BUGGY]  Node  reduction  =  reductionMap.get(reduction);  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]                                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  reduction  =  reductionMap.get(reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  reduction  =  reductionMap.get(reduction);	  Node    reduction    =    reductionMap.get(helperCode);    	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	24	None	replace
322	[BUG]  [BUGGY]  Node  reduction  =  reductionMap.get(helperCodeCost,  reductions);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  reduction  =  reductionMap.get(helperCodeCost,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  reduction  =  reductionMap.get(helperCodeCost,  reductions);	  Node    reduction    =    reductionMap.get(helperCode);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	24	None	replace
323	[BUG]  [BUGGY]  Node  reduction  =  reductionMap.get(helperCode,  reducer);  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]                                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  reduction  =  reductionMap.get(helperCode,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  reduction  =  reductionMap.get(helperCode,  reducer);	  Node    reduction    =    reductionMap.get(helperCode);    	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	24	None	replace
324	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reducers);  [CE]  no  suitable  method  found  for  getCost(Node,Node,List<Reducer>)  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reducers);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reducers);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node,List<Reducer>)	53	None	replace
325	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reducer);  [CE]  cannot  find  symbol  aiderCode  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	53	None	replace
326	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperType.HELPER_SOURCE,  reducer);  [CE]  cannot  find  symbol  HelperType  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperType.HELPER_SOURCE,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperType.HELPER_SOURCE,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HelperType	53	None	replace
327	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  CreateStatementReducer());  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  CreateStatementReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  new  CreateStatementReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    CreateStatementReducer());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
328	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  new  CreateStatementReducer());  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  helperCode,  new  CreateStatementReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  helperCode,  new  CreateStatementReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    CreateStatementReducer());    	non-compiled	[CE]  cannot  find  symbol	78	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  extension,  new  CreateStatementReducer());  [CE]  cannot  find  symbol  extension  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  extension,  new  CreateStatementReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  extension,  new  CreateStatementReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    CreateStatementReducer());    	non-compiled	[CE]  cannot  find  symbol  extension	78	None	replace
330	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  CreateStatementReducer());  [CE]  cannot  find  symbol  roots  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  new  CreateStatementReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  roots,  new  CreateStatementReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    CreateStatementReducer());    	non-compiled	[CE]  cannot  find  symbol  roots	78	None	replace
331	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  new  CreateStatementReducer());  [CE]  cannot  find  symbol  pruningRoot  [FE]                                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  new  CreateStatementReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  pruningRoot,  new  CreateStatementReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    CreateStatementReducer());    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	78	None	replace
332	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  result,  new  CreateStatementReducer());  [CE]  cannot  find  symbol  result  [FE]                                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  result,  new  CreateStatementReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  result,  new  CreateStatementReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    CreateStatementReducer());    	non-compiled	[CE]  cannot  find  symbol  result	78	None	replace
333	[BUG]  [BUGGY]  Reduction  reduction  =  compiler.getReduction(reductions);  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Reduction  reduction  =  compiler.getReduction(reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  compiler.getReduction(reductions);	  Reduction    reduction    =    compiler.getReduction(reduction);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
334	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  deduction);  [CE]  cannot  find  symbol  deduction  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  deduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  deduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    réduction);    	non-compiled	[CE]  cannot  find  symbol  deduction	73	None	replace
335	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  suppression);  [CE]  cannot  find  symbol  suppression  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  suppression);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  suppression);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    réduction);    	non-compiled	[CE]  cannot  find  symbol  suppression	73	None	replace
336	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helper);  [CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helper);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(helper);	  Collection    <    Reduction>    reductions    =    reductionMap.get(reduction);    	non-compiled	[CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)	21	None	replace
337	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);  [CE]  cannot  find  symbol  DEFAULT_HEELPER_SOURCE  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getHelperCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HEELPER_SOURCE	47	None	replace
338	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEPRECATED);  [CE]  cannot  find  symbol  DEPRECATED  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEPRECATED);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.DEPRECATED);	  int    helperCodeCost    =    InlineCostEstimator.getHelperCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEPRECATED	47	None	replace
339	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  helperCode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getHelperCost(root);    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
340	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                  AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	10	None	replace
341	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                    AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	10	None	replace
342	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }  else  {  return;  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                      AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }  else  {  return;  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }  else  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	10	None	replace
343	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }  [CE]  no  suitable  method  found  for  getCost(Node,Reducer)  [FE]                        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Reducer)	10	None	replace
344	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root,  reductions);  [CE]  no  suitable  method  found  for  getCost(Node,Node,Collection<FunctionRewriter.Reduction>)  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node,Collection<FunctionRewriter.Reduction>)	71	None	replace
345	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  reductions,  HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  reductions,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	71	None	replace
346	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap,  reducer);  [CE]  no  suitable  method  found  for  getCost(Node,Multimap<Reducer,FunctionRewriter.Reduction>,Reducer)  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Multimap<Reducer,FunctionRewriter.Reduction>,Reducer)	71	None	replace
347	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réduir,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  r  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réduir,  reductions,  HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réduir,  reductions,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  r	71	None	replace
348	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  réduir);  [CE]  cannot  find  symbol  r  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  réduir);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  réduir);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  r	71	None	replace
349	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helpercodeCost  =  InlineCostEstimator.getCost(root);  }  [CE]  cannot  find  symbol  helperCodeCost  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helpercodeCost  =  InlineCostEstimator.getCost(root);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helpercodeCost  =  InlineCostEstimator.getCost(root);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helpercodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	9	None	replace
350	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helpercodeCost  =  InlineCostEstimator.getCost(root);  }  else  {  return;  }  [CE]  cannot  find  symbol  helperCodeCost  [FE]                  AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helpercodeCost  =  InlineCostEstimator.getCost(root);  }  else  {  return;  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helpercodeCost  =  InlineCostEstimator.getCost(root);  }  else  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helpercodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	9	None	replace
351	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helpercodeCost  =  InlineCostEstimator.getCost(root);  }  else  {  [CE]  illegal  start  of  expression  [FE]                    AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helpercodeCost  =  InlineCostEstimator.getCost(root);  }  else  {  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helpercodeCost  =  InlineCostEstimator.getCost(root);  }  else  {	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helpercodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
352	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  aiderCode  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reductions,  HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reductions,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	12	None	replace
353	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  extension,  reductions);  [CE]  cannot  find  symbol  extension  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  extension,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  extension,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  extension	12	None	replace
354	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  suppressionMap,  helperCode);  [CE]  cannot  find  symbol  suppressionMap  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  suppressionMap,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  suppressionMap,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  suppressionMap	12	None	replace
355	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  helperCode);  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	40	None	replace
356	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperCode.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperCode.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperCode.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	40	None	replace
357	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.DEFAULT);  [CE]  cannot  find  symbol  HelperCode  [FE]        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.DEFAULT);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.DEFAULT);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	46	None	replace
358	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(compiler,  reductions,  helperCode);  [CE]  no  suitable  method  found  for  getCost(AbstractCompiler,Collection<FunctionRewriter.Reduction>,Node)  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(compiler,  reductions,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(compiler,  reductions,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    helperCode);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(AbstractCompiler,Collection<FunctionRewriter.Reduction>,Node)	13	None	replace
359	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null,  reductions,  helperCode);  [CE]  no  suitable  method  found  for  getCost(<null>,Collection<FunctionRewriter.Reduction>,Node)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null,  reductions,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(null,  reductions,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    helperCode);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(<null>,Collection<FunctionRewriter.Reduction>,Node)	13	None	replace
360	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  helperCode);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
361	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);  [CE]  cannot  find  symbol  DEFAULT_HEELPER_SOURCE  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HEELPER_SOURCE	49	None	replace
362	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_SOURCE);  [CE]  cannot  find  symbol  DEFAULT_SOURCE  [FE]                  AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.DEFAULT_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SOURCE	49	None	replace
363	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.INSTANCE);  [CE]  cannot  find  symbol  INSTANCE  [FE]                    AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.INSTANCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getInstanceCost(InlineCostEstimator.INSTANCE);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol  INSTANCE	49	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HelperConstantReducer.class);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HelperConstantReducer.class);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  HelperConstantReducer.class);	  NodeTraversal.traverse(compiler,    reduction,    compiler);    	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
365	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HelperReducer.class);  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  HelperReducer.class);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  HelperReducer.class);	  NodeTraversal.traverse(compiler,    reduction,    compiler);    	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
366	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperType.HELPER_SOURCE,  reductions);  [CE]  cannot  find  symbol  HelperType  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperType.HELPER_SOURCE,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperType.HELPER_SOURCE,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	16	None	replace
367	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode,  HelperType.HELPER_SOURCE);  [CE]  cannot  find  symbol  helpercode  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode,  HelperType.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode,  HelperType.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  helpercode	16	None	replace
368	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperType.HELPER_SOURCE,  reduction);  [CE]  cannot  find  symbol  HelperType  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperType.HELPER_SOURCE,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperType.HELPER_SOURCE,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	16	None	replace
369	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    ImlineCostEstimator.getCost(root);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	70	None	replace
370	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  }  else  {  return;  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  }  else  {  return;  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  }  else  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    ImlineCostEstimator.getCost(root);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	70	None	replace
371	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  }  else  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  }  else  {  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  }  else  {	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    ImlineCostEstimator.getCost(root);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
372	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  CreateStatementReducer());  [CE]  cannot  find  symbol  Root  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  CreateStatementReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  Root,  new  CreateStatementReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    CreateStatementReducer());    	non-compiled	[CE]  cannot  find  symbol  Root	78	None	replace
373	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  reducer);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(helperCode);    	non-compiled	[CE]  cannot  find  symbol	69	None	replace
374	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCode,  reductions);  [CE]  cannot  find  symbol  aiderCode  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCode,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCode,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	18	None	replace
375	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  0);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  0);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  0);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    HELPER_SOURCE);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)	67	None	replace
376	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  HELPER_METHOD_NAME);  [CE]  cannot  find  symbol  HELPER_METHOD_NAME  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  HELPER_METHOD_NAME);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  HELPER_METHOD_NAME);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HELPER_METHOD_NAME	67	None	replace
377	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  1);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  1);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    HELPER_SOURCE);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)	67	None	replace
378	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  -  2);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  -  2);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  -  2);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions.size());    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)	65	None	replace
379	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  +  1);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  +  1);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions.size());    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)	65	None	replace
380	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  -  4);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  -  4);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size()  -  4);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions.size());    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)	65	None	replace
381	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root.getSourceName());  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
382	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  deduction.getSourceName());  [CE]  cannot  find  symbol  deduction  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  deduction.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  deduction.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  deduction	32	None	replace
383	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName(),  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName(),  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reduction	32	None	replace
384	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	replace
385	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getSourceName(),  reduction);  [CE]  cannot  find  symbol  helpercode  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getSourceName(),  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getSourceName(),  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reduction);    	non-compiled	[CE]  cannot  find  symbol  helpercode	34	None	replace
386	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  aiderCode);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	34	None	replace
387	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reducer);  [CE]  cannot  find  symbol  Preconditions  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reducer);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	61	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  helperCode);  [CE]  cannot  find  symbol  Preconditions  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  helperCode);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	61	None	replace
389	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  helperCode);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(root,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(root);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
390	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  root);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  root);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode,  root);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(root);    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
391	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getInstance(InlineCostEstimator.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  DEFAULT_THRESHOLD  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getInstance(InlineCostEstimator.DEFAULT_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getInstance(InlineCostEstimator.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_THRESHOLD	1	None	replace
392	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getInstance(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);  [CE]  cannot  find  symbol  DEFAULT_HEELPER_SOURCE  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getInstance(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getInstance(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getInstance(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HEELPER_SOURCE	1	None	replace
393	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reducerMap.get(helperCode);  [CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Collection  <  Reduction>  reductions  =  reducerMap.get(helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Collection  <  Reduction>  reductions  =  reducerMap.get(helperCode);	  Collection    <    Reduction>    reductions    =    reductionMap.get(helperCode);    	non-compiled	[CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)	22	None	replace
394	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  compiler.getSourceName());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  compiler.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  compiler.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
395	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  sourceName.getSourceName());  [CE]  cannot  find  symbol  sourceName  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  sourceName.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  sourceName.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  sourceName	31	None	replace
396	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  helperCode);  [CE]  cannot  find  symbol  HelperCode  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	39	None	replace
397	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_HEELPER_SOURCE);  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	39	None	replace
398	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperCode.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperCode.DEFAULT_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  HelperCode.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	39	None	replace
399	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  aiderCode);  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	39	None	replace
400	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(helperCode);  [CE]  cannot  find  symbol  [FE]    NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(null);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
401	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  null);  [CE]  no  suitable  method  found  for  getCost(Node,<null>)  [FE]      NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  null);	  int    helperCodeCost    =    InlineCostEstimator.getCost(null);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,<null>)	28	None	replace
402	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(helperCode);  [CE]  cannot  find  symbol  [FE]        NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(null);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
403	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(helperCode);  [CE]  cannot  find  symbol  [FE]          NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getHelperCost(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(null);    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
404	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	15	None	replace
405	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  contributingRoot);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  contributingRoot);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	15	None	replace
406	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helpingerCode);  [CE]  cannot  find  symbol  helpingerCode  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helpingerCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helpingerCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	15	None	replace
407	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	8	None	replace
408	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(root);  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }  [CE]  incompatible  types  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(root);  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(root);  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reduction);    	non-compiled	[CE]  incompatible  types	8	None	replace
409	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer.getSourceName());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
410	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  compiler.getSourceName());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  compiler.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  compiler.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
411	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root.getSourceName());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
412	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reduction);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  reduction);	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
413	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  sourceName.getSourceName());  [CE]  cannot  find  symbol  sourceName  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  sourceName.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  sourceName.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  sourceName	56	None	replace
414	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reductions,  compiler);  [CE]  cannot  find  symbol  roots  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reductions,  compiler);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  roots,  reductions,  compiler);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  cannot  find  symbol  roots	20	None	replace
415	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  compilation);  [CE]  cannot  find  symbol  compilation  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  compilation);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  compilation);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  cannot  find  symbol  compilation	20	None	replace
416	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reductions);  [CE]  cannot  find  symbol  roots  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  roots,  reductions);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  cannot  find  symbol  roots	20	None	replace
417	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCodeCost);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    aiderCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	7	None	replace
418	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCodeCost);  [CE]  variable  helperCodeCost  might  not  have  been  initialized  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCodeCost);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    aiderCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  variable  helperCodeCost  might  not  have  been  initialized	7	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  GetterReducer());  [CE]  cannot  find  symbol  Root  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  Root,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reduction,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  Root	74	None	replace
420	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null);  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  null);	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol  reduction	79	None	replace
421	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGathererReducer());  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGathererReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGathererReducer());	  NodeTraversal.traverse(compiler,    reduction,    null);    	non-compiled	[CE]  cannot  find  symbol	79	None	replace
422	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE  +  1);  [CE]  cannot  find  symbol  HelperReducer  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE  +  1);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	42	None	replace
423	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_HEELPER_SOURCE,  helperCode.getSourceName());  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_HEELPER_SOURCE,  helperCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_HEELPER_SOURCE,  helperCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  HelperCode	55	None	replace
424	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  helperCode.getSourceName());  [CE]  cannot  find  symbol  HelperCode  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  helperCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  helperCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  HelperCode	55	None	replace
425	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_SOURCE_CODES[helperCode.getSourceName());  [CE]  ']'  expected  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_SOURCE_CODES[helperCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_SOURCE_CODES[helperCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.getSourceName());    	non-compiled	[CE]  ']'  expected	55	None	replace
426	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode.getSourceName());  [CE]  cannot  find  symbol  reducerCode  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helpercode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reducerCode	54	None	replace
427	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	60	None	replace
428	[BUG]  [BUGGY]  int  helperCodeCost  =  HelperConstants.getInstance();  [CE]  cannot  find  symbol  HelperConstants  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  HelperConstants.getInstance();  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  HelperConstants.getInstance();	  int    helperCodeCost    =    InlineCostEstimator.getInstance();    	non-compiled	[CE]  cannot  find  symbol  HelperConstants	2	None	replace
429	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.instance.getInstance();  [CE]  cannot  find  symbol  instance  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.instance.getInstance();  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.instance.getInstance();	  int    helperCodeCost    =    InlineCostEstimator.getInstance();    	non-compiled	[CE]  cannot  find  symbol  instance	2	None	replace
430	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction  +  1);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction  +  1);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
431	[BUG]  [BUGGY]  Node  reduction  =  reductionMap.get(helperCodeCost,  reducer);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  reduction  =  reductionMap.get(helperCodeCost,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  reduction  =  reductionMap.get(helperCodeCost,  reducer);	  Node    reduction    =    reductionMap.get(helperCode);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	24	None	replace
432	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  helperCode);  [CE]  cannot  find  symbol  HelperReducer  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.INSTANCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	45	None	replace
433	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  aiderCode);  [CE]  cannot  find  symbol  HelperReducer  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.INSTANCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	45	None	replace
434	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.INSTANCE,  reduction);  [CE]  cannot  find  symbol  HelperCode  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.INSTANCE,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.INSTANCE,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.INSTANCE);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	45	None	replace
435	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_SOURCE);  [CE]  cannot  find  symbol  DEFAULT_SOURCE  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getDefaultCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_SOURCE	3	None	replace
436	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.SOURCE);  [CE]  cannot  find  symbol  SOURCE  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getDefaultCost(root);    	non-compiled	[CE]  cannot  find  symbol  SOURCE	3	None	replace
437	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_COST);  [CE]  cannot  find  symbol  DEFAULT_COST  [FE]                AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_COST);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_COST);	  int    helperCodeCost    =    InlineCostEstimator.getDefaultCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_COST	3	None	replace
438	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(hELPER_SOURCE);  [CE]  cannot  find  symbol  hELPER_SOURCE  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(hELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(hELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(parent);    	non-compiled	[CE]  cannot  find  symbol  hELPER_SOURCE	4	None	replace
439	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  HelperCodeCost  =  InlineCostEstimator.getCost(root);  }  [CE]  cannot  find  symbol  helperCodeCost  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  HelperCodeCost  =  InlineCostEstimator.getCost(root);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  HelperCodeCost  =  InlineCostEstimator.getCost(root);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    HelperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	6	None	replace
440	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [CE]  no  suitable  method  found  for  getCost(int)  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    HelperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(int)	6	None	replace
441	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  sourceName.getSourceName());  [CE]  cannot  find  symbol  sourceName  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  sourceName.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  sourceName.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  sourceName	35	None	replace
442	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode.getSourceName());  [CE]  cannot  find  symbol  aiderCode  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  aiderCode	35	None	replace
443	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperReductionGatherer.HELPER_SOURCE,  reducer);  [CE]  cannot  find  symbol  HelperReductionGatherer  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperReductionGatherer.HELPER_SOURCE,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperReductionGatherer.HELPER_SOURCE,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HelperReductionGatherer	37	None	replace
444	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperReductionGatherer.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperReductionGatherer  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperReductionGatherer.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperReductionGatherer.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HelperReductionGatherer	37	None	replace
445	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperConstants.HELPER_SOURCE,  reducer);  [CE]  cannot  find  symbol  HelperConstants  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperConstants.HELPER_SOURCE,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperConstants.HELPER_SOURCE,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HelperConstants	37	None	replace
446	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode;  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode;  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode;	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode;    	non-compiled	[CE]  ')'  expected	41	None	replace
447	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getName());  [CE]  cannot  find  symbol  helpercode  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  helpercode	63	None	replace
448	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getName());  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
449	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getName());  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  HelperCode	63	None	replace
450	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	57	None	replace
451	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reducer);  [CE]  cannot  find  symbol  Preconditions  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reducer);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	57	None	replace
452	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  1);  [CE]  cannot  find  symbol  Preconditions  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  1);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  1);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	57	None	replace
453	[BUG]  [BUGGY]  Node  addRoot  =  reductionMap.get(helperCodeCost,  reducer);  [CE]  cannot  find  symbol  helperCodeCost  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  addRoot  =  reductionMap.get(helperCodeCost,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  addRoot  =  reductionMap.get(helperCodeCost,  reducer);	  Node    addRoot    =    reductionMap.get(helperCode);    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	19	None	replace
454	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperType.HEELPER_SOURCE,  reductions);  [CE]  cannot  find  symbol  HelperType  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperType.HEELPER_SOURCE,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperType.HEELPER_SOURCE,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperType	17	None	replace
455	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode,  HelperType.HEELPER_SOURCE);  [CE]  cannot  find  symbol  helpercode  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode,  HelperType.HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode,  HelperType.HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    HelperType.HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  helpercode	17	None	replace
456	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  limiter,  helperCode);  [CE]  cannot  find  symbol  limiter  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  limiter,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  limiter,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reducer);    	non-compiled	[CE]  cannot  find  symbol  limiter	36	None	replace
457	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if  (helperCodeCost  ==  null)  {  continue;  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]    NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if  (helperCodeCost  ==  null)  {  continue;  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(null);    int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if  (helperCodeCost  ==  null)  {  continue;  }	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	27	None	add
458	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if  (helperCodeCost!=  null)  {  continue;  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]      NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if  (helperCodeCost!=  null)  {  continue;  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(null);    int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if  (helperCodeCost!=  null)  {  continue;  }	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	27	None	add
459	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if  (helperCodeCost  ==  null)  {  return;  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if  (helperCodeCost  ==  null)  {  return;  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(null);    int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if  (helperCodeCost  ==  null)  {  return;  }	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	27	None	add
460	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  reductions,  new  GetterReducer());  [CE]  cannot  find  symbol  Root  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  Root,  reductions,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  Root,  reductions,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reductions,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  Root	75	None	replace
461	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduceris,  new  GetterReducer());  [CE]  cannot  find  symbol  reduceris  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduceris,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reduceris,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reductions,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  reduceris	75	None	replace
462	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	5	None	replace
463	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  }  else  {  return;  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  }  else  {  return;  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  }  else  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	5	None	replace
464	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  }  else  {  [CE]  illegal  start  of  expression  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  }  else  {  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  }  else  {	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
465	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.RETURN);  [CE]  cannot  find  symbol  Preconditions  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.RETURN);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.RETURN);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	59	None	replace
466	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réduir,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  r  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réduir,  SAVINGS_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réduir,  SAVINGS_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  r	72	None	replace
467	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  limiter,  SAVINGS_THRESHOLD);  [CE]  cannot  find  symbol  limiter  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  limiter,  SAVINGS_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  limiter,  SAVINGS_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  limiter	72	None	replace
468	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getSourceName(),  reductions);  [CE]  cannot  find  symbol  helpercode  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getSourceName(),  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getSourceName(),  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reductions);    	non-compiled	[CE]  cannot  find  symbol  helpercode	33	None	replace
469	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getSourceName(),  reductions);  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getSourceName(),  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getSourceName(),  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reductions);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	33	None	replace
470	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  réductions);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  réductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName(),  réductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName(),    reductions);    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
471	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  aiderCode);  [CE]  cannot  find  symbol  HelperReducer  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  aiderCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	43	None	replace
472	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  reducer);  [CE]  cannot  find  symbol  HelperReducer  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	43	None	replace
473	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  HelperConstantReducer.class);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  HelperConstantReducer.class);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  HelperConstantReducer.class);	  NodeTraversal.traverse(compiler,    reduction,    root);    	non-compiled	[CE]  cannot  find  symbol	77	None	replace
474	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE  +  1);  [CE]  cannot  find  symbol  HelperReducer  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE  +  1);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	44	None	replace
475	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reducer);  [CE]  cannot  find  symbol  HelperReducer  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	44	None	replace
476	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.DEFAULT_THRESHOLD,  reducer);  [CE]  cannot  find  symbol  HelperCode  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.DEFAULT_THRESHOLD,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.DEFAULT_THRESHOLD,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	53	None	replace
477	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperReducer.DEFAULT_THRESHOLD,  reducer);  [CE]  cannot  find  symbol  HelperReducer  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperReducer.DEFAULT_THRESHOLD,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperReducer.DEFAULT_THRESHOLD,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	53	None	replace
478	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  reduction	58	None	replace
479	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  ReductionGatherer());  [CE]  cannot  find  symbol  Root  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  Root,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  Root,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reduction,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  Root	58	None	replace
480	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap,  reductions);  [CE]  no  suitable  method  found  for  getCost(Node,Multimap<Reducer,FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Multimap<Reducer,FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)	64	None	replace
481	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aidCode,  reductions);  [CE]  cannot  find  symbol  aidCode  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aidCode,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aidCode,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    aiderCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aidCode	14	None	replace
482	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HELPER_SOURCE,  reductions);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HELPER_SOURCE,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HELPER_SOURCE,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    aiderCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	14	None	replace
483	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  contributingRoot,  reductions);  [CE]  cannot  find  symbol  contributingRoot  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  contributingRoot,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  contributingRoot,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    aiderCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	14	None	replace
484	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helpingCode,  reductions);  [CE]  cannot  find  symbol  helpingCode  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helpingCode,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helpingCode,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    aiderCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  helpingCode	14	None	replace
485	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  aidCode);  [CE]  cannot  find  symbol  aidCode  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  aidCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions,  aidCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    aiderCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aidCode	14	None	replace
486	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  pruningRoot,  helperCode);  [CE]  cannot  find  symbol  pruningRoot  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  pruningRoot,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  pruningRoot,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	13	None	replace
487	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducerCode,  helperCode);  [CE]  cannot  find  symbol  reducerCode  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducerCode,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducerCode,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reducerCode	13	None	replace
488	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  limiter,  helperCode);  [CE]  cannot  find  symbol  limiter  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  limiter,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  limiter,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  limiter	13	None	replace
489	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  reductions);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)	20	None	replace
490	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  reduction);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
491	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Reducer)  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  reducer);	  NodeTraversal.traverse(compiler,    reductions,    compiler);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,Reducer)	20	None	replace
492	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionMap,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Reducer,FunctionRewriter.Reduction>,GetterReducer)  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionMap,  new  GetterReducer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductionMap,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    reductions,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Multimap<Reducer,FunctionRewriter.Reduction>,GetterReducer)	75	None	replace
493	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode,  reductions);  [CE]  cannot  find  symbol  reducerCode  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reducerCode,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducerCode	18	None	replace
494	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HelperCodeCost);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  HelperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	18	None	replace
495	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  boolean  helperCodeCost  =  InlineCostEstimator.getCost(null);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]    NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  boolean  helperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(null);    boolean  helperCodeCost  =  InlineCostEstimator.getCost(null);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	27	None	add
496	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  InlineCostEstimator.getCost(null);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]      NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  InlineCostEstimator.getCost(null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(null);    InlineCostEstimator.getCost(null);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	27	None	add
497	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  float  helperCodeCost  =  InlineCostEstimator.getCost(null);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        NullPointerException    [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  float  helperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(null);    float  helperCodeCost  =  InlineCostEstimator.getCost(null);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	27	None	add
498	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  reducerCode);  [CE]  cannot  find  symbol  HelperReducer  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  reducerCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD,  reducerCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	43	None	replace
499	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  reduction);  [CE]  cannot  find  symbol  pruningRoot  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  pruningRoot,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  pruningRoot,  reduction);	  NodeTraversal.traverse(compiler,    reduction,    compiler);    	non-compiled	[CE]  cannot  find  symbol  pruningRoot	23	None	replace
500	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reducer,  helperCode);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reducer,Node)  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  reducer,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reducer,  helperCode);	  NodeTraversal.traverse(compiler,    reduction,    compiler);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Reducer,Node)	23	None	replace
501	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions,  helperCode.size());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions,  helperCode.size());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions,  helperCode.size());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions.size());    	non-compiled	[CE]  cannot  find  symbol	65	None	replace
502	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducerduction);  [CE]  cannot  find  symbol  reducerduction  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducerduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducerduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    réduction);    	non-compiled	[CE]  cannot  find  symbol  reducerduction	73	None	replace
503	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionduction);  [CE]  cannot  find  symbol  reductionduction  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    réduction);    	non-compiled	[CE]  cannot  find  symbol  reductionduction	73	None	replace
504	[BUG]  [BUGGY]  Reduction  reduction  =  reductionMap.getReduction(compiler);  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Reduction  reduction  =  reductionMap.getReduction(compiler);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  reductionMap.getReduction(compiler);	  Reduction    reduction    =    compiler.getReduction(reduction);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
505	[BUG]  [BUGGY]  Reduction  reduction  =  reductions.getReduction(compiler);  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Reduction  reduction  =  reductions.getReduction(compiler);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  reductions.getReduction(compiler);	  Reduction    reduction    =    compiler.getReduction(reduction);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
506	[BUG]  [BUGGY]  Reduction  reduction  =  reduction.getReduction(compiler);  [CE]  cannot  find  symbol  [FE]                                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Reduction  reduction  =  reduction.getReduction(compiler);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  reduction.getReduction(compiler);	  Reduction    reduction    =    compiler.getReduction(reduction);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
507	[BUG]  [BUGGY]  Reduction  reduction  =  reductionmap.getReduction(compiler);  [CE]  cannot  find  symbol  reductionmap  [FE]                                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Reduction  reduction  =  reductionmap.getReduction(compiler);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  reductionmap.getReduction(compiler);	  Reduction    reduction    =    compiler.getReduction(reduction);    	non-compiled	[CE]  cannot  find  symbol  reductionmap	62	None	replace
508	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode,  reductions);  [CE]  no  suitable  method  found  for  getCost(Reducer,Node,Collection<FunctionRewriter.Reduction>)  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducer,    helperCode);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Reducer,Node,Collection<FunctionRewriter.Reduction>)	38	None	replace
509	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode,  reducer);  [CE]  no  suitable  method  found  for  getCost(Reducer,Node,Reducer)  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Reducer,Node,Reducer)	36	None	replace
510	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode,  reducer);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	36	None	replace
511	[BUG]  [BUGGY]  int  helperCodeCost  =  helperCode.getInstance();  [CE]  cannot  find  symbol  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  helperCode.getInstance();  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  helperCode.getInstance();	  int    helperCodeCost    =    InlineCostEstimator.getInstance();    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
512	[BUG]  [BUGGY]  int  helperCodeCost  =  HelperCode.getInstance();  [CE]  cannot  find  symbol  HelperCode  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  HelperCode.getInstance();  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  HelperCode.getInstance();	  int    helperCodeCost    =    InlineCostEstimator.getInstance();    	non-compiled	[CE]  cannot  find  symbol  HelperCode	2	None	replace
513	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(helperCode,  root);  [CE]  cannot  find  symbol  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(helperCode,  root);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(helperCode,  root);	  int    helperCodeCost    =    InlineCostEstimator.getInstanceCost(root);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
514	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HELPER_SOURCE,  reducer);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HELPER_SOURCE,  reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HELPER_SOURCE,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	30	None	replace
515	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode);  [CE]  cannot  find  symbol  reducerCode  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reducerCode);	  NodeTraversal.traverse(compiler,    reduction,    root);    	non-compiled	[CE]  cannot  find  symbol  reducerCode	77	None	replace
516	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helpingerCode);  [CE]  cannot  find  symbol  helpingerCode  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helpingerCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  helpingerCode);	  NodeTraversal.traverse(compiler,    reduction,    root);    	non-compiled	[CE]  cannot  find  symbol  helpingerCode	77	None	replace
517	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.DEFAULT_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
518	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.HELPER_SOURCE);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
519	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.THRESHOLD);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction;    	non-compiled	[CE]  cannot  find  symbol  reduction	52	None	replace
520	[BUG]  [BUGGY]  Preconditions.checkState(reductions.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(reductions.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(reductions.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol	57	None	replace
521	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCode.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  COST  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCode.getType()  ==  Token.COST);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCode.getType()  ==  Token.COST);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  COST	57	None	replace
522	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCode.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  Preconditions  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCode.getType()  ==  Token.BLOCK);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCode.getType()  ==  Token.BLOCK);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	57	None	replace
523	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap.getSourceName());  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
524	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST,  reduction);  [CE]  cannot  find  symbol  COST  [FE]                            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST,  reduction);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST,  reduction);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  cannot  find  symbol  COST	59	None	replace
525	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionMap,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductionMap,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductionMap,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	60	None	replace
526	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduceris,  new  ReductionGatherer());  [CE]  cannot  find  symbol  reduceris  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduceris,  new  ReductionGatherer());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reduceris,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    reductions,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  reduceris	60	None	replace
527	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  COMMA_METHOD_NAME);  [CE]  cannot  find  symbol  COMMA_METHOD_NAME  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  COMMA_METHOD_NAME);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  COMMA_METHOD_NAME);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  COMMA_METHOD_NAME	67	None	replace
528	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingerCode);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingerCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingerCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	26	None	replace
529	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reducerCode);  [CE]  cannot  find  symbol  HelperReducer  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reducerCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE,  reducerCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	44	None	replace
530	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);  [CE]  cannot  find  symbol  DEFAULT_HEELPER_SOURCE  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getDefaultCost(InlineCostEstimator.DEFAULT_HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getDefaultCost(root);    	non-compiled	[CE]  cannot  find  symbol  DEFAULT_HEELPER_SOURCE	3	None	replace
531	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(compiler);  [CE]  no  suitable  method  found  for  getCost(AbstractCompiler)  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(compiler);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(compiler);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helpercode);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(AbstractCompiler)	80	None	replace
532	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions);  }  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions);  }  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int    helperCodeCost    =    InlineCostEstimator.getCost(root,    reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	8	None	replace
533	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reducer,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reducer,  HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reducer,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	50	None	replace
534	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions,  SAVINGS_THRESHOLD);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>,int)  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions,  SAVINGS_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>,int)	64	None	replace
535	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducerCode,  reductions);  [CE]  cannot  find  symbol  reducerCode  [FE]                        IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducerCode,  reductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducerCode,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    aiderCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducerCode	14	None	replace
536	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  deductions,  helperCode);  [CE]  cannot  find  symbol  deductions  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  deductions,  helperCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  deductions,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    aiderCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  deductions	14	None	replace
537	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  root);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Node)  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  root);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Node)	53	None	replace
538	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  COST  [FE]                                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.COST);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.COST);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  COST	61	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP);  [CE]  cannot  find  symbol  Preconditions  [FE]                                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.GETPROP);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	61	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.BLOCK);  [CE]  cannot  find  symbol  Preconditions  [FE]                                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.BLOCK);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  helperCode.getType()  ==  Token.BLOCK);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  cannot  find  symbol  Preconditions	61	None	replace
541	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  réductions);  [CE]  cannot  find  symbol  r  [FE]            IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  réductions);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  réductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer,    reductions);    	non-compiled	[CE]  cannot  find  symbol  r	71	None	replace
542	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions.getSourceName());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
543	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap.getSourceName());  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionMap.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
544	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode.getSourceName());  [CE]  cannot  find  symbol  reducerCode  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode.getSourceName());	  InlineCostEstimator    helperCodeCost    =    InlineCostEstimator.getCost(helperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reducerCode	56	None	replace
545	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducerCode);  [CE]  cannot  find  symbol  reducerCode  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducerCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducerCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions,    aiderCode);    	non-compiled	[CE]  cannot  find  symbol  reducerCode	15	None	replace
546	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  helpingerCode);  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  helpingerCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE,  helpingerCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	40	None	replace
547	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reducers);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,List<Reducer>)  [FE]                      IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reducers);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reducers);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions,    deductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,List<Reducer>)	66	None	replace
548	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_HEELPER_SOURCE,  reduction.getSourceName());  [CE]  cannot  find  symbol  HelperCode  [FE]              IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_HEELPER_SOURCE,  reduction.getSourceName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_HEELPER_SOURCE,  reduction.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperCode.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  HelperCode	55	None	replace
549	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reduction.getName());  [CE]  cannot  find  symbol  HelperCode  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reduction.getName());  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD,  reduction.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  cannot  find  symbol  HelperCode	63	None	replace
550	[BUG]  [BUGGY]  Node  addRoot  =  reductionMap.get(reducer);  [CE]  incompatible  types  [FE]                          IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  Node  addRoot  =  reductionMap.get(reducer);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  addRoot  =  reductionMap.get(reducer);	  Node    addRoot    =    reductionMap.get(helperCode);    	non-compiled	[CE]  incompatible  types	19	None	replace
551	[BUG]  [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.SOURCE);  [CE]  cannot  find  symbol  SOURCE  [FE]          AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  root.getHelperCost(InlineCostEstimator.SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getHelperCost(root);    	non-compiled	[CE]  cannot  find  symbol  SOURCE	47	None	replace
552	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  reducerCode);  [CE]  cannot  find  symbol  HelperReducer  [FE]                    IllegalStateException      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  reducerCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE,  reducerCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	42	None	replace
553	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCodeConstants.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperCodeConstants  [FE]        AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCodeConstants.HELPER_SOURCE);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  HelperCodeConstants.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    root);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeConstants	46	None	replace
554	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducerCode);  [CE]  cannot  find  symbol  reducerCode  [FE]            AssertionFailedError      [CONTEXT]      Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducerCode);  [BUGGY]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducerCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root,    helperCode);    	non-compiled	[CE]  cannot  find  symbol  reducerCode	48	None	replace
