bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(root);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
2	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance();  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance();  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance();	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
3	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root);  [CE]  cannot  find  symbol  [FE]        AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getDefaultCost(root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
4	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [CE]  cannot  find  symbol  parent  [FE]          AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(parent);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol  parent	4	None	replace
5	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int  helperCodeCost  =  InlineCostEstimator.getCost(root);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	3	None	add
6	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  HelperCodeCost  =  InlineCostEstimator.getCost(root);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]      AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  HelperCodeCost  =  InlineCostEstimator.getCost(root);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int  HelperCodeCost  =  InlineCostEstimator.getCost(root);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	3	None	add
7	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  aiderCodeCost  =  InlineCostEstimator.getCost(root);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  aiderCodeCost  =  InlineCostEstimator.getCost(root);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int  aiderCodeCost  =  InlineCostEstimator.getCost(root);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	3	None	add
8	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]          AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	3	None	add
9	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helpercodeCost  =  InlineCostEstimator.getCost(root);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]            AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helpercodeCost  =  InlineCostEstimator.getCost(root);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int  helpercodeCost  =  InlineCostEstimator.getCost(root);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	3	None	add
10	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	3	None	add
11	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>)  [FE]              IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>)	5	None	replace
12	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reductions);  [CE]  no  suitable  method  found  for  getCost(Node,Node,Collection<FunctionRewriter.Reduction>)  [FE]                IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reductions);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node,Collection<FunctionRewriter.Reduction>)	5	None	replace
13	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node)  [FE]                  IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Node)	5	None	replace
14	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reductions);  [CE]  cannot  find  symbol  aiderCode  [FE]                    IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reductions);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  aiderCode,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	5	None	replace
15	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                      IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCode	5	None	replace
16	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperType  [FE]                        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HelperType	5	None	replace
17	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE);  [CE]  cannot  find  symbol  HelperType  [FE]                          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  HelperType.HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HelperType	5	None	replace
18	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                    IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  root,  reductions);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	8	None	replace
19	[BUG]  [BUGGY]  Node  addRoot  =  reductionMap.get(helperCode);  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]                      IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  Node  addRoot  =  reductionMap.get(helperCode);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  addRoot  =  reductionMap.get(helperCode);	      	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	8	None	replace
20	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  compiler);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Collection<FunctionRewriter.Reduction>,AbstractCompiler)  [FE]                        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  compiler);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reductions,  compiler);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Collection<FunctionRewriter.Reduction>,AbstractCompiler)	8	None	replace
21	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reduction);  [CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(reduction);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(reduction);	      	non-compiled	[CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)	8	None	replace
22	[BUG]  [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode);  [CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)  [FE]                            IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Collection  <  Reduction>  reductions  =  reductionMap.get(helperCode);	      	non-compiled	[CE]  variable  reductions  is  already  defined  in  method  process(Node,Node)	8	None	replace
23	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  compiler);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  compiler);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  compiler);	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
24	[BUG]  [BUGGY]  Node  reduction  =  reductionMap.get(helperCode);  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]                                IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  Node  reduction  =  reductionMap.get(helperCode);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Node  reduction  =  reductionMap.get(helperCode);	      	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	8	None	replace
25	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionSize);  [CE]  cannot  find  symbol  reductionSize  [FE]          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionSize);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductionSize);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reductionSize	2	None	replace
26	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	2	None	replace
27	[BUG]  [BUGGY]  [FE]  NullPointerException  [FE]        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	add	int  helperCodeCost  =  InlineCostEstimator.getCost(null);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	compilable	  [FE]  NullPointerException  	1	9	replace
28	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  [FE]  NullPointerException  [FE]        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(null);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	compilable	  [FE]  NullPointerException  	1	9	replace
29	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)  [FE]                  IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)	7	None	replace
30	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducer);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Reducer)  [FE]                    IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducer);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>,Reducer)	7	None	replace
31	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName());  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
32	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName());  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
33	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reductions);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reductions);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
34	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reduction);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName(),  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  reduction	10	None	replace
35	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getSourceName());  [CE]  cannot  find  symbol  [FE]                IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getSourceName());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
36	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reducer);  [CE]  no  suitable  method  found  for  getCost(Node,Node,Reducer)  [FE]        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reducer);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node,Reducer)	9	None	replace
37	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  [CE]  no  suitable  method  found  for  getCost(Node,Reducer)  [FE]          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Reducer)	9	None	replace
38	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Reducer,Node)  [FE]            IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Reducer,Node)	9	None	replace
39	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperCode  [FE]        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	1	None	replace
40	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperCode  [FE]          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	1	None	replace
41	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode;  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode;  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  ')'  expected	1	None	replace
42	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperReducer  [FE]                IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducerCode);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	6	None	replace
43	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);  [CE]  cannot  find  symbol  HelperReducer  [FE]                  IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducerCode);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	6	None	replace
44	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);  [CE]  cannot  find  symbol  HelperReducer  [FE]                    IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.DEFAULT_HEELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducerCode);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	6	None	replace
45	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE);  [CE]  cannot  find  symbol  HelperReducer  [FE]                      IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperReducer.INSTANCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducerCode);    	non-compiled	[CE]  cannot  find  symbol  HelperReducer	6	None	replace
46	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root);  [CE]  no  suitable  method  found  for  getCost(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node)	4	None	replace
47	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root);  [CE]  cannot  find  symbol  [FE]      AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getHelperCost(root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
48	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Node,Node)  [FE]        AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node)	4	None	replace
49	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root);  [CE]  cannot  find  symbol  [FE]          AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstanceCost(root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
50	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reducer);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Reducer)  [FE]              IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reducer);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Reducer)	5	None	replace
51	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  savings);  [CE]  cannot  find  symbol  savings  [FE]                IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  savings);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  savings	5	None	replace
52	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction;  [CE]  ')'  expected  [FE]          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction;  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction;	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction);    	non-compiled	[CE]  ')'  expected	2	None	replace
53	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root,  reducer);  [CE]  no  suitable  method  found  for  getCost(Node,Node,Reducer)  [FE]        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root,  reducer);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  root,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node,Reducer)	9	None	replace
54	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getSourceName());  [CE]  cannot  find  symbol  helpercode  [FE]        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getSourceName());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  helpercode	10	None	replace
55	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getSourceName());  [CE]  cannot  find  symbol  HelperCode  [FE]          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getSourceName());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(HelperCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol  HelperCode	10	None	replace
56	[BUG]  [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName());  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	InlineCostEstimator  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getSourceName());    	non-compiled	[CE]  cannot  find  symbol	10	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT);  [CE]  cannot  find  symbol  Preconditions  [FE]                    IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT);	      	non-compiled	[CE]  cannot  find  symbol  Preconditions	8	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReductionGatherer());  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  ReductionGatherer());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  ReductionGatherer());	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST);  [CE]  cannot  find  symbol  COST  [FE]                        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST);	      	non-compiled	[CE]  cannot  find  symbol  COST	8	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reductions,  new  ReductionGatherer());	      	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	8	None	replace
61	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME);  [CE]  cannot  find  symbol  Preconditions  [FE]                            IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME);	      	non-compiled	[CE]  cannot  find  symbol  Preconditions	8	None	replace
62	[BUG]  [BUGGY]  Reduction  reduction  =  compiler.getReduction(reduction);  [CE]  cannot  find  symbol  [FE]                              IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  Reduction  reduction  =  compiler.getReduction(reduction);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	Reduction  reduction  =  compiler.getReduction(reduction);	      	non-compiled	[CE]  cannot  find  symbol	8	None	replace
63	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducerCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	6	None	replace
64	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)  [FE]              IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,Collection<FunctionRewriter.Reduction>)	5	None	replace
65	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size());  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  reductions.size());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>,int)	5	None	replace
66	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  deductions);  [CE]  cannot  find  symbol  deductions  [FE]                  IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  deductions);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  deductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  deductions	5	None	replace
67	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                    IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  HELPER_SOURCE);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	5	None	replace
68	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réductions);  [CE]  cannot  find  symbol  r  [FE]                  IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réductions);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reductions);    	non-compiled	[CE]  cannot  find  symbol  r	7	None	replace
69	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode);  [CE]  cannot  find  symbol  [FE]    AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getInstance(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
70	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]    AssertionFailedError    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  int  helperCodeCost  =  ImlineCostEstimator.getCost(root);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int    helperCodeCost    =    InlineCostEstimator.getCost(root);    int  helperCodeCost  =  ImlineCostEstimator.getCost(root);	  	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	3	None	add
71	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  reductions);  [CE]  no  suitable  method  found  for  getCost(Node,Reducer,Collection<FunctionRewriter.Reduction>)  [FE]        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  reductions);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Reducer,Collection<FunctionRewriter.Reduction>)	9	None	replace
72	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  HELPER_SOURCE);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	9	None	replace
73	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réduction);  [CE]  cannot  find  symbol  r  [FE]          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réduction);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  réduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction);    	non-compiled	[CE]  cannot  find  symbol  r	2	None	replace
74	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  GetterReducer());  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  GetterReducer());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  GetterReducer());	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
75	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Collection<FunctionRewriter.Reduction>,GetterReducer)  [FE]                      IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  reductions,  new  GetterReducer());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reductions,  new  GetterReducer());	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Collection<FunctionRewriter.Reduction>,GetterReducer)	8	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  this);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  this);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  this);	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  root);	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
78	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  CreateStatementReducer());  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  new  CreateStatementReducer());  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  new  CreateStatementReducer());	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  null);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	NodeTraversal.traverse(compiler,  reduction,  null);	      	non-compiled	[CE]  cannot  find  symbol  reduction	8	None	replace
80	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode);  [CE]  cannot  find  symbol  helpercode  [FE]        IllegalStateException    [CONTEXT]    Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode);  [BUGGY]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helpercode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  cannot  find  symbol  helpercode	1	None	replace
