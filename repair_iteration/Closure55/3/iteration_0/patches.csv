bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException  [CONTEXT]  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]    int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
2	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]      IllegalStateException  [CONTEXT]  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);  [BUGGY]    int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
3	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]        IllegalStateException  [CONTEXT]  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  [BUGGY]    int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	add	int  helperCodeCost  =  InlineCostEstimator.getCost(root);	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  	compilable	  [FE]  AssertionFailedError  	5	8	replace
4	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  [FE]  AssertionFailedError  [FE]        IllegalStateException  [CONTEXT]  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  [BUGGY]    int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root);	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  	compilable	  [FE]  AssertionFailedError  	5	8	replace
5	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions);  [CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>)  [FE]          IllegalStateException  [CONTEXT]  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions);  [BUGGY]    int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reductions);	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Collection<FunctionRewriter.Reduction>)	5	None	replace
6	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode);  [CE]  cannot  find  symbol  reducerCode  [FE]            IllegalStateException  [CONTEXT]  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode);  [BUGGY]    int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode);	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reducerCode	5	None	replace
7	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions);  [CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>)  [FE]              IllegalStateException  [CONTEXT]  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reductions);  [BUGGY]    int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reductions);	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  	non-compiled	[CE]  no  suitable  method  found  for  getCost(Collection<FunctionRewriter.Reduction>)	5	None	replace
8	[BUG]  [BUGGY]    [CE]  cannot  find  symbol  helperCodeCost  [FE]                IllegalStateException  [CONTEXT]  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  [BUGGY]    [BUGGY]    int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	  	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	5	None	replace
9	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer);  [CE]  no  suitable  method  found  for  getCost(Node,Reducer)  [FE]    IllegalStateException  [CONTEXT]  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer);  [BUGGY]    int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reducer);	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Reducer)	5	None	replace
10	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [CE]  cannot  find  symbol  reduction  [FE]    IllegalStateException  [CONTEXT]  Collection<Reduction>  reductions  =  reductionMap.get(reducer);  if  (reductions.isEmpty())  {  continue;  }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [BUGGY]    int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
