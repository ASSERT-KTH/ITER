bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length;	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
2	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost;	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
3	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.intValue();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.intValue();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.intValue();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
4	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE;	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
5	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT_THRESHOLD;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT_THRESHOLD;	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
6	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings()  *  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings()  *  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings()  *  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings()    +    1;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	36	None	replace
7	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.computeSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	31	None	replace
8	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  Helper.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  Helper.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  Helper.computeSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	31	None	replace
9	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingRoot.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingRoot.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helpingRoot.computeSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	31	None	replace
10	[BUG]  [BUGGY]  int  savings  =(Helper.computeSavings()  ==  null)?  0  :  Helper.computeSavings();  [CE]  cannot  find  symbol  Helper  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(Helper.computeSavings()  ==  null)?  0  :  Helper.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(Helper.computeSavings()  ==  null)?  0  :  Helper.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.computeSavings();    	non-compiled	[CE]  cannot  find  symbol  Helper	34	None	replace
11	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	34	None	replace
12	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  Helper.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  Helper.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  Helper.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	34	None	replace
13	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	34	None	replace
14	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCode.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helpingerCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	60	None	replace
15	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  contributingRoot.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  contributingRoot.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  contributingRoot.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helpingerCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	60	None	replace
16	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCode.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helpingerCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	60	None	replace
17	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size()  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size()  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size()  +  helperCodeCost;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
18	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size()  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
19	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.size()  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.size()  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.size()  +  helperCodeCost;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
20	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.size()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.size()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.size()  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
21	[BUG]  [BUGGY]  int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.size();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.size();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.size();    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	42	None	replace
22	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  reduction);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
23	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  reducer);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  reducer);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
24	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCode,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCode,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCode,  reduction);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
25	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction,  helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	20	None	replace
26	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(root,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(root,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(root,  helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
27	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reducerCodeCost);  [CE]  cannot  find  symbol  reducerCodeCost  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reducerCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reducerCodeCost);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducerCodeCost	20	None	replace
28	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost.getSavings());  [CE]  int  cannot  be  dereferenced  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost.getSavings());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost.getSavings());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getSavings());    	non-compiled	[CE]  int  cannot  be  dereferenced	63	None	replace
29	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
30	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reduction.getSavings());  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reduction.getSavings());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reduction.getSavings());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
31	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reduction);	  int    savings    =    InlineCostEstimator.getSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
32	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  aiderCodeCost);	  int    savings    =    InlineCostEstimator.getSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
33	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reducer.getSavings());  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reducer.getSavings());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reducer.getSavings());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
34	[BUG]  [BUGGY]  int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.SOURCE;  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.SOURCE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.SOURCE;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	18	None	replace
35	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.SOURCE;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.SOURCE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.SOURCE;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
36	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_NAME;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_NAME;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_NAME;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
37	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
38	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int)	45	None	replace
39	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	45	None	replace
40	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.reductionMap);  [CE]  cannot  find  symbol  reductionMap  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.reductionMap);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  this.reductionMap);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reductionMap	45	None	replace
41	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCodeCost);  [CE]  cannot  find  symbol  reducerCodeCost  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reducerCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reducerCodeCost	45	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.reductions);  [CE]  cannot  find  symbol  reductions  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  this.reductions);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  reductions	45	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [CE]  cannot  find  symbol  savings  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  null);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  null);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol  savings	45	None	replace
44	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	add	int  savings  =  InlineCostEstimator.getCost(root,  helperCodeCost);	  int    savings    =    InlineCostEstimator.getCost(helperCodeCost);    	compilable	  [FE]  AssertionFailedError  	69	9	replace
45	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root,  helperCodeCost);  [FE]  AssertionFailedError  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getCost(root,  helperCodeCost);	  int    savings    =    InlineCostEstimator.getCost(helperCodeCost);    	compilable	  [FE]  AssertionFailedError  	69	9	replace
46	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root,  HelperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getCost(root,  HelperCodeCost);	  int    savings    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	69	None	replace
47	[BUG]  [BUGGY]  [FE]  AssertionFailedError  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	add	int  savings  =  InlineCostEstimator.getCost(root);	  int    savings    =    InlineCostEstimator.getCost(helperCodeCost);    	compilable	  [FE]  AssertionFailedError  	69	9	replace
48	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root);  [FE]  AssertionFailedError  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getCost(root);	  int    savings    =    InlineCostEstimator.getCost(helperCodeCost);    	compilable	  [FE]  AssertionFailedError  	69	9	replace
49	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root,  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getCost(root,  aiderCodeCost);	  int    savings    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	69	None	replace
50	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);	  int    savings    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
51	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  Helper.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  Helper.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  Helper.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	40	None	replace
52	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	40	None	replace
53	[BUG]  [BUGGY]  int  savings  =(Helper.estimateSavings()  ==  null)?  0  :  Helper.estimateSavings();  [CE]  cannot  find  symbol  Helper  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(Helper.estimateSavings()  ==  null)?  0  :  Helper.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(Helper.estimateSavings()  ==  null)?  0  :  Helper.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  Helper	40	None	replace
54	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSuccess();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSuccess();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSuccess();	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	40	None	replace
55	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  Helper.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  Helper.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  Helper.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	40	None	replace
56	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.length;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	16	None	replace
57	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.length;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	16	None	replace
58	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	32	None	replace
59	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	32	None	replace
60	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	32	None	replace
61	[BUG]  [BUGGY]  int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.computeSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	32	None	replace
62	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SECOND;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SECOND;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SECOND;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SECOND;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	39	None	replace
63	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SECOND;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	39	None	replace
64	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SECOND;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	39	None	replace
65	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND,  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND,  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND,  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SECOND;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	39	None	replace
66	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.SECOND;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.SECOND;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.SECOND;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SECOND;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	39	None	replace
67	[BUG]  [BUGGY]  int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.SECOND;  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.SECOND;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.SECOND;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SECOND;    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	39	None	replace
68	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
69	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
70	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  |  HelperCodeCost.DEFAULT_SYNTHETIC;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  |  HelperCodeCost.DEFAULT_SYNTHETIC;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  |  HelperCodeCost.DEFAULT_SYNTHETIC;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
71	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  |  HelperCodeCost.DEFAULT_SYNTHETIC;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  |  HelperCodeCost.DEFAULT_SYNTHETIC;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  |  HelperCodeCost.DEFAULT_SYNTHETIC;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
72	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
73	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  helperCodeCost;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
74	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  reduction);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
75	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(reduction);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(reduction);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
76	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(reduction,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(reduction,  helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
77	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  reducer);  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  reducer);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
78	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCode,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCode,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(helperCode,  reduction);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	50	None	replace
79	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(root,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(root,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(root,  helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
80	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCode);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(helperCode);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
81	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	43	None	replace
82	[BUG]  [BUGGY]  int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.size();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.size();    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	43	None	replace
83	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size()  +  HelperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size()  +  HelperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size()  +  HelperCode.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	43	None	replace
84	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  helperCode.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	26	None	replace
85	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	58	None	replace
86	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCode.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	58	None	replace
87	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.size()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.size()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.size()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	58	None	replace
88	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	58	None	replace
89	[BUG]  [BUGGY]  int  savings  =  helperCodeCost.getSavings()  -  InlineCostEstimator.getSavings();  [CE]  int  cannot  be  dereferenced  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helperCodeCost.getSavings()  -  InlineCostEstimator.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helperCodeCost.getSavings()  -  InlineCostEstimator.getSavings();	  int    savings    =    InlineCostEstimator.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
90	[BUG]  [BUGGY]  int  savings  =  helperCode.getSavings()  -  InlineCostEstimator.getSavings();  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helperCode.getSavings()  -  InlineCostEstimator.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helperCode.getSavings()  -  InlineCostEstimator.getSavings();	  int    savings    =    InlineCostEstimator.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
91	[BUG]  [BUGGY]  int  savings  =  HelperCode.getSavings()  -  InlineCostEstimator.getSavings();  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  HelperCode.getSavings()  -  InlineCostEstimator.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  HelperCode.getSavings()  -  InlineCostEstimator.getSavings();	  int    savings    =    InlineCostEstimator.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol  HelperCode	21	None	replace
92	[BUG]  [BUGGY]  int  savings  =  helperCodeCost.getSavings()  -  InlineCostEstimator;  [CE]  int  cannot  be  dereferenced  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helperCodeCost.getSavings()  -  InlineCostEstimator;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helperCodeCost.getSavings()  -  InlineCostEstimator;	  int    savings    =    InlineCostEstimator.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  int  cannot  be  dereferenced	21	None	replace
93	[BUG]  [BUGGY]  int  savings  =  HelperCodeCost.getSavings()  -  InlineCostEstimator.getSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  HelperCodeCost.getSavings()  -  InlineCostEstimator.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  HelperCodeCost.getSavings()  -  InlineCostEstimator.getSavings();	  int    savings    =    InlineCostEstimator.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	21	None	replace
94	[BUG]  [BUGGY]  int  savings  =  HelperCodeCostEstimator.getSavings()  -  InlineCostEstimator.getSavings();  [CE]  cannot  find  symbol  HelperCodeCostEstimator  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  HelperCodeCostEstimator.getSavings()  -  InlineCostEstimator.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  HelperCodeCostEstimator.getSavings()  -  InlineCostEstimator.getSavings();	  int    savings    =    InlineCostEstimator.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCostEstimator	21	None	replace
95	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  contributingRoot.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  contributingRoot.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  contributingRoot.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	28	None	replace
96	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.estimateSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.estimateSavings()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.estimateSavings()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	28	None	replace
97	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helpingRoot.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helpingRoot.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  helpingRoot.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	28	None	replace
98	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingRoot.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingRoot.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helpingRoot.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	28	None	replace
99	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	1	None	replace
100	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	1	None	replace
101	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	1	None	replace
102	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	1	None	replace
103	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost.getSavings());  [CE]  int  cannot  be  dereferenced  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost.getSavings());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(helperCodeCost.getSavings());	  int    savings    =    InlineCostEstimator.findSavings(reduction.getSavings());    	non-compiled	[CE]  int  cannot  be  dereferenced	65	None	replace
104	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  helperCodeCost);	  int    savings    =    InlineCostEstimator.findSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
105	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  aiderCodeCost);	  int    savings    =    InlineCostEstimator.findSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
106	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  reduction);	  int    savings    =    InlineCostEstimator.findSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
107	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  reducerCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  reducerCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  reducerCodeCost);	  int    savings    =    InlineCostEstimator.findSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
108	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  saverCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  saverCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  saverCodeCost);	  int    savings    =    InlineCostEstimator.findSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
109	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.computeSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	73	None	replace
110	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	73	None	replace
111	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	73	None	replace
112	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	73	None	replace
113	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCode.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCode.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCode.computeSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	73	None	replace
114	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings()  +  1;	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	73	None	replace
115	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCode.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCode.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCode.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	33	None	replace
116	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings()  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
117	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
118	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSuccess();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSuccess();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSuccess();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
119	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSuccess();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSuccess();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSuccess();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
120	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  1  :  HelperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  1  :  HelperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  1  :  HelperCode.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
121	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducerCodeCost,    helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)	46	None	replace
122	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  SAVINGS_THRESHOLD,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  SAVINGS_THRESHOLD,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  SAVINGS_THRESHOLD,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducerCodeCost,    helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,int)	46	None	replace
123	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  helperCodeCost);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducerCodeCost,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	46	None	replace
124	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  saverCodeCost);  [CE]  cannot  find  symbol  saverCodeCost  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  saverCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  saverCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducerCodeCost,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	46	None	replace
125	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducerCodeCost,    helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,int)	46	None	replace
126	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  saverCodeCost,  helperCodeCost);  [CE]  cannot  find  symbol  saverCodeCost  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  saverCodeCost,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  saverCodeCost,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducerCodeCost,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saverCodeCost	46	None	replace
127	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
128	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
129	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.DEFAULT_THRESHOLD;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.DEFAULT_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.DEFAULT_THRESHOLD;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
130	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.getType();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.getType();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.getType();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
131	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT_THRESHOLD;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT_THRESHOLD;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
132	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reduction);  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reduction);	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  ';'  expected	22	None	replace
133	[BUG]  [BUGGY]  int  savings  =  helperCodeCost.getSavings(),  InlineCostEstimator.getSavings();  [CE]  ';'  expected  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helperCodeCost.getSavings(),  InlineCostEstimator.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helperCodeCost.getSavings(),  InlineCostEstimator.getSavings();	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  ';'  expected	22	None	replace
134	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  reducerCodeCost;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  reducerCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  reducerCodeCost;	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
135	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  reduction;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  reduction;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  reduction;	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
136	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reduction;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reduction;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reduction;	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
137	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helpingRoot;  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helpingRoot;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  helpingRoot;	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
138	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reducer);  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reducer);	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  ';'  expected	22	None	replace
139	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
140	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
141	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.size();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
142	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.getType();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.getType();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.getType();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
143	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.size();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
144	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.getType();  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.getType();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.getType();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	57	None	replace
145	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	57	None	replace
146	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCodeCost.DEFAULT_THRESHOLD;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCodeCost.DEFAULT_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCodeCost.DEFAULT_THRESHOLD;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	57	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Reducer)  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Reducer)	7	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer)  [FE]                                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  externs,  reducer);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer)	7	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,int)  [FE]                                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer,int)	7	None	replace
150	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  reducer);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  reducer);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	7	None	replace
151	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reducer);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	7	None	replace
152	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  HelperReducer.class,  reducer);  [CE]  cannot  find  symbol  [FE]                                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  HelperReducer.class,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  HelperReducer.class,  reducer);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  cannot  find  symbol	7	None	replace
153	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSeparator();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSeparator();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSeparator();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSeparator();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	52	None	replace
154	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.estimateSeparator();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.estimateSeparator();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.estimateSeparator();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSeparator();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	52	None	replace
155	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSeparator();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSeparator();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSeparator();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSeparator();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	52	None	replace
156	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSeparator();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSeparator();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSeparator();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSeparator();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	52	None	replace
157	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSeparator();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSeparator();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSeparator();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSeparator();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	52	None	replace
158	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size()  +  1;	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	48	None	replace
159	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCode.size();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	48	None	replace
160	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size()  +  1;	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	48	None	replace
161	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingRoot.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingRoot.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helpingRoot.size();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	48	None	replace
162	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helperCode.size();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	48	None	replace
163	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodecost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodecost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodecost.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size()    +    1;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	13	None	replace
164	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	72	None	replace
165	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCode.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCode.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCode.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	72	None	replace
166	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  contributingRoot.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  contributingRoot.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  contributingRoot.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	72	None	replace
167	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
168	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
169	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings()  +  1;	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
170	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
171	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
172	[BUG]  [BUGGY]  int  savings  =  reduction.getSavings();  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  reduction.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  reduction.getSavings();	  int    savings    =    helperCodeCost.getSavings();    	non-compiled	[CE]  cannot  find  symbol  reduction	24	None	replace
173	[BUG]  [BUGGY]  int  savings  =  helperCodeCost.getSavings()  -  SAVINGS_THRESHOLD;  [CE]  int  cannot  be  dereferenced  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helperCodeCost.getSavings()  -  SAVINGS_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helperCodeCost.getSavings()  -  SAVINGS_THRESHOLD;	  int    savings    =    helperCodeCost.getSavings();    	non-compiled	[CE]  int  cannot  be  dereferenced	24	None	replace
174	[BUG]  [BUGGY]  int  savings  =  helperCodeCost.getSavings()  /  SAVINGS_THRESHOLD;  [CE]  int  cannot  be  dereferenced  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helperCodeCost.getSavings()  /  SAVINGS_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helperCodeCost.getSavings()  /  SAVINGS_THRESHOLD;	  int    savings    =    helperCodeCost.getSavings();    	non-compiled	[CE]  int  cannot  be  dereferenced	24	None	replace
175	[BUG]  [BUGGY]  int  savings  =  reducer.getSavings();  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  reducer.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  reducer.getSavings();	  int    savings    =    helperCodeCost.getSavings();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
176	[BUG]  [BUGGY]  int  savings  =  reductions.getSavings();  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  reductions.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  reductions.getSavings();	  int    savings    =    helperCodeCost.getSavings();    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
177	[BUG]  [BUGGY]  int  savings  =  helpingRoot.getSavings();  [CE]  cannot  find  symbol  helpingRoot  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helpingRoot.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helpingRoot.getSavings();	  int    savings    =    helperCodeCost.getSavings();    	non-compiled	[CE]  cannot  find  symbol  helpingRoot	24	None	replace
178	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reducerCodeCost;  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reducerCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reducerCodeCost;	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost;    	non-compiled	[CE]  ')'  expected	51	None	replace
179	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reducerCodeCost,  helperCodeCost);  [CE]  cannot  find  symbol  reducerCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reducerCodeCost,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reducerCodeCost,  helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol  reducerCodeCost	51	None	replace
180	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCode.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	27	None	replace
181	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSeparators();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSeparators();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSeparators();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	27	None	replace
182	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_EXPR_RESULT;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_EXPR_RESULT;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_EXPR_RESULT;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	38	None	replace
183	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE,  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE,  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE,  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	38	None	replace
184	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodecost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodecost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCodecost.size();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.size()    +    1;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	19	None	replace
185	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  reduction);	  int    savings    =    InlineCostEstimator.findSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
186	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  reducer);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  reducer);	  int    savings    =    InlineCostEstimator.findSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
187	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(root,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(root,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(root,  helperCodeCost);	  int    savings    =    InlineCostEstimator.findSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
188	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(reduction,  helperCodeCost);	  int    savings    =    InlineCostEstimator.findSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
189	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reducerCodeCost);  [CE]  cannot  find  symbol  reducerCodeCost  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reducerCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(reducerCodeCost);	  int    savings    =    InlineCostEstimator.findSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducerCodeCost	49	None	replace
190	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCode,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCode,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(helperCode,  reduction);	  int    savings    =    InlineCostEstimator.findSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	49	None	replace
191	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  1  :  helperCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  1  :  helperCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  1  :  helperCodeCost.size();	  int    savings    =(helperCodeCost    ==    null)?    1    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	15	None	replace
192	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  helperCode.size();	  int    savings    =(helperCodeCost    ==    null)?    1    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	15	None	replace
193	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.size()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.size()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.size()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    1    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	15	None	replace
194	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  1  :  helperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  1  :  helperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  1  :  helperCode.size();	  int    savings    =(helperCodeCost    ==    null)?    1    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	15	None	replace
195	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavings(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
196	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  reduction);	  int    savings    =    InlineCostEstimator.getSavings(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
197	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(root.getParent());  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(root.getParent());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(root.getParent());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol	64	None	replace
198	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getNext());  [CE]  cannot  find  symbol  reduction  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getNext());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getNext());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
199	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost.getParent());  [CE]  int  cannot  be  dereferenced  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost.getParent());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost.getParent());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getParent());    	non-compiled	[CE]  int  cannot  be  dereferenced	64	None	replace
200	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  aiderCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  aiderCodeCost);	  int    savings    =    InlineCostEstimator.getSavings(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
201	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter,int)  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  this,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter,int)	6	None	replace
202	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,FunctionRewriter)  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  this);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,FunctionRewriter)	6	None	replace
203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  this);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  this);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	6	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,FunctionRewriter)  [FE]                                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  this);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  null,  this);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,FunctionRewriter)	6	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,int)  [FE]                                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  null,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,<null>,int)	6	None	replace
206	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  this,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	6	None	replace
207	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.size()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.size()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.size()  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCode.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	14	None	replace
208	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  helperCode);  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  helperCode);	  int    savings    =    InlineCostEstimator.getSavings(helperCode);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
209	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction,  helperCode);  [CE]  cannot  find  symbol  reduction  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction,  helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction,  helperCode);	  int    savings    =    InlineCostEstimator.getSavings(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reduction	25	None	replace
210	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(root,  helperCode);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(root,  helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(root,  helperCode);	  int    savings    =    InlineCostEstimator.getSavings(helperCode);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
211	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helpingRoot.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helpingRoot.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  helpingRoot.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	35	None	replace
212	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	35	None	replace
213	[BUG]  [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root,  helperCodeCost);  [CE]  cannot  find  symbol  savings  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saverCodeCost  =  InlineCostEstimator.getCost(root,  helperCodeCost);	  int    saverCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  savings	3	None	replace
214	[BUG]  [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root);  [CE]  cannot  find  symbol  savings  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saverCodeCost  =  InlineCostEstimator.getCost(root);	  int    saverCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  savings	3	None	replace
215	[BUG]  [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root,  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saverCodeCost  =  InlineCostEstimator.getCost(root,  aiderCodeCost);	  int    saverCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	3	None	replace
216	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCodeCost);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  helperCodeCost);	  int    saverCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	3	None	replace
217	[BUG]  [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root,  HelperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saverCodeCost  =  InlineCostEstimator.getCost(root,  HelperCodeCost);	  int    saverCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	3	None	replace
218	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings()  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	41	None	replace
219	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  1  :  HelperCode.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  1  :  HelperCode.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  1  :  HelperCode.computeSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	41	None	replace
220	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.intValue();  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.intValue();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.intValue();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.intValue();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	37	None	replace
221	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.intValue();  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.intValue();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.intValue();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.intValue();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	37	None	replace
222	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.intValue();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.intValue();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.intValue();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.intValue();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	37	None	replace
223	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.longValue();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.longValue();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.longValue();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.intValue();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	37	None	replace
224	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.doubleValue();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.doubleValue();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.doubleValue();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.intValue();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	37	None	replace
225	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	68	None	replace
226	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	68	None	replace
227	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	68	None	replace
228	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCodeCost.DEFAULT;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCodeCost.DEFAULT;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  HelperCodeCost.DEFAULT;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	68	None	replace
229	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	68	None	replace
230	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SECOND;  [CE]  incomparable  types:  int  and  <null>  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SECOND;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SECOND;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	68	None	replace
231	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Collection<FunctionRewriter.Reduction>)  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Collection<FunctionRewriter.Reduction>)	2	None	replace
232	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Reducer>,int)  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Reducer>,int)	2	None	replace
233	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reductions);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	2	None	replace
234	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	2	None	replace
235	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	2	None	replace
236	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HelperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  HelperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	2	None	replace
237	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reductionCost);  [CE]  cannot  find  symbol  reductionCost  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reductionCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reductionCost);	  int    savings    =    InlineCostEstimator.getSavings(reduction);    	non-compiled	[CE]  cannot  find  symbol  reductionCost	62	None	replace
238	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(problemCodeCost);  [CE]  cannot  find  symbol  problemCodeCost  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(problemCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(problemCodeCost);	  int    savings    =    InlineCostEstimator.getSavings(reduction);    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	62	None	replace
239	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.getType();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.getType();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.getType();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
240	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.toString();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.toString();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.toString();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
241	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,GetterReducer)  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  new  GetterReducer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,GetterReducer)	71	None	replace
242	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  helperCodeCost);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer,int)  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer,int)	71	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  GetterReducer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  externs,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)	71	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	71	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reduction);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  reduction	71	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());  [CE]  cannot  find  symbol  reduction  [FE]                                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  reduction	71	None	replace
247	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  new  GetterReducer());  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  new  GetterReducer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	71	None	replace
248	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  helperCodeCost);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	5	None	replace
249	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
250	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  new  ReductionGatherer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	5	None	replace
251	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  new  ReductionGatherer());  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  new  ReductionGatherer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	5	None	replace
252	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  new  ReductionGatherer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  null,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	5	None	replace
253	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(helperCodeCost));  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(helperCodeCost));  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(helperCodeCost));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	5	None	replace
254	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  aiderCodeCost);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	5	None	replace
255	[BUG]  [BUGGY]  int  savings  =  helperCodeCost.getSavings()  -  1;  [CE]  int  cannot  be  dereferenced  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helperCodeCost.getSavings()  -  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helperCodeCost.getSavings()  -  1;	  int    savings    =    InlineCostEstimator.getSavings()    -    1;    	non-compiled	[CE]  int  cannot  be  dereferenced	23	None	replace
256	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings()  /  1;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings()  /  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings()  /  1;	  int    savings    =    InlineCostEstimator.getSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
257	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings()  *  1;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings()  *  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings()  *  1;	  int    savings    =    InlineCostEstimator.getSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
258	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost)-  1;  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost)-  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost)-  1;	  int    savings    =    InlineCostEstimator.getSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
259	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost  -  1);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost  -  1);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost  -  1);	  int    savings    =    InlineCostEstimator.getSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
260	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducer);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	70	None	replace
261	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	4	None	replace
262	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getType());  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getType());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getType());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	4	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducers);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,List<Reducer>)  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,List<Reducer>)	47	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducers);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Reducer>)  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  externs,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Reducer>)	47	None	replace
265	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  reducers);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  HELPER_SOURCE,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	47	None	replace
266	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  reducers);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Reducer>)  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  externs,  root,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  externs,  root,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Node,List<Reducer>)	47	None	replace
267	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSuccess();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSuccess();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSuccess();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	61	None	replace
268	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.length;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	17	None	replace
269	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.length;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	17	None	replace
270	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSuccess();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSuccess();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSuccess();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSuccess();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	29	None	replace
271	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSuccess();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSuccess();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSuccess();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSuccess();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	29	None	replace
272	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSuccess()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSuccess()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSuccess()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSuccess();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	29	None	replace
273	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.estimateSuccess();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.estimateSuccess();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.estimateSuccess();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSuccess();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	29	None	replace
274	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.length;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.length;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.length;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	67	None	replace
275	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	67	None	replace
276	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
277	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
278	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  helperCodeCost.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
279	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  HelperCodeCost.METHOD_NAME;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  HelperCodeCost.METHOD_NAME;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  HelperCodeCost.METHOD_NAME;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
280	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SOURCE;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SOURCE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SOURCE;	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
281	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT_SOURCE;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT_SOURCE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.DEFAULT_SOURCE;	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
282	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_RESULT;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_RESULT;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_RESULT;	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	66	None	replace
283	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings()  -  2;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings()  -  2;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings()  -  2;	  int    savings    =    InlineCostEstimator.getSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
284	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reducerCode);  [CE]  cannot  find  symbol  reducerCode  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reducerCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reducerCode);	  int    savings    =    InlineCostEstimator.getSavings(helperCode);    	non-compiled	[CE]  cannot  find  symbol  reducerCode	25	None	replace
285	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(parent,  helperCode);  [CE]  cannot  find  symbol  parent  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(parent,  helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(parent,  helperCode);	  int    savings    =    InlineCostEstimator.getSavings(helperCode);    	non-compiled	[CE]  cannot  find  symbol  parent	25	None	replace
286	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(null,  helperCode);  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(null,  helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(null,  helperCode);	  int    savings    =    InlineCostEstimator.getSavings(helperCode);    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
287	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  +  HelperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  +  HelperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  +  HelperCode.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	32	None	replace
288	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCode.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	12	None	replace
289	[BUG]  [BUGGY]  int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.computeSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.computeSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	41	None	replace
290	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(hELPER_SOURCE);  [CE]  cannot  find  symbol  hELPER_SOURCE  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(hELPER_SOURCE);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(hELPER_SOURCE);	  int    savings    =    InlineCostEstimator.getSavings(reduction);    	non-compiled	[CE]  cannot  find  symbol  hELPER_SOURCE	62	None	replace
291	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(null);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(null);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(null);	  int    savings    =    InlineCostEstimator.getSavings(reduction);    	non-compiled	[CE]  cannot  find  symbol	62	None	replace
292	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	67	None	replace
293	[BUG]  [BUGGY]  int  savings  =  HelperCodeCost.getSavings(),  InlineCostEstimator.getSavings();  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  HelperCodeCost.getSavings(),  InlineCostEstimator.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  HelperCodeCost.getSavings(),  InlineCostEstimator.getSavings();	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  ';'  expected	22	None	replace
294	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helpingCodeCost;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helpingCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  helpingCodeCost;	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
295	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reducer;  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reducer;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost,  reducer;	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
296	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost  +  1;  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost  +  1;	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  ';'  expected	22	None	replace
297	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helper);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helper);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helper);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducer);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	70	None	replace
298	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(null);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducer);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	70	None	replace
299	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
300	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  contributingRoot);  [CE]  cannot  find  symbol  contributingRoot  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  contributingRoot);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  contributingRoot);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  contributingRoot	50	None	replace
301	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(reducerCodeCost);  [CE]  cannot  find  symbol  reducerCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(reducerCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(reducerCodeCost);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducerCodeCost	50	None	replace
302	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  prevention);  [CE]  cannot  find  symbol  prevention  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  prevention);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost,  prevention);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  prevention	50	None	replace
303	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpRoot.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpRoot.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpRoot.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helpingRoot.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
304	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpRoot.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpRoot.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helpRoot.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helpingRoot.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
305	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelpRoot.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelpRoot.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelpRoot.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helpingRoot.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	10	None	replace
306	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  +  HelperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  +  HelperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  +  HelperCode.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	27	None	replace
307	[BUG]  [BUGGY]  int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	27	None	replace
308	[BUG]  [BUGGY]  int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	9	None	replace
309	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSeconds();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSeconds();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSeconds();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
310	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  Helper.estimateSeparator();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  Helper.estimateSeparator();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  Helper.estimateSeparator();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSeparator();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	52	None	replace
311	[BUG]  [BUGGY]  int  savings  =(Helper.estimateSavings  ==  null)?  0  :  Helper.estimateSavings();  [CE]  cannot  find  symbol  Helper  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(Helper.estimateSavings  ==  null)?  0  :  Helper.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(Helper.estimateSavings  ==  null)?  0  :  Helper.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  Helper	40	None	replace
312	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  Helper.estimateSavings()  :  Helper.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  Helper.estimateSavings()  :  Helper.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  Helper.estimateSavings()  :  Helper.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	40	None	replace
313	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(problemCodeCost.getSavings());  [CE]  cannot  find  symbol  problemCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(problemCodeCost.getSavings());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(problemCodeCost.getSavings());	  int    savings    =    InlineCostEstimator.findSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	65	None	replace
314	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
315	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
316	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT_SIZE  :  HelperCodeCost.DEFAULT_SIZE;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT_SIZE  :  HelperCodeCost.DEFAULT_SIZE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT_SIZE  :  HelperCodeCost.DEFAULT_SIZE;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
317	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
318	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  HelperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  HelperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  HelperCode.size();	  int    saving    =(helperCodeCost!=    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	44	None	replace
319	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCode.size();	  int    saving    =(helperCodeCost!=    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	44	None	replace
320	[BUG]  [BUGGY]  int  save  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  save  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  save  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size();	  int    saving    =(helperCodeCost!=    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	44	None	replace
321	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  aiderCodeCost.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  aiderCodeCost.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  aiderCodeCost.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSavings()    +    1;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	11	None	replace
322	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.size();	  int    savings    =(helperCodeCost    ==    null)?    1    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	15	None	replace
323	[BUG]  [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reducer);  [CE]  no  suitable  method  found  for  getCost(int,Reducer)  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saverCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reducer);	  int    saverCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(int,Reducer)	3	None	replace
324	[BUG]  [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saverCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);	  int    saverCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	3	None	replace
325	[BUG]  [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root,  helperCode);  [CE]  no  suitable  method  found  for  getCost(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root,  helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saverCodeCost  =  InlineCostEstimator.getCost(root,  helperCode);	  int    saverCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(Node,Node)	3	None	replace
326	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpRoot.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpRoot.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpRoot.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	35	None	replace
327	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpRoot.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpRoot.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helpRoot.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	35	None	replace
328	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelpRoot.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelpRoot.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelpRoot.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	35	None	replace
329	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelpRoot.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelpRoot.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelpRoot.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	35	None	replace
330	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	38	None	replace
331	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_OVERRIDE;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_OVERRIDE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_OVERRIDE;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	38	None	replace
332	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_DELAYED;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_DELAYED;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_DELAYED;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	38	None	replace
333	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
334	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSevings();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSevings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSevings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
335	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSevings();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSevings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSevings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
336	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  HelperCode.INHERITED  :  HelperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  HelperCode.INHERITED  :  HelperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  HelperCode.INHERITED  :  HelperCode.size();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	42	None	replace
337	[BUG]  [BUGGY]  int  savings  =  this.helperCodeCost.getSavings();  [CE]  cannot  find  symbol  helperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  this.helperCodeCost.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  this.helperCodeCost.getSavings();	  int    savings    =    helperCodeCost.getSavings();    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	24	None	replace
338	[BUG]  [BUGGY]  int  savings  =  HelperCodeCost.getSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  HelperCodeCost.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  HelperCodeCost.getSavings();	  int    savings    =    helperCodeCost.getSavings();    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	24	None	replace
339	[BUG]  [BUGGY]  int  savings  =  helping.getSavings();  [CE]  cannot  find  symbol  helping  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helping.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helping.getSavings();	  int    savings    =    helperCodeCost.getSavings();    	non-compiled	[CE]  cannot  find  symbol  helping	24	None	replace
340	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(problemCodeCost.getSavings());  [CE]  cannot  find  symbol  problemCodeCost  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(problemCodeCost.getSavings());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(problemCodeCost.getSavings());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  problemCodeCost	63	None	replace
341	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(compiler.getSavings());  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(compiler.getSavings());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(compiler.getSavings());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol	63	None	replace
342	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(buffer.getSavings());  [CE]  cannot  find  symbol  buffer  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(buffer.getSavings());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(buffer.getSavings());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  buffer	63	None	replace
343	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	5	None	replace
344	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducerCodeCost);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducerCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducerCodeCost);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	5	None	replace
345	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(parent.getParent());  [CE]  cannot  find  symbol  parent  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(parent.getParent());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(parent.getParent());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  parent	64	None	replace
346	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(deduction.getParent());  [CE]  cannot  find  symbol  deduction  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(deduction.getParent());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(deduction.getParent());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  deduction	64	None	replace
347	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  HelperReducer.class);  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  HelperReducer.class);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  HelperReducer.class);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
348	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helpingRoot.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helpingRoot.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helpingRoot.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	28	None	replace
349	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SECOND  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SECOND  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SECOND  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SECOND;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	39	None	replace
350	[BUG]  [BUGGY]  int  savings  =(HelperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings();  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings()    +    1;    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	30	None	replace
351	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  HelperCodeCost.DEFAULT_SIZE;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  HelperCodeCost.DEFAULT_SIZE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  HelperCodeCost.DEFAULT_SIZE;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
352	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  helperCodeCost.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
353	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	73	None	replace
354	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  Helper.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  Helper.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  Helper.computeSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	73	None	replace
355	[BUG]  [BUGGY]  int  save  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  save  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  save  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	48	None	replace
356	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getCost(helperCodeCost,  reducer);  [CE]  no  suitable  method  found  for  getCost(int,Reducer)  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getCost(helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getCost(helperCodeCost,  reducer);	  int    savings    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  no  suitable  method  found  for  getCost(int,Reducer)	69	None	replace
357	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getCost(reducerCodeCost);  [CE]  cannot  find  symbol  reducerCodeCost  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getCost(reducerCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getCost(reducerCodeCost);	  int    savings    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducerCodeCost	69	None	replace
358	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(helperCode);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(helperCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	4	None	replace
359	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  +  Helper.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  +  Helper.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  +  Helper.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	34	None	replace
360	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  Helper.computeSavings()  +  Helper.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  Helper.computeSavings()  +  Helper.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  Helper.computeSavings()  +  Helper.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	34	None	replace
361	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reducer);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	1	None	replace
362	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(parent);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	1	None	replace
363	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	72	None	replace
364	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost  +  1);  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost  +  1);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost  +  1);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
365	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  0);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  0);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  0);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
366	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer,Reducer)  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducer);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer,Reducer)	71	None	replace
367	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  aiderCodeCost);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  aiderCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	2	None	replace
368	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCodeCost,  reductions);  [CE]  cannot  find  symbol  reducerCodeCost  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCodeCost,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reducerCodeCost,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  reducerCodeCost	2	None	replace
369	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reducers);  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	47	None	replace
370	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  helperCodeCost;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
371	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT_SYNTHETIC  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT_SYNTHETIC  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT_SYNTHETIC  :  HelperCodeCost.DEFAULT_SYNTHETIC;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
372	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  HelperCodeCost.DEFAULT_SYNTHETIC;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  HelperCodeCost.DEFAULT_SYNTHETIC;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC  +  HelperCodeCost.DEFAULT_SYNTHETIC;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
373	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.intValue();  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.intValue();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.intValue();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.intValue();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	37	None	replace
374	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.intValue();  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.intValue();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.intValue();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.intValue();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	37	None	replace
375	[BUG]  [BUGGY]  int  savings  =  HelperCodeUtil.getSavings()  -  InlineCostEstimator.getSavings();  [CE]  cannot  find  symbol  HelperCodeUtil  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  HelperCodeUtil.getSavings()  -  InlineCostEstimator.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  HelperCodeUtil.getSavings()  -  InlineCostEstimator.getSavings();	  int    savings    =    InlineCostEstimator.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol  HelperCodeUtil	21	None	replace
376	[BUG]  [BUGGY]  int  savings  =  helperCode.getSavings()  -  InlineCostEstimator;  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helperCode.getSavings()  -  InlineCostEstimator;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helperCode.getSavings()  -  InlineCostEstimator;	  int    savings    =    InlineCostEstimator.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
377	[BUG]  [BUGGY]  int  savings  =  HelperCodeCost.getSavings()  -  InlineCostEstimator;  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  HelperCodeCost.getSavings()  -  InlineCostEstimator;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  HelperCodeCost.getSavings()  -  InlineCostEstimator;	  int    savings    =    InlineCostEstimator.getSavings()    -    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	21	None	replace
378	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	68	None	replace
379	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT  +  HelperCodeCost.METHOD_NAME;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT  +  HelperCodeCost.METHOD_NAME;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT  +  HelperCodeCost.METHOD_NAME;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	68	None	replace
380	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	58	None	replace
381	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SIZE.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SIZE.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SIZE.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	58	None	replace
382	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	61	None	replace
383	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  helperCodeCost);	  int    savings    =    InlineCostEstimator.findSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
384	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  réduir);  [CE]  cannot  find  symbol  r  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  réduir);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  réduir);	  int    savings    =    InlineCostEstimator.findSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  r	49	None	replace
385	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  decreasing);  [CE]  cannot  find  symbol  decreasing  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  decreasing);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(helperCodeCost,  decreasing);	  int    savings    =    InlineCostEstimator.findSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  decreasing	49	None	replace
386	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  helperCodeCost);  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
387	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  saver);  [CE]  cannot  find  symbol  saver  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  saver);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  saver);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  saver	20	None	replace
388	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  prevention);  [CE]  cannot  find  symbol  prevention  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  prevention);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost,  prevention);	  int    savings    =    InlineCostEstimator.getSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  prevention	20	None	replace
389	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT;  [CE]  cannot  find  symbol  helperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT;    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	68	None	replace
390	[BUG]  [BUGGY]  int  savings  =(HelperCodeCost  <  null)?  0  :  HelperCodeCost.DEFAULT;  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCodeCost  <  null)?  0  :  HelperCodeCost.DEFAULT;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCodeCost  <  null)?  0  :  HelperCodeCost.DEFAULT;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT;    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	68	None	replace
391	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT  :  HelperCodeCost.SAVE;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT  :  HelperCodeCost.SAVE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT  :  HelperCodeCost.SAVE;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	68	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);  [CE]  cannot  find  symbol  HELPER_SOURCE  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  cannot  find  symbol  HELPER_SOURCE	2	None	replace
393	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,<null>)  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>,<null>)	2	None	replace
394	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root,  HelperCode.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperCode  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getCost(root,  HelperCode.HELPER_SOURCE);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getCost(root,  HelperCode.HELPER_SOURCE);	  int    savings    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	69	None	replace
395	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);	  int    savings    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reduction	69	None	replace
396	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings()  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings()  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings()  +  helperCodeCost;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	41	None	replace
397	[BUG]  [BUGGY]  int  savings  =  helperCode.getSavings(),  InlineCostEstimator.getSavings();  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helperCode.getSavings(),  InlineCostEstimator.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helperCode.getSavings(),  InlineCostEstimator.getSavings();	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  ';'  expected	22	None	replace
398	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  contributingRoot;  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  contributingRoot;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  contributingRoot;	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
399	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  reduction);  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  reduction);	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  ';'  expected	22	None	replace
400	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  pruningRoot;  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  pruningRoot;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  pruningRoot;	  int    savings    =    InlineCostEstimator.getSavings(),    helperCodeCost;    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
401	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducerCodeCost);  [CE]  cannot  find  symbol  reducerCodeCost  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducerCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducerCodeCost);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  reducerCodeCost	71	None	replace
402	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer,Collection<FunctionRewriter.Reduction>)  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reductions);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer,Collection<FunctionRewriter.Reduction>)	71	None	replace
403	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  aiderCode);  [CE]  cannot  find  symbol  aiderCode  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  aiderCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  aiderCode);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  cannot  find  symbol  aiderCode	71	None	replace
404	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helpingRoot.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helpingRoot.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helpingRoot.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	35	None	replace
405	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings()  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings()  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings()  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingRoot.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	35	None	replace
406	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	54	None	replace
407	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;  [CE]  cannot  find  symbol  helperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	54	None	replace
408	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCode.size();  [CE]  cannot  find  symbol  helperCodeCost  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCode.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.size();    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	43	None	replace
409	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSeparator();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSeparator();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSeparator();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSeparator();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	52	None	replace
410	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();  [CE]  cannot  find  symbol  helperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	9	None	replace
411	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode,  reduction);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode,  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reducer);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	70	None	replace
412	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  helperCode.size();  [CE]  cannot  find  symbol  helperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  helperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost  ==  null)?  0  :  helperCode.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCode.size();    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	12	None	replace
413	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCode.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCode.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	12	None	replace
414	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.computeSavings();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	73	None	replace
415	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	27	None	replace
416	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();  [CE]  cannot  find  symbol  helperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	27	None	replace
417	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  -  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  -  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings()  -  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	27	None	replace
418	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.intValue();  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.intValue();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.intValue();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.intValue();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	37	None	replace
419	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  helperCodeCost.intValue();  [CE]  cannot  find  symbol  helperCodeCost  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  helperCodeCost.intValue();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost  ==  null)?  0  :  helperCodeCost.intValue();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.intValue();    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	37	None	replace
420	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;  [CE]  cannot  find  symbol  helperCodeCost  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	53	None	replace
421	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	53	None	replace
422	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  -  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  -  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  -  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	34	None	replace
423	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  /  SAVINGS_THRESHOLD;  [CE]  incomparable  types:  int  and  <null>  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  /  SAVINGS_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings()  /  SAVINGS_THRESHOLD;	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	34	None	replace
424	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_INFINITY;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_INFINITY;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE_INFINITY;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	38	None	replace
425	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCode.SECOND;  [CE]  cannot  find  symbol  helperCodeCost  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCode.SECOND;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCode.SECOND;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.SECOND;    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	39	None	replace
426	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helpingerCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	60	None	replace
427	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  -  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  -  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  -  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
428	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  aiderCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  aiderCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  aiderCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
429	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  2;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  2;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE  +  2;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_SIZE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	56	None	replace
430	[BUG]  [BUGGY]  int  savings  =(HelperCode.SOURCE!=  null)?  0  :  HelperCode.SOURCE;  [CE]  cannot  find  symbol  HelperCode  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCode.SOURCE!=  null)?  0  :  HelperCode.SOURCE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCode.SOURCE!=  null)?  0  :  HelperCode.SOURCE;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  cannot  find  symbol  HelperCode	18	None	replace
431	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SOURCE  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SOURCE  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SOURCE  +  helperCodeCost;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.SOURCE;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	18	None	replace
432	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  helpingerCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  helpingerCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings(),  helpingerCodeCost);	  int    savings    =    InlineCostEstimator.findSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	65	None	replace
433	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  reducer);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  reducer);	  int    savings    =    InlineCostEstimator.getSavings(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
434	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  reduction.getParent());  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  reduction.getParent());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getParent(),  reduction.getParent());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  reduction	64	None	replace
435	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(rededuction.getParent());  [CE]  cannot  find  symbol  rededuction  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(rededuction.getParent());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(rededuction.getParent());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getParent());    	non-compiled	[CE]  cannot  find  symbol  rededuction	64	None	replace
436	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings()  +  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings()  +  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings()  +  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	40	None	replace
437	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings()  +  Helper.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings()  +  Helper.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings()  +  Helper.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    Helper.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	40	None	replace
438	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.estimateSavings());  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.estimateSavings());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.estimateSavings());	  int    savings    =    InlineCostEstimator.getSavings(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
439	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.applySavings());  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.applySavings());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.applySavings());	  int    savings    =    InlineCostEstimator.getSavings(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
440	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.estimateSavings);  [CE]  cannot  find  symbol  reduction  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.estimateSavings);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.estimateSavings);	  int    savings    =    InlineCostEstimator.getSavings(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
441	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.parent);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.parent);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.parent);	  int    savings    =    InlineCostEstimator.getSavings(reduction);    	non-compiled	[CE]  cannot  find  symbol  reduction	62	None	replace
442	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSavings()  +  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSavings()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	26	None	replace
443	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCode.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  aiderCode.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	26	None	replace
444	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helping.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helping.estimateSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helping.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCode.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	26	None	replace
445	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reducerCode);  [CE]  cannot  find  symbol  reducerCode  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reducerCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(reducerCode);	  int    savings    =    InlineCostEstimator.findSavings(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducerCode	49	None	replace
446	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reducerCodeCost);  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reducerCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings(),  reducerCodeCost);	  int    savings    =    InlineCostEstimator.getSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  reduction	63	None	replace
447	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(rededuction.getSavings());  [CE]  cannot  find  symbol  rededuction  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(rededuction.getSavings());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(rededuction.getSavings());	  int    savings    =    InlineCostEstimator.getSavings(reduction.getSavings());    	non-compiled	[CE]  cannot  find  symbol  rededuction	63	None	replace
448	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  -  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  -  helperCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  -  helperCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	32	None	replace
449	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  -  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  -  1;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  -  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	32	None	replace
450	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  /  SAVINGS_THRESHOLD;  [CE]  incomparable  types:  int  and  <null>  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  /  SAVINGS_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings()  /  SAVINGS_THRESHOLD;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	32	None	replace
451	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateReductions();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateReductions();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateReductions();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	59	None	replace
452	[BUG]  [BUGGY]  int  saving  =(this.helperCodeCost  ==  null)?  0  :  helperCodeCost.size();  [CE]  cannot  find  symbol  helperCodeCost  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(this.helperCodeCost  ==  null)?  0  :  helperCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(this.helperCodeCost  ==  null)?  0  :  helperCodeCost.size();	  int    saving    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	48	None	replace
453	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.size();	  int    saving    =(helperCodeCost!=    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	44	None	replace
454	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSuccess();  [CE]  cannot  find  symbol  helperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSuccess();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSuccess();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSuccess();    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	29	None	replace
455	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCode.size();  [CE]  cannot  find  symbol  helperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCode.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCode.size();	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCode.size();    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	42	None	replace
456	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  suppression,  helperCodeCost);  [CE]  cannot  find  symbol  suppression  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  suppression,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  suppression,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducerCodeCost,    helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  suppression	46	None	replace
457	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reduction);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reduction);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reduction);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	5	None	replace
458	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reduction));  [CE]  cannot  find  symbol  reduction  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reduction));  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(reduction));	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  cannot  find  symbol  reduction	5	None	replace
459	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reductions);  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reductions);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	5	None	replace
460	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helpingerCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	67	None	replace
461	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helping.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helping.computeSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helping.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCode.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	33	None	replace
462	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	55	None	replace
463	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [CE]  cannot  find  symbol  helperCodeCost  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	55	None	replace
464	[BUG]  [BUGGY]  int  savings  =(HelperCodeCost  <  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(HelperCodeCost  <  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(HelperCodeCost  <  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;	  int    savings    =(helperCodeCost!=    null)?    0    :    HelperCodeCost.DEFAULT_SYNTHETIC;    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	55	None	replace
465	[BUG]  [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.HELPER_SOURCE);  [CE]  cannot  find  symbol  HelperCode  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.HELPER_SOURCE);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saverCodeCost  =  InlineCostEstimator.getCost(root,  HelperCode.HELPER_SOURCE);	  int    saverCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  HelperCode	3	None	replace
466	[BUG]  [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(reducerCode,  helperCodeCost);  [CE]  cannot  find  symbol  reducerCode  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(reducerCode,  helperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saverCodeCost  =  InlineCostEstimator.getCost(reducerCode,  helperCodeCost);	  int    saverCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducerCode	3	None	replace
467	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	4	None	replace
468	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getFirstChild());  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getFirstChild());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getFirstChild());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	4	None	replace
469	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLastChild());  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLastChild());  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLastChild());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	4	None	replace
470	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	4	None	replace
471	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helpingerCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helpingerCodeCost.size();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  helpingerCodeCost.size();	  int    savings    =(helperCodeCost    ==    null)?    1    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	15	None	replace
472	[BUG]  [BUGGY]  int  helperCodeCost  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length;  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.length;    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	17	None	replace
473	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  SAVINGS_THRESHOLD,  reducers);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,List<Reducer>)  [FE]                            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  SAVINGS_THRESHOLD,  reducers);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  SAVINGS_THRESHOLD,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,List<Reducer>)	47	None	replace
474	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  SAVINGS_THRESHOLD,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Reducer)  [FE]                              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  SAVINGS_THRESHOLD,  reducer);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  SAVINGS_THRESHOLD,  reducer);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,int,Reducer)	47	None	replace
475	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  HelperCodeCost);  [CE]  cannot  find  symbol  HelperCodeCost  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  HelperCodeCost);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  HelperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  cannot  find  symbol  HelperCodeCost	7	None	replace
476	[BUG]  [BUGGY]  int  savings  =  helpingerCodeCost.getSavings();  [CE]  cannot  find  symbol  helpingerCodeCost  [FE]                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  helpingerCodeCost.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helpingerCodeCost.getSavings();	  int    savings    =    helperCodeCost.getSavings();    	non-compiled	[CE]  cannot  find  symbol  helpingerCodeCost	24	None	replace
477	[BUG]  [BUGGY]  int  savings  =  pruning.getSavings();  [CE]  cannot  find  symbol  pruning  [FE]                      IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  pruning.getSavings();  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  pruning.getSavings();	  int    savings    =    helperCodeCost.getSavings();    	non-compiled	[CE]  cannot  find  symbol  pruning	24	None	replace
478	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter,Collection<FunctionRewriter.Reduction>)  [FE]                                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  reductions);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  this,  reductions);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter,Collection<FunctionRewriter.Reduction>)	6	None	replace
479	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  null);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter,<null>)  [FE]                                    IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  null);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  this,  null);	  NodeTraversal.traverse(compiler,    root,    this);    	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter,<null>)	6	None	replace
480	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(reducerCode);  [CE]  cannot  find  symbol  reducerCode  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(reducerCode);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(reducerCode);	  int    savings    =    InlineCostEstimator.getSavingsReduction(helperCodeCost);    	non-compiled	[CE]  cannot  find  symbol  reducerCode	50	None	replace
481	[BUG]  [BUGGY]  int  helperCodeCost  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length;  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  helperCodeCost  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.length;    	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	16	None	replace
482	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings()  -  1);  [CE]  cannot  find  symbol  reduction  [FE]                  IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings()  -  1);  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings()  -  1);	  int    savings    =    InlineCostEstimator.getSavings()    -    1;    	non-compiled	[CE]  cannot  find  symbol  reduction	23	None	replace
483	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT_THRESHOLD  :  HelperCodeCost.DEFAULT_SOURCE;  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT_THRESHOLD  :  HelperCodeCost.DEFAULT_SOURCE;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  HelperCodeCost.DEFAULT_THRESHOLD  :  HelperCodeCost.DEFAULT_SOURCE;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	57	None	replace
484	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  SAVINGS_THRESHOLD;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  SAVINGS_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD  +  SAVINGS_THRESHOLD;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	57	None	replace
485	[BUG]  [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;  [CE]  cannot  find  symbol  helperCodeCost  [FE]                IllegalStateException      [CONTEXT]      }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);        [BUGGY]  int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;  [BUGGY]      for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(this.helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;	  int    savings    =(helperCodeCost    ==    null)?    0    :    HelperCodeCost.DEFAULT_THRESHOLD;    	non-compiled	[CE]  cannot  find  symbol  helperCodeCost	57	None	replace
