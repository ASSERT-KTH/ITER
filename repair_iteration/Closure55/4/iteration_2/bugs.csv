bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                    IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	      	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	7	None	replace
2	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)  [FE]                      IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reductions);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Collection<FunctionRewriter.Reduction>)	7	None	replace
3	[BUG]  [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  no  suitable  method  found  for  getCost(int)  [FE]                        IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  saverCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saverCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	      	non-compiled	[CE]  no  suitable  method  found  for  getCost(int)	7	None	replace
4	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                          IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	      	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	7	None	replace
5	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;  [FE]                            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer());	      	non-compiled	[CE]  constructor  ReductionGatherer  in  class  FunctionRewriter.ReductionGatherer  cannot  be  applied  to  given  types;	7	None	replace
6	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter)  [FE]                              IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  this);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,FunctionRewriter)	7	None	replace
7	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer)  [FE]                                IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reducer);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,Reducer)	7	None	replace
8	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.estimateSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
9	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
10	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingRoot.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingRoot.estimateSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helpingRoot.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
11	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSavings()  +  1;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSavings()  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
12	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.size();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	4	None	replace
13	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size()  +  1;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	4	None	replace
14	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.size();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCode.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	4	None	replace
15	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.size();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  1  :  helperCodeCost.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	4	None	replace
16	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length;  [CE]  incomparable  types:  int  and  <null>  [FE]          IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.length;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
17	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length;  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.length;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
18	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SOURCE;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SOURCE;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.SOURCE;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
19	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size()  +  1;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size()  +  1;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
20	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
21	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings()  -  helperCodeCost;  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.getSavings()  -  helperCodeCost;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings()  -  helperCodeCost;	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
22	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost;  [CE]  cannot  find  symbol  [FE]            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(),  helperCodeCost;	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
23	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings()  -  1;  [CE]  cannot  find  symbol  [FE]              IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.getSavings()  -  1;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings()  -  1;	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
24	[BUG]  [BUGGY]  int  savings  =  helperCodeCost.getSavings();  [CE]  int  cannot  be  dereferenced  [FE]                IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  helperCodeCost.getSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  helperCodeCost.getSavings();	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  int  cannot  be  dereferenced	1	None	replace
25	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCode);  [CE]  cannot  find  symbol  [FE]                  IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCode);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCode);	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
26	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]          IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
27	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
28	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.estimateSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
29	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSuccess();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSuccess();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSuccess();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
30	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings()  +  1;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
31	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.computeSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
32	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
33	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                      IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.computeSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCode.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
34	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                        IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
35	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                          IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingRoot.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
36	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings()  +  1;  [CE]  incomparable  types:  int  and  <null>  [FE]                            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings()  +  1;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings()  +  1;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
37	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.intValue();  [CE]  incomparable  types:  int  and  <null>  [FE]        IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.intValue();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.intValue();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
38	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE;  [CE]  incomparable  types:  int  and  <null>  [FE]          IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SOURCE;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
39	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND;  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.SECOND;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
40	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]          IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  Helper.estimateSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	2	None	replace
41	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
42	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.size();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCode.size();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
43	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCode.size();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
44	[BUG]  [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost!=  null)?  0  :  helperCodeCost.size();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [CE]  cannot  find  symbol  reduction  [FE]                    IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reduction);	      	non-compiled	[CE]  cannot  find  symbol  reduction	7	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCodeCost,  helperCodeCost);  [CE]  cannot  find  symbol  reducerCodeCost  [FE]                      IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducerCodeCost,  helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reducerCodeCost,  helperCodeCost);	      	non-compiled	[CE]  cannot  find  symbol  reducerCodeCost	7	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers);  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Reducer>)  [FE]                        IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  reducers);	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,List<Reducer>)	7	None	replace
48	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.size();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	4	None	replace
49	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost);  [CE]  cannot  find  symbol  [FE]        IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
50	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost);  [CE]  cannot  find  symbol  [FE]          IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavingsReduction(helperCodeCost);	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
51	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost;  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(helperCodeCost;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(helperCodeCost;	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  ')'  expected	1	None	replace
52	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSeparator();  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSeparator();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helperCodeCost.estimateSeparator();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
53	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;  [CE]  incomparable  types:  int  and  <null>  [FE]          IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
54	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
55	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  HelperCodeCost.DEFAULT_SYNTHETIC;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
56	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_SIZE;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
57	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;  [CE]  incomparable  types:  int  and  <null>  [FE]        IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT_THRESHOLD;	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	8	None	replace
58	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.size();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.size();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.size();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.size();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	5	None	replace
59	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
60	[BUG]  [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.estimateSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost!=  null)?  0  :  helpingerCodeCost.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
61	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.estimateSavings();	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost.estimateSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	3	None	replace
62	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction);  [CE]  cannot  find  symbol  reduction  [FE]        IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction);	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
63	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings());  [CE]  cannot  find  symbol  reduction  [FE]          IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings());  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getSavings());	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
64	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent());  [CE]  cannot  find  symbol  reduction  [FE]            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.getSavings(reduction.getParent());  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getSavings(reduction.getParent());	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
65	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings());  [CE]  cannot  find  symbol  reduction  [FE]              IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings());  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.findSavings(reduction.getSavings());	  int    savings    =    InlineCostEstimator.getSavings();    	non-compiled	[CE]  cannot  find  symbol  reduction	1	None	replace
66	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]          IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
67	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost;  [CE]  incomparable  types:  int  and  <null>  [FE]            IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
68	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT;  [CE]  incomparable  types:  int  and  <null>  [FE]              IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT;  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  HelperCodeCost.DEFAULT;	  int    savings    =(helperCodeCost!=    null)?    0    :    helperCodeCost;    	non-compiled	[CE]  incomparable  types:  int  and  <null>	9	None	replace
69	[BUG]  [BUGGY]  int  savings  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  no  suitable  method  found  for  getCost(int)  [FE]                    IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =  InlineCostEstimator.getCost(helperCodeCost);	      	non-compiled	[CE]  no  suitable  method  found  for  getCost(int)	7	None	replace
70	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)  [FE]                      IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);	      	non-compiled	[CE]  variable  helperCodeCost  is  already  defined  in  method  process(Node,Node)	7	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)  [FE]                        IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer());  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer());	      	non-compiled	[CE]  no  suitable  method  found  for  traverse(AbstractCompiler,Node,GetterReducer)	7	None	replace
72	[BUG]  [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                  IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.computeSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  savings  =(helperCodeCost  ==  null)?  0  :  helpingerCodeCost.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
73	[BUG]  [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings();  [CE]  incomparable  types:  int  and  <null>  [FE]                    IllegalStateException    [CONTEXT]    }  Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);      [BUGGY]  int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings();  [BUGGY]    for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	int  saving  =(helperCodeCost  ==  null)?  0  :  helperCodeCost.computeSavings();	  int    savings    =(helperCodeCost    ==    null)?    0    :    helperCodeCost.computeSavings();    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
