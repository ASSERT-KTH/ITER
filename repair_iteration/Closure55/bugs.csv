bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	failing_test_number	action	patch
1	[BUG] [BUGGY] Node helperCode = parseHelperCode(reducer); [FE] IllegalStateException [CONTEXT] NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { continue; } [BUGGY] Node helperCode = parseHelperCode(reducer); [BUGGY] if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	replace	
2	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { continue; } [BUGGY] [BUGGY] Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	78	78	1	add	
3	[BUG] [BUGGY] if (helperCode == null) { [FE] IllegalStateException [CONTEXT] new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { continue; } Node helperCode = parseHelperCode(reducer); [BUGGY] if (helperCode == null) { [BUGGY] continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	replace	
4	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { continue; } Node helperCode = parseHelperCode(reducer); [BUGGY] [BUGGY] if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	79	79	1	add	
5	[BUG] [BUGGY] int helperCodeCost = InlineCostEstimator.getCost(helperCode); [FE] IllegalStateException [CONTEXT] Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { continue; } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } [BUGGY] int helperCodeCost = InlineCostEstimator.getCost(helperCode); [BUGGY]   int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	replace	
6	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { continue; } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } [BUGGY] [BUGGY] int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	83	83	1	add	
7	[BUG] [BUGGY] int savings = 0; [FE] IllegalStateException [CONTEXT] } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  [BUGGY] int savings = 0; [BUGGY] for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	replace	
8	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  [BUGGY] [BUGGY] int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	86	86	1	add	
9	[BUG] [BUGGY] for (Reduction reduction : reductions) { [FE] IllegalStateException [CONTEXT] Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; [BUGGY] for (Reduction reduction : reductions) { [BUGGY] savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); }  [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	
10	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; [BUGGY] [BUGGY] for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); }  [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	add	
11	[BUG] [BUGGY] savings += reduction.estimateSavings(); [FE] IllegalStateException [CONTEXT] Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; for (Reduction reduction : reductions) { [BUGGY] savings += reduction.estimateSavings(); [BUGGY] }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	replace	
12	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; for (Reduction reduction : reductions) { [BUGGY] [BUGGY] savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	88	88	1	add	
13	[BUG] [BUGGY] } [FE] IllegalStateException [CONTEXT] if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); [BUGGY] } [BUGGY]    if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	
14	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); [BUGGY] [BUGGY] }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	add	
15	[BUG] [BUGGY] if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { [FE] IllegalStateException [CONTEXT] int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   [BUGGY] if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { [BUGGY] for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	replace	
16	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] int helperCodeCost = InlineCostEstimator.getCost(helperCode);  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   [BUGGY] [BUGGY] if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	93	93	1	add	
17	[BUG] [BUGGY] for (Reduction reduction : reductions) { [FE] IllegalStateException [CONTEXT]  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { [BUGGY] for (Reduction reduction : reductions) { [BUGGY] reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	
18	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT]  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { [BUGGY] [BUGGY] for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	add	
19	[BUG] [BUGGY] reduction.apply(); [FE] IllegalStateException [CONTEXT]  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { [BUGGY] reduction.apply(); [BUGGY] } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	replace	
20	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT]  int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { [BUGGY] [BUGGY] reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	95	95	1	add	
21	[BUG] [BUGGY] } [FE] IllegalStateException [CONTEXT] int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); [BUGGY] } [BUGGY]  Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	
22	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] int savings = 0; for (Reduction reduction : reductions) { savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); [BUGGY] [BUGGY] } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	add	
23	[BUG] [BUGGY] Node addingRoot = compiler.getNodeForCodeInsertion(null); [FE] IllegalStateException [CONTEXT] savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } [BUGGY] Node addingRoot = compiler.getNodeForCodeInsertion(null); [BUGGY] addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	replace	
24	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] savings += reduction.estimateSavings(); }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } [BUGGY] [BUGGY] Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	98	98	1	add	
25	[BUG] [BUGGY] addingRoot.addChildrenToFront(helperCode); [FE] IllegalStateException [CONTEXT] }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); [BUGGY] addingRoot.addChildrenToFront(helperCode); [BUGGY] compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	replace	
26	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] }   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); [BUGGY] [BUGGY] addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	99	99	1	add	
27	[BUG] [BUGGY] compiler.reportCodeChange(); [FE] IllegalStateException [CONTEXT]   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); [BUGGY] compiler.reportCodeChange(); [BUGGY] } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	replace	
28	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT]   if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); [BUGGY] [BUGGY] compiler.reportCodeChange(); } } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	100	100	1	add	
29	[BUG] [BUGGY] } [FE] IllegalStateException [CONTEXT]  if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } [BUGGY] } [BUGGY] } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	replace	
30	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT]  if (savings > (helperCodeCost + SAVINGS_THRESHOLD)) { for (Reduction reduction : reductions) { reduction.apply(); } Node addingRoot = compiler.getNodeForCodeInsertion(null); addingRoot.addChildrenToFront(helperCode); compiler.reportCodeChange(); } [BUGGY] [BUGGY] } } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	102	102	1	add	
31	[BUG] [BUGGY] Node root = compiler.parseSyntheticCode( reducer.getClass().toString() + ":helper", reducer.getHelperSource()); [FE] IllegalStateException [CONTEXT] public Node parseHelperCode(Reducer reducer) { [BUGGY] Node root = compiler.parseSyntheticCode(  reducer.getClass().toString() + ":helper", reducer.getHelperSource()); [BUGGY] reducer.getClass().toString() + ":helper", reducer.getHelperSource()); return (root != null) ? root.removeFirstChild() : null; } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] parseHelperCode [RETURN_TYPE] Node  Reducer reducer [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler boolean Node addingRoot externs helperCode newChild oldChild parent root List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	111	112	1	replace	
32	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] public Node parseHelperCode(Reducer reducer) { [BUGGY] [BUGGY] Node root = compiler.parseSyntheticCode(  reducer.getClass().toString() + ":helper", reducer.getHelperSource()); reducer.getClass().toString() + ":helper", reducer.getHelperSource()); return (root != null) ? root.removeFirstChild() : null; } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] parseHelperCode [RETURN_TYPE] Node  Reducer reducer [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler boolean Node addingRoot externs helperCode newChild oldChild parent root List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	111	112	1	add	
33	[BUG] [BUGGY] return (root != null) ? root.removeFirstChild() : null; [FE] IllegalStateException [CONTEXT] public Node parseHelperCode(Reducer reducer) { Node root = compiler.parseSyntheticCode( reducer.getClass().toString() + ":helper", reducer.getHelperSource()); [BUGGY] return (root != null) ? root.removeFirstChild() : null; [BUGGY] } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] parseHelperCode [RETURN_TYPE] Node  Reducer reducer [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler boolean Node addingRoot externs helperCode newChild oldChild parent root List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	113	113	1	replace	
34	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] public Node parseHelperCode(Reducer reducer) { Node root = compiler.parseSyntheticCode( reducer.getClass().toString() + ":helper", reducer.getHelperSource()); [BUGGY] [BUGGY] return (root != null) ? root.removeFirstChild() : null; } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] parseHelperCode [RETURN_TYPE] Node  Reducer reducer [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler boolean Node addingRoot externs helperCode newChild oldChild parent root List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	113	113	1	add	
35	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] private static final int SAVINGS_THRESHOLD = 16; [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer  [VARIABLES] 	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	52	52	1	replace	
36	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] private static final int SAVINGS_THRESHOLD = 16; [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer  [VARIABLES] 	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	52	52	1	add	
37	[BUG] [BUGGY] this.compiler = compiler; [FE] IllegalStateException [CONTEXT] FunctionRewriter(AbstractCompiler compiler) { [BUGGY] this.compiler = compiler; [BUGGY] } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] Multimap reductions AbstractCompiler compiler boolean Node newChild oldChild parent List reducers String FACTORY_METHOD_NAME HELPER_SOURCE int SAVINGS_THRESHOLD  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	53	53	1	replace	
38	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] FunctionRewriter(AbstractCompiler compiler) { [BUGGY] [BUGGY] this.compiler = compiler; } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] Multimap reductions AbstractCompiler compiler boolean Node newChild oldChild parent List reducers String FACTORY_METHOD_NAME HELPER_SOURCE int SAVINGS_THRESHOLD  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	53	53	1	add	
39	[BUG] [BUGGY] } [FE] IllegalStateException [CONTEXT] FunctionRewriter(AbstractCompiler compiler) { this.compiler = compiler; [BUGGY] } [BUGGY]  [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] Multimap reductions AbstractCompiler compiler boolean Node newChild oldChild parent List reducers String FACTORY_METHOD_NAME HELPER_SOURCE int SAVINGS_THRESHOLD  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	54	54	1	replace	
40	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] FunctionRewriter(AbstractCompiler compiler) { this.compiler = compiler; [BUGGY] [BUGGY] } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] <init> [RETURN_TYPE] AbstractCompiler)  AbstractCompiler compiler [VARIABLES] Multimap reductions AbstractCompiler compiler boolean Node newChild oldChild parent List reducers String FACTORY_METHOD_NAME HELPER_SOURCE int SAVINGS_THRESHOLD  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	54	54	1	add	
41	[BUG] [BUGGY] List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(),   new GetterReducer(),      new SetterReducer(), [FE] IllegalStateException [CONTEXT] public void process(Node externs, Node root) { [BUGGY] List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(),            new GetterReducer(),                       new SetterReducer(), [BUGGY] new GetterReducer(), new SetterReducer(), new EmptyFunctionReducer(), new IdentityReducer()); Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();   NodeTraversal.traverse(compiler, root, [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	58	60	1	replace	
42	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] public void process(Node externs, Node root) { [BUGGY] [BUGGY] List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(),            new GetterReducer(),                       new SetterReducer(), new GetterReducer(), new SetterReducer(), new EmptyFunctionReducer(), new IdentityReducer()); Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();   NodeTraversal.traverse(compiler, root, [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	58	60	1	add	
43	[BUG] [BUGGY] Multimap<Reducer, Reduction> reductionMap = HashMultimap.create(); [FE] IllegalStateException [CONTEXT] public void process(Node externs, Node root) { List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(), new GetterReducer(), new SetterReducer(), new EmptyFunctionReducer(), new IdentityReducer()); [BUGGY] Multimap<Reducer, Reduction> reductionMap = HashMultimap.create(); [BUGGY]    NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	64	64	1	replace	
44	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] public void process(Node externs, Node root) { List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(), new GetterReducer(), new SetterReducer(), new EmptyFunctionReducer(), new IdentityReducer()); [BUGGY] [BUGGY] Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();   NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	64	64	1	add	
45	[BUG] [BUGGY] NodeTraversal.traverse(compiler, root,  new ReductionGatherer(reducers, reductionMap)); [FE] IllegalStateException [CONTEXT] List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(), new GetterReducer(), new SetterReducer(), new EmptyFunctionReducer(), new IdentityReducer()); Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();   [BUGGY] NodeTraversal.traverse(compiler, root,       new ReductionGatherer(reducers, reductionMap)); [BUGGY] new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { continue; } Node helperCode = parseHelperCode(reducer); [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	68	69	1	replace	
46	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] List<Reducer> reducers = ImmutableList.of(new ReturnConstantReducer(), new GetterReducer(), new SetterReducer(), new EmptyFunctionReducer(), new IdentityReducer()); Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();   [BUGGY] [BUGGY] NodeTraversal.traverse(compiler, root,       new ReductionGatherer(reducers, reductionMap)); new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { continue; } Node helperCode = parseHelperCode(reducer); [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	68	69	1	add	
47	[BUG] [BUGGY] for (Reducer reducer : reducers) { [FE] IllegalStateException [CONTEXT] new IdentityReducer()); Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();   NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  [BUGGY] for (Reducer reducer : reducers) { [BUGGY] Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { continue; } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; }  [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	72	72	1	replace	
48	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] new IdentityReducer()); Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();   NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  [BUGGY] [BUGGY] for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { continue; } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; }  [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	72	72	1	add	
49	[BUG] [BUGGY] Collection<Reduction> reductions = reductionMap.get(reducer); [FE] IllegalStateException [CONTEXT] Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();   NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { [BUGGY] Collection<Reduction> reductions = reductionMap.get(reducer); [BUGGY] if (reductions.isEmpty()) { continue; } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode); [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	73	73	1	replace	
50	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();   NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { [BUGGY] [BUGGY] Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { continue; } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode); [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	73	73	1	add	
51	[BUG] [BUGGY] if (reductions.isEmpty()) { [FE] IllegalStateException [CONTEXT] Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();   NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); [BUGGY] if (reductions.isEmpty()) { [BUGGY] continue; } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	74	74	1	replace	
52	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] Multimap<Reducer, Reduction> reductionMap = HashMultimap.create();   NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); [BUGGY] [BUGGY] if (reductions.isEmpty()) { continue; } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);  [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	74	74	1	add	
53	[BUG] [BUGGY] continue; [FE] IllegalStateException [CONTEXT]   NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { [BUGGY] continue; [BUGGY] } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);   [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	75	75	1	replace	
54	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT]   NodeTraversal.traverse(compiler, root, new ReductionGatherer(reducers, reductionMap));  for (Reducer reducer : reducers) { Collection<Reduction> reductions = reductionMap.get(reducer); if (reductions.isEmpty()) { [BUGGY] [BUGGY] continue; } Node helperCode = parseHelperCode(reducer); if (helperCode == null) { continue; } int helperCodeCost = InlineCostEstimator.getCost(helperCode);   [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] process [RETURN_TYPE] void  Node externs Node root [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler Reduction reduction boolean Node addingRoot externs helperCode newChild oldChild parent root Collection reductions List reducers String FACTORY_METHOD_NAME HELPER_SOURCE Reducer reducer int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	75	75	1	add	
56	[BUG] [BUGGY] return NodeUtil.isFunctionExpression(n); [FE] IllegalStateException [CONTEXT] private static boolean isReduceableFunctionExpression(Node n) { [BUGGY] return NodeUtil.isFunctionExpression(n); [BUGGY] } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] isReduceableFunctionExpression [RETURN_TYPE] boolean  Node n [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler boolean Node addingRoot externs helperCode n newChild oldChild parent root List reducers String FACTORY_METHOD_NAME HELPER_SOURCE int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	117	117	1	replace	
57	[BUG] [BUGGY] [FE] IllegalStateException [CONTEXT] private static boolean isReduceableFunctionExpression(Node n) { [BUGGY] [BUGGY] return NodeUtil.isFunctionExpression(n); } [CLASS] FunctionRewriter Reduction ReductionGatherer Reducer EmptyFunctionReducer SingleReturnStatementReducer IdentityReducer ReturnConstantReducer GetterReducer SetterReducer [METHOD] isReduceableFunctionExpression [RETURN_TYPE] boolean  Node n [VARIABLES] Multimap reductionMap reductions AbstractCompiler compiler boolean Node addingRoot externs helperCode n newChild oldChild parent root List reducers String FACTORY_METHOD_NAME HELPER_SOURCE int SAVINGS_THRESHOLD helperCodeCost savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.2581988897471611	117	117	1	add	
