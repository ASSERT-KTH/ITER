bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
2	[BUG]  [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
3	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
4	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  }	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
5	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
6	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
7	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
8	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
9	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
10	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
11	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
12	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
13	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
14	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
15	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
16	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reductionCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reductionCost);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reductionCost);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
17	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
18	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
19	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
20	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(null);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
21	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saver);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saver);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saver);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
22	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saved);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saved);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saved);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
23	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
24	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
25	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
26	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  +  1;  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  +  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
27	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  -  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  -  1;  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  -  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
28	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
29	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
30	[BUG]  [BUGGY]  if(savings!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(savings!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
31	[BUG]  [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
32	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
33	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
34	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
35	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reducers);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
36	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
37	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
38	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
39	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
40	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
41	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
42	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
43	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
44	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCode);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCode);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
45	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saver);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saver);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saver);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
46	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
47	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  savings);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
48	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
49	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.apply();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.apply();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
50	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.applySavings();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.applySavings();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.applySavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
51	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
52	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.previousSavings();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.previousSavings();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.previousSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
53	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.apply();  }  [CE]  ')'  expected  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.apply();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.apply();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  ')'  expected	16	None	replace
54	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccess();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccess();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccess();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
55	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
56	[BUG]  [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
57	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
58	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
59	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
60	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
61	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
62	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
63	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
64	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
65	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
66	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saver);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saver);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  saver);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savings);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
68	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
69	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalSavings();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalSavings();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
70	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateChildren();  }  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateChildren();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateChildren();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
71	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  helperCodeCost  +=  reduction.estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  +=  reduction.estimateSavings();	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
72	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateFunctionState();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateFunctionState();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateFunctionState();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
73	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
74	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
75	[BUG]  [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
76	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
77	[BUG]  [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
78	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
79	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
80	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
81	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
82	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
83	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
84	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
85	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
86	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
87	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
88	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
89	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
90	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
91	[BUG]  [BUGGY]  reduction  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  reduction  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reduction  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
92	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
93	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateLocalSavings();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateLocalSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateLocalSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
94	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
95	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
96	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);	      	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
97	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  null);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
98	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
99	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
100	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
101	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
102	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
103	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSavings();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
104	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()).estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
105	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(helperCode);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
106	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saving);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saving);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  saving);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
107	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
108	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount());  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount());  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
109	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
110	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation());  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation());  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
111	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  savings);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(null,  savings);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
112	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null);	  reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
113	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
114	[BUG]  [BUGGY]  if(reduction  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(reduction  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
115	[BUG]  [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
116	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  saving.estimateSavings();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  saving.estimateSavings();  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  saving.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
117	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  savings);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  savings);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  savings);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
118	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saving);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
119	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  reducer);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  reducer);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  reducer);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
120	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart());  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart());  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
121	[BUG]  [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  not  a  statement  [FE]              IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    }    	non-compiled	[CE]  not  a  statement	12	None	replace
122	[BUG]  [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction);  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
123	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  }	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
124	[BUG]  [BUGGY]  if(reduction  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]    if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();    [BUGGY]  if(reduction  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]        if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
