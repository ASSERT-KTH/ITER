bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  HelperCodeCost(reduction.values())  {  helperCodeCost  +=  reduction.apply();  }  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost(reduction.values())  {  helperCodeCost  +=  reduction.apply();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost(reduction.values())  {  helperCodeCost  +=  reduction.apply();  }	  For(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  ';'  expected	53	None	replace
2	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSavings();  }	  For(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  ')'  expected	53	None	replace
3	[BUG]  [BUGGY]  HelperCodeCost(reduction  reduction,  reduction.values())  {  helperCodeCost  +=  reduction.apply();  }  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost(reduction  reduction,  reduction.values())  {  helperCodeCost  +=  reduction.apply();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost(reduction  reduction,  reduction.values())  {  helperCodeCost  +=  reduction.apply();  }	  For(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  ')'  expected	53	None	replace
4	[BUG]  [BUGGY]  HelperCodeCost  =  reductions.values();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  reductions.values();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  reductions.values();	  For(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
5	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
6	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
7	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers  +=  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
8	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  -=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  -=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  -=  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
9	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.applySavings();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.applySavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.applySavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
10	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  saving.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  saving.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  saving.estimateSavings();	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
11	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.estimateSavings();	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
12	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  Savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  Savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  Savings  +=  reduction.estimateSavings();	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
13	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
14	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  aiderCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
15	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
16	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingRoot);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingRoot);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingRoot);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
17	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
18	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(parent);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
19	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);	  aiderCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
20	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);	  aiderCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
21	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.applySavings();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.applySavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.applySavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.applySavings();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
22	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reduction.values())  {  helperCodeCost  +=  reduction.estimateSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.applySavings();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
23	[BUG]  [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  InlineCostEstimator.getCost(reduction);	  reducer    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
24	[BUG]  [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  reductions.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  reductions.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  InlineCostEstimator.getCost(reduction);  reductions.addChildrenToFront(reduction);	  reducer    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
25	[BUG]  [BUGGY]  reducer  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);	  reducer    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
26	[BUG]  [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);	  reducer    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
27	[BUG]  [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);	  reducer    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
28	[BUG]  [BUGGY]  Reducer  reducer  =  InlineCostEstimator.getCost(reduction);  reductions.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  InlineCostEstimator.getCost(reduction);  reductions.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  InlineCostEstimator.getCost(reduction);  reductions.addChildrenToFront(reduction);	  reducer    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
29	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
30	[BUG]  [BUGGY]  InlineCostEstimator.setCost(reduction);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  InlineCostEstimator.setCost(reduction);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	InlineCostEstimator.setCost(reduction);  savers.addChildrenToFront(reduction);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
31	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
32	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(helperCodeCost);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
33	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
34	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  /  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  /  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  /  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
35	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings()  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings()  +  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings()  +  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
36	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalName()).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalName()).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalName()).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
37	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getReductionName()).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getReductionName()).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getReductionName()).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
38	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSavings()  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSavings()  +  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSavings()  +  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
39	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSavings()  -  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSavings()  -  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSavings()  -  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
40	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSuccess();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSuccess();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateSuccess();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
41	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).prependSavings();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).prependSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).prependSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
42	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
43	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
44	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
45	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode,  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
46	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(saver);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(saver);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(saver);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
47	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving).addChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving).addChildrenToFront(helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saving).addChildrenToFront(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
48	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSuccess();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSuccess();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSuccess();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSuccess();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
49	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalSuccess();  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalSuccess();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalSuccess();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSuccess();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
50	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  helperCodeCost  +=  reduction.estimateSuccess();  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  helperCodeCost  +=  reduction.estimateSuccess();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reduction.values())  {  helperCodeCost  +=  reduction.estimateSuccess();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSuccess();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
51	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccess();  }  [CE]  ')'  expected  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccess();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccess();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSuccess();    }    	non-compiled	[CE]  ')'  expected	54	None	replace
52	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);	  reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
53	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  saving);	  reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
54	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  reduction);	  reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
55	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  savings);	  reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
56	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
57	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  reduction,  saving);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
58	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  reduction,  savings);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
59	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  reduction,  helperCodeCost,  savings);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
60	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reducer);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
61	[BUG]  [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
62	[BUG]  [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
63	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  saving.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  saving.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  saving.estimateSavings();  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    saving.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
64	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  saving.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  saving.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  saving.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    saving.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
65	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  saving.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  saving.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  saving.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    saving.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
66	[BUG]  [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }	  if(helperCode    ==    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
67	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  savings);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
68	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reduction,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
69	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  saving);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
70	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  SAVINGS_THRESHOLD);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  SAVINGS_THRESHOLD);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
71	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reduction);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
72	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(helperCode);	  aiderCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
73	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);	  aiderCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
74	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings()  -  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings()  -  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings()  -  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
75	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSuccess();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSuccess();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSuccess();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
76	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  helperCode);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
77	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saverCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saverCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  saverCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
78	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
79	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
80	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
81	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
82	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
83	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  saver);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  saver);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  saver);	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
84	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saver);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saver);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saver);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
85	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null,  reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(null,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(null);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
86	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
87	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  helperCodeCost.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  helperCodeCost.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  helperCodeCost.estimateSavings();	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
88	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.apply();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.apply();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.apply();	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
89	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  saver);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  saver);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions,  saver);	  NodeTraversal.traverse(compiler,    root,    reductions,    saver);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
90	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saver,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saver,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  saver,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    saver);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
91	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);	  NodeTraversal.traverse(compiler,    root,    reductions,    saver);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
92	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  helperCode);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reduction,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
93	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saverCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saverCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saverCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
94	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings,  helperCode);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings,  helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  savings,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
95	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
96	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
97	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saving).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
98	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  helperCodeCost);	  reducer    =    compiler.getNodeForCodeInsertion(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
99	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  aiderCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  aiderCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  aiderCodeCost);	  reducer    =    compiler.getNodeForCodeInsertion(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
100	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reduction,  HelperCodeCost);	  reducer    =    compiler.getNodeForCodeInsertion(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
101	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saved,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saved,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saved,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(saved);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
102	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reductionCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reductionCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reductionCost);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
103	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getReductionForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getReductionForCodeInsertion(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getReductionForCodeInsertion(reduction);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
104	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
105	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  boolean    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
106	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(saving);	  boolean    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
107	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(null);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(null);	  boolean    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
108	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);	  boolean    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
109	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }	  if(reduction!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
110	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;	  if(reduction!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
111	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }	  if(reduction!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
112	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  reduction);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
113	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  saving);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
114	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction,  savings);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
115	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  helperCodeCost);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
116	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.apply();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  +=  reduction.apply();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  +=  reduction.apply();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
117	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSuccess();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  +=  reduction.estimateSuccess();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  +=  reduction.estimateSuccess();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
118	[BUG]  [BUGGY]  helperCodeCost  -=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  -=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  -=  reduction.estimateSavings();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
119	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.applySavings();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  +=  reduction.applySavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  +=  reduction.applySavings();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
120	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.getSavings();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  +=  reduction.getSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  +=  reduction.getSavings();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
121	[BUG]  [BUGGY]  HelperCodeCost  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  +=  reduction.estimateSavings();	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
122	[BUG]  [BUGGY]  null  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  null  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	null  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  not  a  statement	10	None	replace
123	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
124	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }	  if(reduction!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
125	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }	  if(reduction!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
126	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }	  if(reduction!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
127	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
128	[BUG]  [BUGGY]  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	savers.addChildrenToFront(reduction);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
129	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  reduction);	  HelperCode    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
130	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(helperCodeCost);	  HelperCode    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
131	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  savings);	  HelperCode    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
132	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  saving);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  saving);	  HelperCode    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
133	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(saving);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(saving);	  HelperCode    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
134	[BUG]  [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
135	[BUG]  [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saver,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saver,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saver,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    saver);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  saver);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  saver);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reduction,  saver);	  NodeTraversal.traverse(compiler,    root,    reduction,    saver);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  saver);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  saver);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  saver);	  NodeTraversal.traverse(compiler,    root,    reduction,    saver);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saver,  helperCode);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saver,  helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saver,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reduction,    saver);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
140	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).prepareSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).prepareSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).prepareSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prepareSavings();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
141	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  -  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  -  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  -  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prepareSavings();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
142	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  -  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  -  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  -  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prepareSavings();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
143	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  +  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  +  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  +  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prepareSavings();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
144	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  +  1;  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  +  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareSavings()  +  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prepareSavings();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saving,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  savings,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  savings,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  savings,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  save,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  save,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  save,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
148	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving,  helperCode);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving,  helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saving,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
149	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reduction,  saving);	  NodeTraversal.traverse(compiler,    root,    reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
150	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalName());  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalName());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
151	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
152	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()  +  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
153	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
154	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(savings!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
155	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(savings!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
156	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);	  if(savings!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
157	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
158	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
159	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
160	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  helperCodeCost  +=  reduction.previousSavings();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  helperCodeCost  +=  reduction.previousSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.get(0))  {  helperCodeCost  +=  reduction.previousSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.previousSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
161	[BUG]  [BUGGY]  saverCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  saverCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	saverCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
162	[BUG]  [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }	  if(saved)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
163	[BUG]  [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
164	[BUG]  [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
165	[BUG]  [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
166	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).prependSavings();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).prependSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).prependSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prependSavings();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
167	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  -  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  -  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  -  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prependSavings();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
168	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  -  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  -  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  -  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prependSavings();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
169	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  +  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  +  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  +  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prependSavings();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
170	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  +  1;  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  +  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings()  +  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prependSavings();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
171	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savings,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    savings);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
172	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions,  savings);	  NodeTraversal.traverse(compiler,    root,    reductions,    savings);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
173	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saving,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saving,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  saving,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    savings);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
174	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  savings);	  NodeTraversal.traverse(compiler,    root,    reductions,    savings);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
175	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  savings);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  savings);	  NodeTraversal.traverse(compiler,    root,    reductions,    savings);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
176	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
177	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  null);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions,  null);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
178	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savers);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savers);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savers);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
179	[BUG]  [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(helperCode    ==    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
180	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  savings).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  savings).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  savings).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
181	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getUpperPart()).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getUpperPart()).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getUpperPart()).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
182	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()).prependSavings();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()).prependSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()).prependSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
183	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }	  if(reduction    ==    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
184	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }	  if(reduction    ==    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
185	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateLocalSavings();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateLocalSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateLocalSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateLocalSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
186	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.getLocalSavings();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.getLocalSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.getLocalSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateLocalSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
187	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  }	  helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
188	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(saving);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
189	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(save);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(save);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(save);	  int    helperCodeCost    =    InlineCostEstimator.getCost(saver);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
190	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
191	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  SAVINGS_THRESHOLD);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  SAVINGS_THRESHOLD);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
192	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.iterator().next())  {  helperCodeCost  +=  reduction.estimateSavings();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
193	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  helperCodeCost  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.get(0))  {  helperCodeCost  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.get(0))  {  helperCodeCost  +=  reduction.estimateSavings();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
194	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  For(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	For(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSavings();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  ')'  expected	51	None	replace
195	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet())  {  helperCodeCost  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.entrySet())  {  helperCodeCost  +=  reduction.estimateSavings();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
196	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation(),  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation(),  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation(),  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocation());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
197	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation()  +  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation()  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation()  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocation());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
198	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation(),  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation(),  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation(),  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocation());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
199	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation(),  saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation(),  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation(),  saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocation());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
200	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getReductionLocation());  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getReductionLocation());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getReductionLocation());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocation());    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
201	[BUG]  [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
202	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
203	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  reducer);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  reducer);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reduction,  reducer);	  NodeTraversal.traverse(compiler,    root,    reduction,    reducer);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
204	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HELPER_SOURCE);	  NodeTraversal.traverse(compiler,    root,    reduction,    reducer);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
205	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  savers);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  savers);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  savers);	  NodeTraversal.traverse(compiler,    root,    reduction,    reducer);    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
206	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  savings);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    savings);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
207	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(savings,  helperCode);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(savings,  helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(savings,  helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    savings);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
208	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(saving);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
209	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
210	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(helperCode,  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(helperCode,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(helperCode,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
211	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
212	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(helperCode,  savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(helperCode,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(helperCode,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
213	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings  +  1);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
214	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings  -  1);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings  -  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings  -  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
215	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings  -  2);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings  -  2);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings  -  2);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
216	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  savings,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    savings);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  savings);	  NodeTraversal.traverse(compiler,    root,    savings);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  aiderCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  aiderCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    aiderCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  reduction);	  NodeTraversal.traverse(compiler,    root,    reductions,    aiderCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducers);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducers);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
222	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  savings);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
223	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
224	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  saving);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
225	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getUpperBound());  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getUpperBound());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getUpperBound());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
226	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNode());  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNode());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNode());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
227	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }	  if(helperCode!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
228	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }	  if(helperCode!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
229	[BUG]  [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }	  if(helperCode!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
230	[BUG]  [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  }	  if(helperCode!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
231	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(savings!=    null)    {    if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
232	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost  ==  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(savings!=    null)    {    if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
233	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(savings!=    null)    {    if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
234	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  saved.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  saved.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  saved.addChildrenToFront(reduction);  }	  if(savings!=    null)    {    if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
235	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  }	  if(savings!=    null)    {    if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
236	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction  [CE]  [FE]                                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction	  if(savings!=    null)    {    if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  	30	None	replace
237	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  saved.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost  ==  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  saved.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  saved.addChildrenToFront(reduction);  }	  if(savings!=    null)    {    if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
238	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
239	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
240	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
241	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
242	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction  +  1);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction  +  1);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
243	[BUG]  [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  HelperCodeCost    <    N>    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
244	[BUG]  [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);	  HelperCodeCost    <    N>    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
245	[BUG]  [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);	  HelperCodeCost    <    N>    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
246	[BUG]  [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);	  HelperCodeCost    <    N>    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
247	[BUG]  [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  HelperCodeCost    <    N>    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
248	[BUG]  [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction  +  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction  +  1);	  HelperCodeCost    <    N>    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
249	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateLocalSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateLocalSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode).estimateLocalSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateLocalSavings();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
250	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateLocalSavings()  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateLocalSavings()  +  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateLocalSavings()  +  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateLocalSavings();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
251	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).computeLocalSavings();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).computeLocalSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).computeLocalSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateLocalSavings();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
252	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateLocalSavings()  -  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateLocalSavings()  -  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateLocalSavings()  -  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateLocalSavings();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
253	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction,  saving);	  HelperCode    helperCodeCost    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
254	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction,  savings);	  HelperCode    helperCodeCost    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
255	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(helperCode);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(helperCode);	  HelperCode    helperCodeCost    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
256	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  savings);	  reducer    =    compiler.getNodeForCodeInsertion(null,    savings);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
257	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost,  savings);	  reducer    =    compiler.getNodeForCodeInsertion(null,    savings);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
258	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
259	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
260	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
261	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
262	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }	  aiderCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
263	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();	  aiderCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
264	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(savings,  reduction);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(savings,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(savings,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(savings);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
265	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(savings);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
266	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(helperCode);	  int    helperCodeCost    =    InlineChildEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
267	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(reduction,  reduction);	  int    helperCodeCost    =    InlineChildEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
268	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(reduction,  saving);	  int    helperCodeCost    =    InlineChildEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
269	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(reduction,  savings);	  int    helperCodeCost    =    InlineChildEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
270	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineChildEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineChildEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineChildEstimator.getCost(reduction);	  int    helperCodeCost    =    InlineChildEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
271	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saves);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saves);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saves);	  NodeTraversal.traverse(compiler,    root,    reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
272	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  savings,  helperCode);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  savings,  helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  savings,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
273	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  saving);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions,  saving);	  NodeTraversal.traverse(compiler,    root,    reductions,    saving);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
274	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  save,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  save,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  save,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    saving);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
275	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saving,  helperCode);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saving,  helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  saving,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reductions,    saving);    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
276	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  }	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
277	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
278	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
279	[BUG]  [BUGGY]  reduction  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reduction  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reduction  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);	  reduction    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
280	[BUG]  [BUGGY]  reduction  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reduction  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reduction  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);	  reduction    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
281	[BUG]  [BUGGY]  reduction  =  InlineCostEstimator.getCost(helperCodeCost);  reducers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reduction  =  InlineCostEstimator.getCost(helperCodeCost);  reducers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reduction  =  InlineCostEstimator.getCost(helperCodeCost);  reducers.addChildrenToFront(reduction);	  reduction    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
282	[BUG]  [BUGGY]  reducers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducers.addChildrenToFront(reduction);	  reduction    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
283	[BUG]  [BUGGY]  reduction  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reduction  =  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reduction  =  InlineCostEstimator.getCost(reduction);	  reduction    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
284	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reductionCost,  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(reductionCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(reductionCost,  savings);	  reducer    =    compiler.getNodeForCodeInsertion(reductionCost);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
285	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;	  if(helperCode!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
286	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateChildren();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateChildren();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateChildren();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateChildren();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
287	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalChildren();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalChildren();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalChildren();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateChildren();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
288	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  helperCodeCost  +=  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reduction.values())  {  helperCodeCost  +=  reduction.apply();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reduction.values())  {  helperCodeCost  +=  reduction.apply();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
289	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.apply();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.apply();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.apply();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
290	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  -  1);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  -  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  -  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
291	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
292	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  -  2);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  -  2);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  -  2);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
293	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  +  2);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  +  2);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  +  2);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
294	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getFirstChild());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getFirstChild());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
295	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  -  reduction.getChildCount());  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  -  reduction.getChildCount());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount()  -  reduction.getChildCount());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
296	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
297	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.apply();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.apply();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.apply();	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
298	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.applySavings();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.applySavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.applySavings();	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
299	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSuccess();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSuccess();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSuccess();	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
300	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
301	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(null);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(null);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
302	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(saving);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
303	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
304	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
305	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLastChild());  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLastChild());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLastChild());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getParent());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
306	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNext());  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNext());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNext());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getParent());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
307	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent(),  savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent(),  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent(),  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getParent());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
308	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent(),  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent(),  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent(),  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getParent());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
309	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNameNode());  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNameNode());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNameNode());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getParent());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
310	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(helperCodeCost);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
311	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
312	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
313	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
314	[BUG]  [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction,  savings);	  HelperCodeCost    hilfterCode    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
315	[BUG]  [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction,  reduction);	  HelperCodeCost    hilfterCode    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
316	[BUG]  [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(helperCodeCost);	  HelperCodeCost    hilfterCode    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
317	[BUG]  [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(reduction,  saving);	  HelperCodeCost    hilfterCode    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
318	[BUG]  [BUGGY]  HelperCodeCost  helperCode  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCode  =  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCode  =  InlineCostEstimator.getCost(reduction);	  HelperCodeCost    hilfterCode    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
319	[BUG]  [BUGGY]  HelperCodeCost  helfenerCode  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helfenerCode  =  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helfenerCode  =  InlineCostEstimator.getCost(reduction);	  HelperCodeCost    hilfterCode    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
320	[BUG]  [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
321	[BUG]  [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
322	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  null,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction,    null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
323	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  null);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reduction,  null);	  NodeTraversal.traverse(compiler,    root,    reduction,    null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
324	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  helperCodeCost);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
325	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getReductionForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getReductionForCodeInsertion(null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getReductionForCodeInsertion(null);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
326	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reductions);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  roots,  reductions);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  roots,  reductions);	  NodeTraversal.traverse(compiler,    externs,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
327	[BUG]  [BUGGY]  ReductionTraversal.traverse(compiler,  root,  reductions);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  ReductionTraversal.traverse(compiler,  root,  reductions);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	ReductionTraversal.traverse(compiler,  root,  reductions);	  NodeTraversal.traverse(compiler,    externs,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
328	[BUG]  [BUGGY]  Context.traverse(compiler,  root,  reductions);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Context.traverse(compiler,  root,  reductions);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Context.traverse(compiler,  root,  reductions);	  NodeTraversal.traverse(compiler,    externs,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
329	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  réductions);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  réductions);	  NodeTraversal.traverse(compiler,    externs,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
330	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(rededuction);  savings  +=  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
331	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateFunctionState();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateFunctionState();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateFunctionState();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateFunctionState();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
332	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalState();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalState();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalState();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateFunctionState();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
333	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalFunctionState();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalFunctionState();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalFunctionState();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateFunctionState();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
334	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving,  savings);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
335	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving  +  1);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
336	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(null,  helperCodeCost);	  reducer    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
337	[BUG]  [BUGGY]  réduir  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  réduir  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	réduir  =  compiler.getNodeForCodeInsertion(null);	  reducer    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
338	[BUG]  [BUGGY]  if(reduction!=  reduction)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(reduction!=  reduction)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction!=  reduction)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
339	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);	  aiderCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
340	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
341	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
342	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  savings);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
343	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
344	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);  }  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction,  saving);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
345	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateFunction();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateFunction();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateFunction();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSuccess();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
346	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSuccess();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
347	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMutator();  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMutator();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMutator();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSuccess();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
348	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(savings!=    null)    {    if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
349	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }	  if(savings!=    null)    {    if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
350	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  0);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  0);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  0);	  NodeTraversal.traverse(compiler,    root,    reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
351	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  aiderCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  aiderCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
352	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
353	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(parent);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
354	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
355	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
356	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  savings  +=  reduction.estimateSavings();	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
357	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HELPER_SOURCE);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HELPER_SOURCE);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
358	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  SAVINGS_THRESHOLD);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  SAVINGS_THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
359	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.HELPER_SOURCE);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.HELPER_SOURCE);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperType.HELPER_SOURCE);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
360	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(saving);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
361	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(saving);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
362	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(saving);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(saving);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
363	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(root);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(root);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(root);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
364	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost!=  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
365	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if(helperCodeCost!=  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
366	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    savings);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
367	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings  -  1);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings  -  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings  -  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    savings);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
368	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reductions);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reductions);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reductions);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost,    savings);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
369	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(root);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(root);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(root);	  HelperCode    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
370	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
371	[BUG]  [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
372	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
373	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction;  savings  +=  reduction.estimateSavings();  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction;  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction;  savings  +=  reduction.estimateSavings();	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  ')'  expected	82	None	replace
374	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  helping.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  helping.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  helping.estimateSavings();	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
375	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
376	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  else  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  else  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  else  {  return;  }	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
377	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateLocalSavings();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateLocalSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateLocalSavings();	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
378	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    root,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
379	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  }	  if(helperCode!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
380	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
381	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  else  {  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  else  {  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  else  {	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
382	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalStatements();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalStatements();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalStatements();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateChildren();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
383	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(helperCodeCost);	  int    helperCodeCost    =    InlineChildEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
384	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(null);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(null);	  int    helperCodeCost    =    InlineChildEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
385	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helper);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helper);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helper);	  int    helperCodeCost    =    InlineCostEstimator.getCost(saver);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  0);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  0);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  0);	  NodeTraversal.traverse(compiler,    root,    reductions,    saver);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
387	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reductionCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reductionCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(null,  reductionCost);	  reducer    =    compiler.getNodeForCodeInsertion(reductionCost);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
388	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
389	[BUG]  [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
390	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  helperCodeCost);	  reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
391	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getName());  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getName());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
392	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  HelperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
393	[BUG]  [BUGGY]  ReductionTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  ReductionTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	ReductionTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
394	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  reduction,  root);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
395	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
396	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
397	[BUG]  [BUGGY]  reduction  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reduction  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reduction  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
398	[BUG]  [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  continue;  }	  if(helperCode!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
399	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  }	  if(helperCode!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
400	[BUG]  [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  not  a  statement  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  HelperCodeCost    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  not  a  statement	121	None	replace
401	[BUG]  [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  not  a  statement  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);	  HelperCodeCost    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  not  a  statement	121	None	replace
402	[BUG]  [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  not  a  statement  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);	  HelperCodeCost    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  not  a  statement	121	None	replace
403	[BUG]  [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [CE]  not  a  statement  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reduction);	  HelperCodeCost    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  not  a  statement	121	None	replace
404	[BUG]  [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [CE]  not  a  statement  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  savings);	  HelperCodeCost    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  not  a  statement	121	None	replace
405	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();	  if(helperCodeCost    ==    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
406	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aidCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aidCodeCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aidCodeCost,  savings);	  NodeTraversal.traverse(compiler,    root,    reductions,    aiderCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
407	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(parent);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(parent);	  boolean    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
408	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(root);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(root);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(root);	  boolean    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
409	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aidCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aidCodeCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  aidCodeCost,  savings);	  NodeTraversal.traverse(compiler,    root,    reduction,    aiderCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
410	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareInsertion();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareInsertion();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareInsertion();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prepareSavings();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
411	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareLocalSavings();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareLocalSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepareLocalSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prepareSavings();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
412	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction,  helperCodeCost);	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
413	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()  -  1);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()  -  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart()  -  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
414	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getUpperPart());  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getUpperPart());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getUpperPart());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart());    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
415	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  reduction.estimateSavings();  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
416	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateFunctionSavings();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateFunctionSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateFunctionSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.applySavings();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
417	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prependSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prependSavings();    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  externs,  reduction,  savings);	  NodeTraversal.traverse(compiler,    root,    reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
419	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savers.addChildrenToFront(reduction);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
420	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
421	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  saved);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  saved);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode,  saved);	  int    helperCodeCost    =    InlineCostEstimator.getCost(saved);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
422	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
423	[BUG]  [BUGGY]  long  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  long  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	long  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
424	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
425	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(root,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(root,  saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(root);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
426	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(parent);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(parent);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(parent);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
427	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost  ==  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
428	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(root,  reduction);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(root,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(root,  reduction);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
429	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineChildEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineChildEstimator.getCost(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineChildEstimator.getCost(helperCodeCost);	  boolean    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
430	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateLocalSavings();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateLocalSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateLocalSavings();  }	  if(helperCode!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
431	[BUG]  [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  hilfterCode  =  InlineCostEstimator.getCost(helperCode);	  HelperCodeCost    hilfterCode    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
432	[BUG]  [BUGGY]  HelperCodeCost  helperCode  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCode  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCode  =  InlineCostEstimator.getCost(helperCodeCost);	  HelperCodeCost    hilfterCode    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
433	[BUG]  [BUGGY]  HelperCodeCost  helfenerCode  =  InlineCostEstimator.getCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helfenerCode  =  InlineCostEstimator.getCost(helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helfenerCode  =  InlineCostEstimator.getCost(helperCodeCost);	  HelperCodeCost    hilfterCode    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
434	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccings();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
435	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);	  aiderCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
436	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(saving);	  aiderCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
437	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);	  aiderCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
438	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.previousSavings();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.previousSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.previousSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.previousSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
439	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.previousSavings();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  +=  reduction.previousSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  +=  reduction.previousSavings();	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.previousSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
440	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost  ==  null)  {  return;	  if(reduction!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
441	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateFunctionSavings();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateFunctionSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateFunctionSavings();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
442	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateMutator();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateMutator();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateMutator();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
443	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSeconds();  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSeconds();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.keySet())  {  helperCodeCost  +=  reduction.estimateSeconds();  }	  for(Reduction    reduction    :    reductions.keySet())    {    helperCodeCost    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
444	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings.addChildrenToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
445	[BUG]  [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }  else  {  return;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }  else  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }  else  {  return;  }	  helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
446	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateHELPER_SOURCE();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateHELPER_SOURCE();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateHELPER_SOURCE();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateLocalSavings();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
447	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateHelperSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateHelperSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateHelperSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateLocalSavings();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
448	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateLocalSavings();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  +=  reduction.estimateLocalSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  +=  reduction.estimateLocalSavings();	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateLocalSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
449	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateNodeSavings();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateNodeSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateNodeSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateLocalSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
450	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMutableSavings();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMutableSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMutableSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateLocalSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
451	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saves);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saves);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  saves);	  NodeTraversal.traverse(compiler,    root,    reductions,    savings);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
452	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
453	[BUG]  [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
454	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(parent);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(parent);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(parent);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
455	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(null);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(null);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
456	[BUG]  [BUGGY]  helperCodeCost  +=  reduction.estimateSavings()  -  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  helperCodeCost  +=  reduction.estimateSavings()  -  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	helperCodeCost  +=  reduction.estimateSavings()  -  1;	  helperCodeCost    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
457	[BUG]  [BUGGY]  if(saved  >  0)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(saved  >  0)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(saved  >  0)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(saved)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
458	[BUG]  [BUGGY]  if(saved  >  0)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(saved  >  0)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(saved  >  0)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savers.addChildrenToFront(reduction);  }	  if(saved)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
459	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving  -  1);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving  -  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving  -  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
460	[BUG]  [BUGGY]  Reducer  reducer  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  InlineCostEstimator.getCost(reduction);	  reducer    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
461	[BUG]  [BUGGY]  Reducer  reducer  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);	  reducer    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
462	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(newChild,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(newChild,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(newChild,  helperCodeCost);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
463	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(root,  savings);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(root,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(root,  savings);	  reducer    =    compiler.getNodeForCodeInsertion(null,    savings);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
464	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(null);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
465	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	InlineCostEstimator.getCost(reduction);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
466	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Preconditions.checkState(helperCodeCost  ==  reduction);  savers.addChildrenToFront(reduction);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
467	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  reduction);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Preconditions.checkState(helperCodeCost!=  reduction);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Preconditions.checkState(helperCodeCost!=  reduction);  savers.addChildrenToFront(reduction);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
468	[BUG]  [BUGGY]  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
469	[BUG]  [BUGGY]  HelperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);	  For(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
470	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalSavings();  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocalSavings();  }	  For(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  ')'  expected	53	None	replace
471	[BUG]  [BUGGY]  HelperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  compiler.getNodeForCodeInsertion(null);	  For(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
472	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent(),  saving);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent(),  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent(),  saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getParent());    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
473	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(null).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(null).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
474	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName()).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName()).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName()).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
475	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateState();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateState();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateState();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateFunctionState();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
476	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  savings).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  savings).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  savings).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
477	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateLocalSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateLocalSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName()).estimateLocalSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
478	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNode()).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNode()).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getNode()).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
479	[BUG]  [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(null);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(null);	  HelperCodeCost    <    N>    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
480	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost  ==  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  if(helperCodeCost  ==  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
481	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  Savings);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  Savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  Savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
482	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null  +  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null  +  1);	  HelperCode    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
483	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  reducer);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  reducer);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCode  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  reducer);	  HelperCode    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
484	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reducer);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reducer);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  reducer);	  NodeTraversal.traverse(compiler,    root,    reductions,    aiderCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
485	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
486	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
487	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).assertLocalSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).assertLocalSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).assertLocalSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateLocalSavings();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
488	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).initializeLocalSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).initializeLocalSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).initializeLocalSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateLocalSavings();    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
489	[BUG]  [BUGGY]  HelperCodeCost  reductionCodeCost  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  reductionCodeCost  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  reductionCodeCost  =  compiler.getNodeForCodeInsertion(null);	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.applySavings();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
490	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateValueSavings();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateValueSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateValueSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.applySavings();    }    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
491	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);	  aiderCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
492	[BUG]  [BUGGY]  null  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  not  a  statement  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  null  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	null  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  not  a  statement	7	None	replace
493	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepare();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepare();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).prepare();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).prepareSavings();    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
494	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null,  savings);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
495	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  saver);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null,  saver);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null,  saver);	  NodeTraversal.traverse(compiler,    root,    reductions,    null);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
496	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(new  InlineCostEstimator());  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(new  InlineCostEstimator());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(new  InlineCostEstimator());	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
497	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  contributingRoot);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  contributingRoot);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  contributingRoot);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
498	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving,  reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
499	[BUG]  [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  =  InlineCostEstimator.getCost(reduction  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  =  InlineCostEstimator.getCost(reduction  +  1);	  HelperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
500	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saverCode);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saverCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  saverCode);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
501	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMemberSavings();  }  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMemberSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMemberSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateLocalSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
502	[BUG]  [BUGGY]  if(savings  >  0)  {  reduction  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings  >  0)  {  reduction  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings  >  0)  {  reduction  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  reduction    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
503	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helpingerCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helpingerCodeCost,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helpingerCodeCost,  savings);	  NodeTraversal.traverse(compiler,    root,    reduction,    aiderCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
504	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getCharacterIndex());  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getCharacterIndex());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getCharacterIndex());	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName());    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
505	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount(),  savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount(),  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getChildCount(),  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getChildCount());    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
506	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(savings);	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
507	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingerCode);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingerCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  helpingerCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
508	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.THRESHOLD);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.THRESHOLD);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  HelperCode.THRESHOLD);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
509	[BUG]  [BUGGY]  if(reduction  ==  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(reduction  ==  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction  ==  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
510	[BUG]  [BUGGY]  if(reduction!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(reduction!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  }	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
511	[BUG]  [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  InlineCostEstimator.getCost(reduction);  savings  +=  reduction.estimateSavings();	  helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
512	[BUG]  [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);reducings.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  InlineCostEstimator.getCost(reduction);reducings.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  InlineCostEstimator.getCost(reduction);reducings.addChildrenToFront(reduction);	  reducer    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
513	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  saving).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  saving).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName(),  saving).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getName()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
514	[BUG]  [BUGGY]  InlinedStatementEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  InlinedStatementEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	InlinedStatementEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
515	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  savers);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  savers);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  reduction,  savers);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
516	[BUG]  [BUGGY]  InlinedStatementEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  InlinedStatementEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	InlinedStatementEstimator.getCost(reduction);  reducers.addChildrenToFront(reduction);	  InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
517	[BUG]  [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  reductions.values().iterator().next();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  reductions.values().iterator().next();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  N>  helperCodeCost  =  reductions.values().iterator().next();	  For(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
518	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccings();  }  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	For(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSuccings();  }	  For(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  ')'  expected	53	None	replace
519	[BUG]  [BUGGY]  HelperCodeCost  <  Reducer>  helperCodeCost  =  reductions.values().iterator().next();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  Reducer>  helperCodeCost  =  reductions.values().iterator().next();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  Reducer>  helperCodeCost  =  reductions.values().iterator().next();	  For(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.apply();    }    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
520	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  reduction,  root,  helperCodeCost);	  NodeTraversal.traverse(compiler,    reduction,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
521	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  aiderCode.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  aiderCode.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  aiderCode.estimateSavings();	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
522	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  helpingerCodeCost.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  helpingerCodeCost.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  helpingerCodeCost.estimateSavings();	  HelperCodeCost    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
523	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).assertSavings();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).assertSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).assertSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
524	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).assimateSavings();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).assimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).assimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
525	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).acceptSavings();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).acceptSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).acceptSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
526	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(saved);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
527	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saved  +  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(saved  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(saved  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(saved);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
528	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(saved);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(saved);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildToFront(saved);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
529	[BUG]  [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCodeCost  =  InlineCostEstimator.getCost(savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCodeCost  =  InlineCostEstimator.getCost(savings);	  aiderCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
530	[BUG]  [BUGGY]  assistCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  assistCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	assistCodeCost  =  InlineCostEstimator.getCost(reduction);	  aiderCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
531	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  savings);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
532	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  saving);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  saving);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
533	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null  +  1);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
534	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null,  savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  null,  savings);	  NodeTraversal.traverse(compiler,    root,    reduction,    null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
535	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null,  saver);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null,  saver);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  null,  saver);	  NodeTraversal.traverse(compiler,    root,    reduction,    null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
536	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null,  helperCode);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null,  helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  null,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reduction,    null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
537	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(saved);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(saved);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).addChildrenToFront(saved);	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
538	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  saving);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  saving);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
539	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  savings);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  savings);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
540	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  savings  +  1);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  savings  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(null,  savings  +  1);	  reducer    =    compiler.getNodeForCodeInsertion(null,    savings);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
541	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSecondChildren();  }  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSecondChildren();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateSecondChildren();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateChildren();    }    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
542	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  savings.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  savings.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers  +=  savings.estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
543	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving,  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  saving,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  saving,  savings);	  NodeTraversal.traverse(compiler,    root,    reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
544	[BUG]  [BUGGY]  if(saving  >  0)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(saving  >  0)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(saving  >  0)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(saving);  savers.addChildrenToFront(reduction);  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(saving);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
545	[BUG]  [BUGGY]  if(reduction  ==  reduction)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(reduction  ==  reduction)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction  ==  reduction)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
546	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  savings);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  savings);	  reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
547	[BUG]  [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	reducer  =  compiler.getNodeForCodeInsertion(null,  reduction,  saving);	  reducer    =    compiler.getNodeForCodeInsertion(null,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	15	None	replace
548	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.expectedSavings();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.expectedSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.expectedSavings();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.previousSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
549	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost);  savings  +=  reduction.estimateSavings();  }	  helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
550	[BUG]  [BUGGY]  if(helperCodeCost!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  reduction)  {  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  savings  +=  reduction.estimateSavings();  }	  helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
551	[BUG]  [BUGGY]  Savings  savings  =  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Savings  savings  =  reduction.estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Savings  savings  =  reduction.estimateSavings();	  helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    savings    +=    reduction.estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
552	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation()).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation()).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocation()).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
553	[BUG]  [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildToFront(reduction);	  if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
554	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
555	[BUG]  [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
556	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  saving).estimateSavings();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  saving).estimateSavings();  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getLocalPart(),  saving).estimateSavings();	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction.getLocalPart()).estimateSavings();    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
557	[BUG]  [BUGGY]  if(reduction  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(reduction  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(reduction  ==  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  if(helperCodeCost!=  null)  {  return;  }	  if(helperCode    ==    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
558	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMemberState();  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMemberState();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateMemberState();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateFunctionState();    }    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
559	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  SAVINGS_THRESHOLD;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savings  +=  SAVINGS_THRESHOLD;	  if(helperCode!=    null)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savings    +=    reduction.estimateSavings();    }    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
560	[BUG]  [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	boolean  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  saving);	  boolean    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
561	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  *  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  *  1;  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction).estimateSavings()  *  1;	  int    helperCodeCost    =    InlineCostEstimator.getCost(reduction).estimateSavings()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
562	[BUG]  [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  continue;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    ==    null)    {    continue;    }    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
563	[BUG]  [BUGGY]  if(helperCodeCost!=  InlineCostEstimator.getCost(reduction))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCodeCost!=  InlineCostEstimator.getCost(reduction))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCodeCost!=  InlineCostEstimator.getCost(reduction))  {  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(saved)    {    int    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
564	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction.getParent());  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction.getParent());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(reduction.getParent());	  int    helperCodeCost    =    InlineChildEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
565	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction.getName());  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction.getName());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(reduction.getName());	  int    helperCodeCost    =    InlineChildEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
566	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction.getLocalPart());  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineChildEstimator.getCost(reduction.getLocalPart());  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineChildEstimator.getCost(reduction.getLocalPart());	  int    helperCodeCost    =    InlineChildEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	34	None	replace
567	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings,  helperCode);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings,  helperCode);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savings,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reductions,    savings);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
568	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings,  reducer);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings,  reducer);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  savings,  reducer);	  NodeTraversal.traverse(compiler,    root,    savings);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
569	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings,  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  NodeTraversal.traverse(compiler,  root,  savings,  reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	NodeTraversal.traverse(compiler,  root,  savings,  reduction);	  NodeTraversal.traverse(compiler,    root,    savings);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
570	[BUG]  [BUGGY]  HelperCodeCost  <  T>  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  T>  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  T>  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  HelperCodeCost    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
571	[BUG]  [BUGGY]  HelperCodeCost  <=  InlineCostEstimator.getCost(reduction);  [CE]  not  a  statement  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <=  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <=  InlineCostEstimator.getCost(reduction);	  HelperCodeCost    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  not  a  statement	121	None	replace
572	[BUG]  [BUGGY]  Traversal.traverse(compiler,  root,  reductions);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  Traversal.traverse(compiler,  root,  reductions);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	Traversal.traverse(compiler,  root,  reductions);	  NodeTraversal.traverse(compiler,    externs,    reductions);    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
573	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(savings  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(savings  +  1);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(savings  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(savings);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
574	[BUG]  [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	HelperCodeCost  <  N>  helperCodeCost  =  InlineCostEstimator.getCost(reduction,  reducer);	  HelperCodeCost    <    N>    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
575	[BUG]  [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost  ==  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost    ==    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
576	[BUG]  [BUGGY]  if(savings!=  null)  {  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(savings!=  null)  {  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(savings!=  null)  {  if(helperCodeCost  ==  null)  {  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  savers.addChildrenToFront(reduction);  }	  if(savings!=    null)    {    if(helperCodeCost!=    null)    {    helperCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    }    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
577	[BUG]  [BUGGY]  aiderCode  =  InlineCostEstimator.getCost(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  aiderCode  =  InlineCostEstimator.getCost(reduction);  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	aiderCode  =  InlineCostEstimator.getCost(reduction);	  aiderCodeCost    =    InlineCostEstimator.getCost(reduction);    savers.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
578	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocation();  }  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocation();  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	for(Reduction  reduction  :  reductions.values())  {  helperCodeCost  +=  reduction.estimateLocation();  }	  for(Reduction    reduction    :    reductions.values())    {    helperCodeCost    +=    reduction.estimateSuccess();    }    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
579	[BUG]  [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(helperCode!=  null)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
580	[BUG]  [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();      [BUGGY]  if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }  [BUGGY]          if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	89	89	1	replace	if(saved)  {  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  if(helperCodeCost!=  null)  {  return;  }	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCode);    if(helperCodeCost!=    null)    {    return;    }    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
