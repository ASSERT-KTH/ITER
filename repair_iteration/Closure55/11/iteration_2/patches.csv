bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  >=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  >=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  >=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
2	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
3	[BUG]  [BUGGY]  Preconditions.checkState(rededuction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(rededuction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(rededuction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
4	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperCodeCost();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperCodeCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperCodeCost();	  ReductionGatherer    helperCode    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
5	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperCodeInsertion();	  ReductionGatherer    helperCode    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
6	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperCode();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperCode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperCode();	  ReductionGatherer    helperCode    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
7	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCodeCost(savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCodeCost(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.gethelperCodeCost(savings);	  ReductionGatherer    helperCode    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
8	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.gethelperCodeInsertion();	  ReductionGatherer    helperCode    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
9	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helper);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helper);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helper);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
10	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost,  savings);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
11	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(false);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(false);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(false);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
12	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
13	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
14	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
15	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  &&  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
16	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
17	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getCompilerForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getCompilerForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getCompilerForCodeInsertion(null);	  NodeHelper    compiler    =    reduction.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
18	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getCompiler(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getCompiler(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getCompiler(helperCodeCost);	  NodeHelper    compiler    =    reduction.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
19	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getCompilerForCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getCompilerForCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getCompilerForCodeInsertion();	  NodeHelper    compiler    =    reduction.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
20	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getCompilerInstance();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getCompilerInstance();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getCompilerInstance();	  NodeHelper    compiler    =    reduction.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
21	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getCompiler(null);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getCompiler(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getCompiler(null);	  NodeHelper    compiler    =    reduction.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
22	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reduction.getType());  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reduction.getType());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reduction.getType());	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
23	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getChildCount());  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getChildCount());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getChildCount());	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
24	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
25	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getName());  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getName());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getName());	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
26	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.toString());  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.toString());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.toString());	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	101	None	replace
27	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(savings  -  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(savings  -  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(savings  -  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    -    1);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
28	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductionMap.get(helperCodeCost  -  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductionMap.get(helperCodeCost  -  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductionMap.get(helperCodeCost  -  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    -    1);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
29	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getLocation()  -  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getLocation()  -  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.getLocation()  -  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    -    1);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
30	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getType()  -  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getType()  -  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.getType()  -  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    -    1);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
31	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  -  2);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  -  2);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  -  2);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    -    1);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
32	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost.getType()  ==  Token.CUSTOM);	  Preconditions.checkState(helperCode.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
33	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings.getType()  ==  Token.CUSTOM);	  Preconditions.checkState(helperCode.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
34	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM,  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM,  savings);	  Preconditions.checkState(helperCode.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
35	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM,  reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM,  reduction);	  Preconditions.checkState(helperCode.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
36	[BUG]  [BUGGY]  Preconditions.checkState(compiler.getType()  ==  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(compiler.getType()  ==  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(compiler.getType()  ==  Token.CUSTOM);	  Preconditions.checkState(helperCode.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
37	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion();	  HelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
38	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode(savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCode(savings);	  HelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
39	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCode(helperCodeCost);	  HelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
40	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion(null);	  HelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
41	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHELPER_SOURCE();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHELPER_SOURCE();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCodeCost  =  reduction.getHELPER_SOURCE();	  HelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
42	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion(savings);	  HelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getChildCount()  ==  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getChildCount()  ==  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getChildCount()  ==  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
44	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >=  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >=  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getChildCount()  >=  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
45	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getChildCount()  <  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getChildCount()  <  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getChildCount()  <  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
46	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getChildCount()!=  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getChildCount()!=  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getChildCount()!=  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
47	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
48	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  +  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  +  savings);	  Preconditions.checkState(reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
49	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  <  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  <  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  <  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
50	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  +  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  +  1);	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    savings);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
51	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    savings);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
52	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  +  reduction.estimateSavings());  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  +  reduction.estimateSavings());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  +  reduction.estimateSavings());	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    savings);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
53	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  reduction.getChildCount());  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  reduction.getChildCount());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  reduction.getChildCount());	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    savings);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
54	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  reduction.getChildCount()  +  savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  reduction.getChildCount()  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  reduction.getChildCount()  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    savings);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
55	[BUG]  [BUGGY]  Preconditions.checkState(reduction  ==  reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction  ==  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction  ==  reduction);	  Preconditions.checkState(reduction!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
56	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  reduction.reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  reduction.reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  reduction.reduction);	  Preconditions.checkState(reduction!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
57	[BUG]  [BUGGY]  Preconditions.checkState(reduction  >=  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction  >=  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction  >=  reduction);	  Preconditions.checkState(reduction!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
58	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  reduction,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  reduction,  saving);	  Preconditions.checkState(reduction!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
59	[BUG]  [BUGGY]  Preconditions.checkState(savings!=  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings!=  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings!=  reduction);	  Preconditions.checkState(reduction!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
60	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  reduction;  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  reduction;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  reduction;	  Preconditions.checkState(reduction!=    reduction);    	non-compiled	[CE]  ')'  expected	129	None	replace
61	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
62	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction  reduction);  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction  reduction);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  ')'  expected	127	None	replace
63	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  reduction);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
64	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getReductionForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  compiler.getReductionForCodeInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  compiler.getReductionForCodeInsertion(reduction);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
65	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(rededuction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(rededuction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(rededuction);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
66	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCodeCost);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
67	[BUG]  [BUGGY]  Preconditions.checkState(reduction  ==  null);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction  ==  null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction  ==  null);	  Preconditions.checkState(reduction!=    null);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
68	[BUG]  [BUGGY]  Preconditions.checkState(reduction  >=  null);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction  >=  null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction  >=  null);	  Preconditions.checkState(reduction!=    null);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
69	[BUG]  [BUGGY]  Preconditions.checkState(savings!=  null);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings!=  null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings!=  null);	  Preconditions.checkState(reduction!=    null);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
70	[BUG]  [BUGGY]  Preconditions.checkState(helperCode!=  null);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode!=  null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode!=  null);	  Preconditions.checkState(reduction!=    null);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
71	[BUG]  [BUGGY]  Preconditions.checkState(reduction  [Delete]  null);  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction  [Delete]  null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction  [Delete]  null);	  Preconditions.checkState(reduction!=    null);    	non-compiled	[CE]  ')'  expected	130	None	replace
72	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHELPER_SOURCE();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getHELPER_SOURCE();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getHELPER_SOURCE();	  Node    helperCode    =    reduction.getNode();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
73	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getImmediateParentNode();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getImmediateParentNode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getImmediateParentNode();	  Node    helperCode    =    reduction.getNode();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
74	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion();	  Node    helperCode    =    reduction.getNode();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
75	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getSingleNode();  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getSingleNode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getSingleNode();	  Node    helperCode    =    reduction.getNode();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
76	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getType()  ==  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getType()  ==  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getType()  ==  Token.CUSTOM);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
77	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()!=  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()!=  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()!=  Token.CUSTOM);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
78	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
79	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM,  savings);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
80	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  &&  reduction.getType()  ==  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  &&  reduction.getType()  ==  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  &&  reduction.getType()  ==  Token.CUSTOM);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
81	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(HELPER_SOURCE);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(HELPER_SOURCE);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(HELPER_SOURCE);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
82	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  /  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCode    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
83	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer(),  savings);  [CE]  ';'  expected  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInsertionGatherer(),  savings);	  ReductionGatherer    helperCode    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  ';'  expected	83	None	replace
84	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  -  savings;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  -  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  -  savings;	  ReductionGatherer    helperCode    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
85	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer(),  savings;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer(),  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInsertionGatherer(),  savings;	  ReductionGatherer    helperCode    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
86	[BUG]  [BUGGY]  reducer.addChildrenToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildrenToBack(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildrenToBack(reduction);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
87	[BUG]  [BUGGY]  reduction.addChildToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reduction.addChildToBack(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reduction.addChildToBack(reduction);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
88	[BUG]  [BUGGY]  reducer.addChildToBack(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildToBack(reduction,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildToBack(reduction,  reduction);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
89	[BUG]  [BUGGY]  reducer.addChildToBack(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildToBack(reduction,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildToBack(reduction,  saving);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
90	[BUG]  [BUGGY]  reducer.addChildToBack(saving);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildToBack(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildToBack(saving);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
91	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeCost();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeCost();	  ReductionGatherer    helperCodeCost    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
92	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(savings);	  ReductionGatherer    helperCodeCost    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
93	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeCost(savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeCost(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeCost(savings);	  ReductionGatherer    helperCodeCost    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
94	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost()  +  savings;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost()  +  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost()  +  savings;	  ReductionGatherer    helperCodeCost    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
95	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(),  savings);  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(),  savings);	  ReductionGatherer    helperCodeCost    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  ';'  expected	154	None	replace
96	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  >=  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  >=  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  >=  Token.CUSTOM);	  Preconditions.checkState(reduction.getType()!=    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
97	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()!=  Token.CUSTOM);	  Preconditions.checkState(reduction.getType()!=    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
98	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()!=  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings.getType()!=  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings.getType()!=  Token.CUSTOM);	  Preconditions.checkState(reduction.getType()!=    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
99	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost,  savings);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
100	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getReductionForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getReductionForCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getReductionForCodeInsertion(helperCodeCost);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
101	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reductions.getNodeForCodeInsertion(helperCodeCost);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  illegal  start  of  expression	14	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >=  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >=  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >=  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  <  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  <  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  <  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()!=  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()!=  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()!=  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  ==  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  ==  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  ==  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
108	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.RETURN);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.RETURN);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.RETURN);	  Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
109	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN,  savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.RETURN,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
110	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.RETURN  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
111	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
112	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
113	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN,  saving);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.RETURN,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
114	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingReduction(),  savings);  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getInitializingReduction(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getInitializingReduction(),  savings);	  Node    helperCode    =    reduction.getInitializingReduction();    	non-compiled	[CE]  ';'  expected	141	None	replace
115	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingReduction(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getInitializingReduction(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getInitializingReduction(helperCodeCost);	  Node    helperCode    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
116	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingReduction(savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getInitializingReduction(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getInitializingReduction(savings);	  Node    helperCode    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
117	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingReductionCost();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getInitializingReductionCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getInitializingReductionCost();	  Node    helperCode    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
118	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(helperCodeCost);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
119	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(savings);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
120	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(reduction);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
121	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(saving);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(saving);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
122	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  saving);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  saving);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
123	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(null);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
124	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(null);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.removeChild(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.removeChild(null);	  reducer.removeChild(null);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
125	[BUG]  [BUGGY]  reducer.removeChild(reduction  reduction);  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.removeChild(reduction  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.removeChild(reduction  reduction);	  reducer.removeChild(null);    	non-compiled	[CE]  ')'  expected	145	None	replace
126	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost,  saving);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost,  saving);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
127	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperCost();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getHelperCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getHelperCost();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
128	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperInsertion();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getHelperInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getHelperInsertion();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
129	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelper(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getHelper(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getHelper(helperCodeCost);	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
130	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperInsertion(null);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getHelperInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getHelperInsertion(null);	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
131	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelper(),  savings);  [CE]  ';'  expected  [FE]                                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getHelper(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getHelper(),  savings);	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  ';'  expected	52	None	replace
132	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  +  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
133	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  +  helperCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
134	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
135	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  +  helperCode);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
136	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  COLLECTION);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  COLLECTION);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  +  COLLECTION);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
137	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  SAVINGS_THRESHOLD,  savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  SAVINGS_THRESHOLD,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  +  SAVINGS_THRESHOLD,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
138	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(savings  +  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(savings  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(savings  +  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
139	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductionMap.get(helperCodeCost  +  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductionMap.get(helperCodeCost  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductionMap.get(helperCodeCost  +  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
140	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction  +  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction  +  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
141	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(SAVINGS_THRESHOLD  +  1);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(SAVINGS_THRESHOLD  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(SAVINGS_THRESHOLD  +  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
142	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(saving  +  1);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(saving  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(saving  +  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
143	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  2);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  2);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  +  2);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
144	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  /  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
145	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  +  savings;  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  +  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  +  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
146	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperSecond();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperSecond();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperSecond();	  ReductionGatherer    helperCodeCost    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
147	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  +  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  +  1;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  +  1;	  ReductionGatherer    helperCodeCost    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
148	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.NAME);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
149	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.NAME);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
150	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
151	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME,  helperCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
152	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.NAME);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
153	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
154	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getLocalName());  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getLocalName());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getLocalName());	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
155	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelper(reduction);	  NodeHelper    compiler    =    reduction.getHelper(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
156	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelper(savings);	  NodeHelper    compiler    =    reduction.getHelper(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
157	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelper(saving);	  NodeHelper    compiler    =    reduction.getHelper(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
158	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(helperCodeCost,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelper(helperCodeCost,  savings);	  NodeHelper    compiler    =    reduction.getHelper(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
159	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reductions.getNodeForCodeInsertion(savings);	  Node    helperCode    =    reductions.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
160	[BUG]  [BUGGY]  Node  helperCode  =  reductionMap.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reductionMap.getNodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reductionMap.getNodeForCodeInsertion(null);	  Node    helperCode    =    reductions.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
161	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(helper);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(helper);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reductions.getNodeForCodeInsertion(helper);	  Node    helperCode    =    reductions.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
162	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  /  savings;  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  /  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  /  savings;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    savings;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
163	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  *  savings;  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  *  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  *  savings;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    savings;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
164	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  +  saves;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  +  saves;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  +  saves;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    savings;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
165	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  savings  +  1);  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  savings  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  savings  +  1);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer(),    savings);    	non-compiled	[CE]  ';'  expected	34	None	replace
166	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  saving);  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  saving);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer(),    savings);    	non-compiled	[CE]  ';'  expected	34	None	replace
167	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper(),  savings);  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelper(),  savings);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer(),    savings);    	non-compiled	[CE]  ';'  expected	34	None	replace
168	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  saves);  [CE]  ';'  expected  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  saves);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  saves);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer(),    savings);    	non-compiled	[CE]  ';'  expected	34	None	replace
169	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer(),  savings);  [CE]  ';'  expected  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer(),  savings);	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer(),    savings);    	non-compiled	[CE]  ';'  expected	34	None	replace
170	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving  +  savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    saving);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
171	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving  -  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving  -  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving  -  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    saving);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
172	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    saving);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
173	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings  +  1);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings  +  1);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    saving);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
174	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getAssignedHelper(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getAssignedHelper(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getAssignedHelper(helperCodeCost);	  NodeHelper    compiler    =    reduction.getAssignedHelper();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
175	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getAssignedHelper(helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getAssignedHelper(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getAssignedHelper(helperCode);	  NodeHelper    compiler    =    reduction.getAssignedHelper();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
176	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getAssignedHelper(savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getAssignedHelper(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getAssignedHelper(savings);	  NodeHelper    compiler    =    reduction.getAssignedHelper();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
177	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getAssignedHelper(null);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getAssignedHelper(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getAssignedHelper(null);	  NodeHelper    compiler    =    reduction.getAssignedHelper();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
178	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getNodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getNodeForCodeInsertion(null);	  NodeHelper    compiler    =    reduction.getAssignedHelper();    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
179	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(savings,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(savings,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(savings,  helperCodeCost);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
180	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  savings);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
181	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost,  reduction);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
182	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
183	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD,  helperCodeCost);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
184	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(savings,  HelperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(savings,  HelperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(savings,  HelperCodeCost);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
185	[BUG]  [BUGGY]  helperCodeCost.addReduction(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCodeCost.addReduction(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCodeCost.addReduction(reduction);	  helperCode.addReduction(reduction);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
186	[BUG]  [BUGGY]  aiderCode.addReduction(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  aiderCode.addReduction(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	aiderCode.addReduction(reduction);	  helperCode.addReduction(reduction);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
187	[BUG]  [BUGGY]  HelperCode.addReduction(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addReduction(reduction,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addReduction(reduction,  reduction);	  helperCode.addReduction(reduction);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
188	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductionMap.get(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductionMap.get(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductionMap.get(helperCodeCost  +  SAVINGS_THRESHOLD);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
189	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(savings  +  HelperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(savings  +  HelperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(savings  +  HelperCodeCost);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
190	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction  +  SAVINGS_THRESHOLD);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
191	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  -  savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  -  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  -  savings);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
192	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  *  savings);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  *  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  *  savings);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
193	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(savings  +  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(savings  +  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(savings  +  helperCodeCost);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
194	[BUG]  [BUGGY]  HelperCode.addReduction(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addReduction(reduction,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addReduction(reduction,  saving);	  HelperCode.addReduction(reduction);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
195	[BUG]  [BUGGY]  HelperCode.addReduction(reduction,  reducer);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addReduction(reduction,  reducer);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addReduction(reduction,  reducer);	  HelperCode.addReduction(reduction);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
196	[BUG]  [BUGGY]  HelperCode.addReduction(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addReduction(reduction,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addReduction(reduction,  savings);	  HelperCode.addReduction(reduction);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
197	[BUG]  [BUGGY]  HelperCode.removeReduction(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.removeReduction(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.removeReduction(reduction);	  HelperCode.addReduction(reduction);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
198	[BUG]  [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion();	  NodeHelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
199	[BUG]  [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(helperCodeCost);	  NodeHelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
200	[BUG]  [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(savings);	  NodeHelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
201	[BUG]  [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCodeCost  =  reduction.getHelperCodeInsertion(null);	  NodeHelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
202	[BUG]  [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHELPER_SOURCE();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHELPER_SOURCE();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCodeCost  =  reduction.getHELPER_SOURCE();	  NodeHelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
203	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildrenToFront(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildrenToFront(reduction);	  reducer.removeChild(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
204	[BUG]  [BUGGY]  reducer.replaceChild(root,  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.replaceChild(root,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.replaceChild(root,  reduction);	  reducer.removeChild(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	128	None	replace
205	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getCompilerNode();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getCompilerNode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getCompilerNode();	  NodeHelper    compiler    =    reduction.getImmediateParentNode();    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
206	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentNode(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentNode(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getImmediateParentNode(helperCodeCost);	  NodeHelper    compiler    =    reduction.getImmediateParentNode();    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
207	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentNode(null);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentNode(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getImmediateParentNode(null);	  NodeHelper    compiler    =    reduction.getImmediateParentNode();    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
208	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getNodeForCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getNodeForCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getNodeForCodeInsertion();	  NodeHelper    compiler    =    reduction.getImmediateParentNode();    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
209	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost,  saving);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
210	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(parent,  saving);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(parent,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(parent,  saving);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
211	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(saving,  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(saving,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(saving,  reduction);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
212	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  saving  +  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  saving  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  saving  +  1);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
213	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(null,  saving);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  compiler.getNodeForCodeInsertion(null,  saving);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
214	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost.getType()  ==  Token.COST);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings.getType()  ==  Token.COST);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(compiler.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(compiler.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(compiler.getType()  ==  Token.COST);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST,  savings);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.COST);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()!=  Token.COST);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
219	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings  +  1);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings  +  1);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null    +    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
220	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD  +  1);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null    +    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
221	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  1);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  1);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null    +    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
222	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(saving  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(saving  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(saving  +  1);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null    +    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
223	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction.getChildCount()  +  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction.getChildCount()  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction.getChildCount()  +  1);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null    +    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
224	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getType()  ==  Token.GETPROP);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getType()  ==  Token.GETPROP);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
225	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.GETPROP);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.GETPROP);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
226	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
227	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getType()  ==  Token.GETPROP);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getType()  ==  Token.GETPROP);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
228	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
229	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  >=  Token.COST);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  >=  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  >=  Token.COST);	  Preconditions.checkState(reduction.getType()!=    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
230	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()!=  Token.COST);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings.getType()!=  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings.getType()!=  Token.COST);	  Preconditions.checkState(reduction.getType()!=    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
231	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  /  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  /  1;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  /  1;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
232	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(null,  saving);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelper(null,  saving);	  NodeHelper    compiler    =    reduction.getHelper(null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
233	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(null,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelper(null,  helperCodeCost);	  NodeHelper    compiler    =    reduction.getHelper(null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
234	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(saving);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(saving);	  int    helperCodeCost    =    reduction.getHelperCodeCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
235	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(SAVINGS_THRESHOLD);	  int    helperCodeCost    =    reduction.getHelperCodeCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
236	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(saver);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(saver);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(saver);	  int    helperCodeCost    =    reduction.getHelperCodeCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
237	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(saved);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(saved);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(saved);	  int    helperCodeCost    =    reduction.getHelperCodeCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
238	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  saving  +  savings);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  saving  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  saving  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    saving);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
239	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  saving  -  savings);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  saving  -  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  saving  -  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    saving);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
240	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.getChildCount());  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.getChildCount());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.getChildCount());	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    saving);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
241	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  saving  +  1);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  saving  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  saving  +  1);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    saving);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
242	[BUG]  [BUGGY]  helperCodeCost.addChildToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCodeCost.addChildToBack(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCodeCost.addChildToBack(reduction);	  helperCode.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
243	[BUG]  [BUGGY]  helperCode.addChildrenToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCode.addChildrenToBack(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCode.addChildrenToBack(reduction);	  helperCode.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
244	[BUG]  [BUGGY]  aiderCode.addChildToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  aiderCode.addChildToBack(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	aiderCode.addChildToBack(reduction);	  helperCode.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
245	[BUG]  [BUGGY]  helperCode.addChildToBack(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCode.addChildToBack(reduction,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCode.addChildToBack(reduction,  reduction);	  helperCode.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
246	[BUG]  [BUGGY]  HelperCode.addChildToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addChildToBack(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addChildToBack(reduction);	  helperCode.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	135	None	replace
247	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
248	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.COST);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
249	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
250	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
251	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST,  savings);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
252	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateCompiler();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateCompiler();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getImmediateCompiler();	  NodeHelper    compiler    =    reduction.getImmediateParent();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
253	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateStatement();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateStatement();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getImmediateStatement();	  NodeHelper    compiler    =    reduction.getImmediateParent();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
254	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParent(parent);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParent(parent);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getImmediateParent(parent);	  NodeHelper    compiler    =    reduction.getImmediateParent();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
255	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost);	  Node    helperCode    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
256	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  compiler.getNodeForCodeInsertion(savings);	  Node    helperCode    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
257	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  compiler.getNodeForCodeInsertion(null,  reduction);	  Node    helperCode    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
258	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(helper);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(helper);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  compiler.getNodeForCodeInsertion(helper);	  Node    helperCode    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
259	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(saving);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  compiler.getNodeForCodeInsertion(saving);	  Node    helperCode    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
260	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  /  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  /  SAVINGS_THRESHOLD;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    SAVINGS_THRESHOLD;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
261	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  *  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  *  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  *  SAVINGS_THRESHOLD;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    SAVINGS_THRESHOLD;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
262	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  -  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  -  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  -  SAVINGS_THRESHOLD;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    SAVINGS_THRESHOLD;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
263	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  +  saving;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  +  saving;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  +  saving;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    SAVINGS_THRESHOLD;    	non-compiled	[CE]  illegal  start  of  expression	26	None	replace
264	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperInsertion();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperInsertion();	  ReductionGatherer    helperCodeCost    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
265	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction(savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction(savings);	  ReductionGatherer    helperCodeCost    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
266	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperReduction();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperReduction();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.gethelperReduction();	  ReductionGatherer    helperCodeCost    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
267	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
268	[BUG]  [BUGGY]  reducer.removeChild(reductionCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.removeChild(reductionCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.removeChild(reductionCost);	  reducer.removeChild(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	126	None	replace
269	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(savings);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
270	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
271	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  saving);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  saving);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
272	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(reduction);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
273	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(saving);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(saving);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
274	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  savings);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
275	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.removeChild(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.removeChild(reduction);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
276	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.removeChild(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.removeChild(saving);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
277	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(root);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.removeChild(root);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.removeChild(root);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
278	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.getReduction().removeChild(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.getReduction().removeChild(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.getReduction().removeChild(reduction);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
279	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(saved);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.removeChild(saved);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.removeChild(saved);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
280	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost(savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeCost(savings);	  HelperCode    helperCode    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
281	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost();	  HelperCode    helperCode    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
282	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost()  +  savings;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost()  +  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeCost()  +  savings;	  HelperCode    helperCode    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
283	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductionMap.get(SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductionMap.get(SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductionMap.get(SAVINGS_THRESHOLD);	  NodeHelper    compiler    =    reductions.get(SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
284	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost,  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost,  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost,  SAVINGS_THRESHOLD);	  NodeHelper    compiler    =    reductions.get(SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
285	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCode);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCode);	  NodeHelper    compiler    =    reductions.get(SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.FUNCTION);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.FUNCTION);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.FUNCTION);	  Preconditions.checkNotNull(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
287	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getSingleNodeHelper(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getSingleNodeHelper(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getSingleNodeHelper(helperCodeCost);	  NodeHelper    compiler    =    reduction.getSingleNodeHelper();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
288	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getReductionSingleNodeHelper();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getReductionSingleNodeHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getReductionSingleNodeHelper();	  NodeHelper    compiler    =    reduction.getSingleNodeHelper();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
289	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getSingleReturnStatement();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getSingleReturnStatement();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getSingleReturnStatement();	  NodeHelper    compiler    =    reduction.getSingleNodeHelper();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
290	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getNodeHelper(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getNodeHelper(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getNodeHelper(helperCodeCost);	  NodeHelper    compiler    =    reduction.getNodeHelper();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
291	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getCurrentNodeHelper();  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getCurrentNodeHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getCurrentNodeHelper();	  NodeHelper    compiler    =    reduction.getNodeHelper();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
292	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getReductionHelper();  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getReductionHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getReductionHelper();	  NodeHelper    compiler    =    reduction.getNodeHelper();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
293	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  /  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
294	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  +  savings;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  +  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  +  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
295	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  -  savings;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  -  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  -  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
296	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer(),  savings;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer(),  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer(),  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
297	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(parent);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(parent);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(parent);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(helper);    	non-compiled	[CE]  illegal  start  of  expression	18	None	replace
298	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings  +  1;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings  +  1;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    -    savings;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
299	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  -  saving;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  -  saving;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  -  saving;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    -    savings;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
300	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  +  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    saving);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  -  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  -  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  -  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    saving);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
302	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST,  saving);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.COST,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    saving);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
303	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  +  reduction.estimateSavings());  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  +  reduction.estimateSavings());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  +  reduction.estimateSavings());	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    saving);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
304	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReduction();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReduction();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingReduction();	  ReductionGatherer    helperCodeCost    =    reduction.getImplicitReduction();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
305	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImplicitInsertion();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImplicitInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getImplicitInsertion();	  ReductionGatherer    helperCodeCost    =    reduction.getImplicitReduction();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
306	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImplicitStructure();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImplicitStructure();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getImplicitStructure();	  ReductionGatherer    helperCodeCost    =    reduction.getImplicitReduction();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
307	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getFunctionReduction();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getFunctionReduction();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getFunctionReduction();	  ReductionGatherer    helperCodeCost    =    reduction.getImplicitReduction();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
308	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getEmptyReduction();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getEmptyReduction();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getEmptyReduction();	  ReductionGatherer    helperCodeCost    =    reduction.getImplicitReduction();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
309	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(null,  savings);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(null,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(null,  savings);	  HelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
310	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost(null);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeCost(null);	  HelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
311	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(reduction);	  HelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
312	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(reduction);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
313	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(SAVINGS_THRESHOLD);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
314	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  savings);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
315	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(saving);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
316	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  saving);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
317	[BUG]  [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCodeCost();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCodeCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCodeCost  =  reduction.getHelperCodeCost();	  NodeHelperCode    helperCode    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
318	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(helperCodeCost);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
319	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(savings);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
320	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
321	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
322	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
323	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
324	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  >=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  >=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  >=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
325	[BUG]  [BUGGY]  Preconditions.checkState(savings  ==  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings  ==  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings  ==  reduction);	  Preconditions.checkNotNull(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
326	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  savings);	  HelperCode    helperCode    =    reduction.getHelperCode(savings);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
327	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost);	  HelperCode    helperCode    =    reduction.getHelperCode(savings);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
328	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addChildrenToFront(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addChildrenToFront(reduction);	  HelperCode.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
329	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addChildrenToFront(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addChildrenToFront(helperCodeCost);	  HelperCode.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
330	[BUG]  [BUGGY]  HelperCode.reportCodeChange(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.reportCodeChange(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.reportCodeChange(reduction);	  HelperCode.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
331	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addChildrenToFront(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addChildrenToFront(helperCode);	  HelperCode.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
332	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addChildrenToFront(reduction.getFirstChild());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addChildrenToFront(reduction.getFirstChild());	  HelperCode.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
333	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.NAME);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost.getType()  ==  Token.NAME);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
334	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.NAME);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings.getType()  ==  Token.NAME);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME,  savings);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(compiler.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(compiler.getType()  ==  Token.NAME);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(compiler.getType()  ==  Token.NAME);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
337	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getSingleReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getSingleReductionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getSingleReductionGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getLocalReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
338	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion();	  ReductionGatherer    helperCodeCost    =    reduction.getLocalReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
339	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getFunctionReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getFunctionReductionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getFunctionReductionGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getLocalReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
340	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(0);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(0);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(0);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion();    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
341	[BUG]  [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);	  reducer.addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
342	[BUG]  [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);  reducer.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);  reducer.addChildToFront(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);  reducer.addChildToFront(reduction);	  reducer.addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
343	[BUG]  [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildToFront(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildToFront(helperCode);	  reducer.addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
344	[BUG]  [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildToFront(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildToFront(helperCodeCost);	  reducer.addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
345	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
346	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.COST);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
347	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
348	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST,  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
349	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
350	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
351	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
352	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
353	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  savings);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
354	[BUG]  [BUGGY]  Preconditions.checkState(compiler.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(compiler.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(compiler.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
355	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
356	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >=  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >=  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >=  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
357	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  <  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  <  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  <  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
358	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()!=  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()!=  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()!=  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
359	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  ==  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  ==  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  ==  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
361	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.getReduction().removeChild(parent);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.getReduction().removeChild(parent);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.getReduction().removeChild(parent);	  Reducer    reducer    =    reduction.removeChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
362	[BUG]  [BUGGY]  Reducer  reducer  =  parent.removeChild(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  parent.removeChild(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  parent.removeChild(reduction);	  Reducer    reducer    =    reduction.removeChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
363	[BUG]  [BUGGY]  reducer.addChildToFront(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildToFront(reduction,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildToFront(reduction,  reduction);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
364	[BUG]  [BUGGY]  reducer.addChildToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildToFront(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildToFront(helperCodeCost);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
365	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.getCodeCost();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  code  =  reduction.getCodeCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  code  =  reduction.getCodeCost();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
366	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.getCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  code  =  reduction.getCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  code  =  reduction.getCodeInsertion();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
367	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.getCost();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  code  =  reduction.getCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  code  =  reduction.getCost();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
368	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.getHelperCode();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  code  =  reduction.getHelperCode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  code  =  reduction.getHelperCode();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
369	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.getAssignedHelper();  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  code  =  reduction.getAssignedHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  code  =  reduction.getAssignedHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
370	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.getNodeHelper();  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  code  =  reduction.getNodeHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  code  =  reduction.getNodeHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
371	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReduction(savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReduction(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingReduction(savings);	  NodeHelper    compiler    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
372	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReduction(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReduction(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingReduction(helperCodeCost);	  NodeHelper    compiler    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
373	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReduction(),  savings);  [CE]  ';'  expected  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReduction(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingReduction(),  savings);	  NodeHelper    compiler    =    reduction.getInitializingReduction();    	non-compiled	[CE]  ';'  expected	98	None	replace
374	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
375	[BUG]  [BUGGY]  helperCodeCost.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCodeCost.addChildToFront(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCodeCost.addChildToFront(reduction);	  helperCode.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
376	[BUG]  [BUGGY]  aiderCode.addChildToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  aiderCode.addChildToFront(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	aiderCode.addChildToFront(reduction);	  helperCode.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
377	[BUG]  [BUGGY]  helperCode.addChildToFront(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCode.addChildToFront(reduction,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCode.addChildToFront(reduction,  reduction);	  helperCode.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
378	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.BLOCK);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.BLOCK);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
379	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.BLOCK,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
380	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
381	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.BLOCK);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.BLOCK);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
382	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.GETPROP);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.GETPROP);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
383	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
384	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.getReduction().removeChild(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.getReduction().removeChild(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.getReduction().removeChild(helperCodeCost);	  Reducer    reducer    =    reduction.removeChild(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
385	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getGuaranteed();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getGuaranteed();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getGuaranteed();	  ReductionGatherer    helperCode    =    reduction.gethelper();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
386	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelper()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelper()  /  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.gethelper()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCode    =    reduction.gethelper();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
387	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCost();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.gethelperCost();	  ReductionGatherer    helperCode    =    reduction.gethelper();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
388	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperInsertion(helperCodeCost);	  NodeHelper    compiler    =    reduction.getHelperInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
389	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperInsertion(savings);	  NodeHelper    compiler    =    reduction.getHelperInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
390	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperInsertion(reduction);	  NodeHelper    compiler    =    reduction.getHelperInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
391	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(null,  saving);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperInsertion(null,  saving);	  NodeHelper    compiler    =    reduction.getHelperInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
392	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(helperCode);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperInsertion(helperCode);	  NodeHelper    compiler    =    reduction.getHelperInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
393	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(null,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperInsertion(null,  savings);	  NodeHelper    compiler    =    reduction.getHelperInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
394	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(saving);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperInsertion(saving);	  NodeHelper    compiler    =    reduction.getHelperInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
395	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(helperCodeCost);	  NodeHelper    compiler    =    reduction.getHelperForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
396	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(savings);	  NodeHelper    compiler    =    reduction.getHelperForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
397	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(helperCode);	  NodeHelper    compiler    =    reduction.getHelperForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
398	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(reduction);	  NodeHelper    compiler    =    reduction.getHelperForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
399	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(null,  saving);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(null,  saving);	  NodeHelper    compiler    =    reduction.getHelperForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
400	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(null,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(null,  helperCodeCost);	  NodeHelper    compiler    =    reduction.getHelperForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
401	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  savings);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    saving);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
402	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  -  savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  -  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  -  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    saving);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
403	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings  +  1);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    saving);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
404	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  1);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    saving);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
405	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  reduction.estimateSavings());  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  reduction.estimateSavings());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  reduction.estimateSavings());	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    saving);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
406	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  *  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  *  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  *  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
407	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD  +  savings;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD  +  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD  +  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
408	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  HELPER_SOURCE;  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  HELPER_SOURCE;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  HELPER_SOURCE;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
409	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD  +  saves;  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD  +  saves;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD  +  saves;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
410	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  savings;  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
411	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(helperCodeCost);	  HelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
412	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(savings);	  HelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
413	[BUG]  [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(null);	  HelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
414	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(reduction);	  HelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
415	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  saving);	  HelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
416	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(saving);	  HelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
417	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reductions.getHelperCode();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCodeCost  =  reductions.getHelperCode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCodeCost  =  reductions.getHelperCode();	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
418	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCodeCost();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCodeCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reductions.getHelperCodeCost();	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
419	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductionMap.getHelperCode();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reductionMap.getHelperCode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reductionMap.getHelperCode();	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
420	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(null);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(null);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
421	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(null,  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(null,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(null,  savings);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
422	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction  +  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
423	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM,  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.CUSTOM,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
424	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.toString());  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.toString());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.toString());	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
425	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(savings);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
426	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingCompiler(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingCompiler(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingCompiler(helperCodeCost);	  NodeHelper    compiler    =    reduction.getInitializingCompiler();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
427	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingCompiler(null);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingCompiler(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingCompiler(null);	  NodeHelper    compiler    =    reduction.getInitializingCompiler();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
428	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingCompiler(reduction);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingCompiler(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingCompiler(reduction);	  NodeHelper    compiler    =    reduction.getInitializingCompiler();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
429	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper()  /  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelper()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
430	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelper();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.gethelper();	  ReductionGatherer    helperCodeCost    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
431	[BUG]  [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getHelper();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reductionGatherer  helperCodeCost  =  reduction.getHelper();	  ReductionGatherer    helperCodeCost    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
432	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  savings  +  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  savings  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  savings  +  1);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    savings);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
433	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.getFirstChild());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.getFirstChild());	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    savings);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
434	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.getName());  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.getName());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction.getName());	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    savings);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
435	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingGatherer(),  savings);  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingGatherer(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingGatherer(),  savings);	  ReductionGatherer    helperCode    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  ';'  expected	85	None	replace
436	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingGatherer()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingGatherer()  /  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingGatherer()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCode    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
437	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingGatherer(),  savings;  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingGatherer(),  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingGatherer(),  savings;	  ReductionGatherer    helperCode    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
438	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(SAVINGS_THRESHOLD);	  HelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
439	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(saver);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(saver);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(saver);	  HelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
440	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  saving);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  saving);	  HelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
441	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  aiderCode.addChildrenToFront(reduction,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	aiderCode.addChildrenToFront(reduction,  reduction);	  helperCode.addChildrenToFront(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
442	[BUG]  [BUGGY]  HelperCode.addReducerToFront(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addReducerToFront(reduction,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addReducerToFront(reduction,  reduction);	  helperCode.addChildrenToFront(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
443	[BUG]  [BUGGY]  helperCode.addChildrenToFront(reduction,  reductions);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCode.addChildrenToFront(reduction,  reductions);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCode.addChildrenToFront(reduction,  reductions);	  helperCode.addChildrenToFront(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
444	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addChildrenToFront(reduction,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addChildrenToFront(reduction,  reduction);	  helperCode.addChildrenToFront(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
445	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
446	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  ||  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  ||  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.COST  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
447	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
448	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.GETPROP);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.GETPROP);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
449	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(saving,  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(saving,  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(saving,  SAVINGS_THRESHOLD);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
450	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving  +  SAVINGS_THRESHOLD);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
451	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(reduction,  saving);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
452	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
453	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  SAVINGS_THRESHOLD);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
454	[BUG]  [BUGGY]  Node  HelperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  HelperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  HelperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
455	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer(),  savings);  [CE]  ';'  expected  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer(),  savings);	  ReductionGatherer    helperCode    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  ';'  expected	87	None	replace
456	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer()  /  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCode    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
457	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer(),  savings;  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer(),  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer(),  savings;	  ReductionGatherer    helperCode    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
458	[BUG]  [BUGGY]  helperCodeCost.addChildrenToFront(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCodeCost.addChildrenToFront(reduction,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCodeCost.addChildrenToFront(reduction,  reduction);	  helperCodeCost.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
459	[BUG]  [BUGGY]  aiderCodeCost.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  aiderCodeCost.addChildrenToFront(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	aiderCodeCost.addChildrenToFront(reduction);	  helperCodeCost.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
460	[BUG]  [BUGGY]  HelperCodeCost.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCodeCost.addChildrenToFront(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCodeCost.addChildrenToFront(reduction);	  helperCodeCost.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	59	None	replace
461	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  /  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
462	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer(),  savings;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer(),  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer(),  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
463	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  +  savings;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  +  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  +  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
464	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings,  helperCode);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings,  helperCode);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
465	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings,  null);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings,  null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings,  null);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
466	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  Savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  Savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  Savings);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
467	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reductionMap.getHelperCode();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reductionMap.getHelperCode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reductionMap.getHelperCode();	  NodeHelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
468	[BUG]  [BUGGY]  NodeHelperCode  helperCodeCost  =  reductions.getHelperCode();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCodeCost  =  reductions.getHelperCode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCodeCost  =  reductions.getHelperCode();	  NodeHelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
469	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCodeCost();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCodeCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reductions.getHelperCodeCost();	  NodeHelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
470	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getHelper(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getHelper(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getHelper(helperCodeCost);	  NodeHelper    compiler    =    reductions.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
471	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getCompiler();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getCompiler();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getCompiler();	  NodeHelper    compiler    =    reductions.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
472	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getImmediateParent();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getImmediateParent();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getImmediateParent();	  NodeHelper    compiler    =    reductions.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
473	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductionMap.getHelper();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductionMap.getHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductionMap.getHelper();	  NodeHelper    compiler    =    reductions.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
474	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
475	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(savings);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
476	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  saving);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  saving);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
477	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(reduction);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
478	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(saving);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(saving);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
479	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction,  helperCodeCost);	  NodeHelper    compiler    =    reductions.get(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
480	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction,  SAVINGS_THRESHOLD);	  NodeHelper    compiler    =    reductions.get(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
481	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductionMap.get(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductionMap.get(helperCodeCost,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductionMap.get(helperCodeCost,  reduction);	  NodeHelper    compiler    =    reductions.get(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
482	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction,  saving);	  NodeHelper    compiler    =    reductions.get(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
483	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  helperCode);  [CE]  illegal  start  of  expression  [FE]                                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction,  helperCode);	  NodeHelper    compiler    =    reductions.get(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
484	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  aiderCodeCost);  [CE]  illegal  start  of  expression  [FE]                                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  aiderCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction,  aiderCodeCost);	  NodeHelper    compiler    =    reductions.get(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
485	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
486	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
487	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
488	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
489	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  *  SAVINGS_THRESHOLD  -  1;  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  *  SAVINGS_THRESHOLD  -  1;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  *  SAVINGS_THRESHOLD  -  1;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
490	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(savings)-  1;  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(savings)-  1;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(savings)-  1;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
491	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  -  2;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  -  2;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  -  2;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
492	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelper(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelper(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelper(helperCodeCost);	  ReductionGatherer    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
493	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperInsertion();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperInsertion();	  ReductionGatherer    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
494	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperCost();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperCost();	  ReductionGatherer    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
495	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelper(),  savings);  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelper(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelper(),  savings);	  ReductionGatherer    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  ';'  expected	82	None	replace
496	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
497	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
498	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EMPTY  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
499	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductionMap.get(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductionMap.get(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductionMap.get(reduction);	  NodeHelper    compiler    =    reductions.get(reduction);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
500	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getChildCount());  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getChildCount());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.getChildCount());	  NodeHelper    compiler    =    reductions.get(reduction);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
501	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost,  reduction);	  Node    helperCode    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
502	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost  +  reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost  +  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost  +  reduction);	  Node    helperCode    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
503	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);	  int    helperCodeCost    =    reduction.getHelperCodeCost(savings);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
504	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost,  savings);	  int    helperCodeCost    =    reduction.getHelperCodeCost(savings);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
505	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost  +  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost  +  savings);	  int    helperCodeCost    =    reduction.getHelperCodeCost(savings);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
506	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helper);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helper);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(helper);	  int    helperCodeCost    =    reduction.getHelperCodeCost(savings);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
507	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductionMap.get(saving);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductionMap.get(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductionMap.get(saving);	  NodeHelper    compiler    =    reductionMap.get(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
508	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductionMap.get(savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductionMap.get(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductionMap.get(savings);	  NodeHelper    compiler    =    reductionMap.get(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
509	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductionMap.get(helperCodeCost  +  savings);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductionMap.get(helperCodeCost  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductionMap.get(helperCodeCost  +  savings);	  NodeHelper    compiler    =    reductionMap.get(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	71	None	replace
510	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
511	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
512	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  reduction.getType());  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  reduction.getType());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  reduction.getType());	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
513	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  saverCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  saverCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  saverCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
514	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  helperCodeCost,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  helperCodeCost,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
515	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.remove(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.remove(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.remove(helperCodeCost);	  NodeHelper    compiler    =    reductions.get(saving);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
516	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(savings  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(savings  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(savings  +  SAVINGS_THRESHOLD);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
517	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  -  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  -  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  -  SAVINGS_THRESHOLD);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
518	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  *  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  *  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  *  SAVINGS_THRESHOLD);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
519	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  /  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  /  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  /  SAVINGS_THRESHOLD);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
520	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  saving);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  +  saving);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
521	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE()  /  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCode    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
522	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE(helperCodeCost);	  ReductionGatherer    helperCode    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
523	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE(),  savings);  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE(),  savings);	  ReductionGatherer    helperCode    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  ';'  expected	84	None	replace
524	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE()  +  1;  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE()  +  1;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHELPER_SOURCE()  +  1;	  ReductionGatherer    helperCode    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
525	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperSecond();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperSecond();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperSecond();	  ReductionGatherer    helperCode    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
526	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getChildCount()  >  1)  {  [CE]  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getChildCount()  >  1)  {  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getChildCount()  >  1)  {	  Preconditions.checkState(reduction.getType()    ==    Token.COST    &&    reduction.getChildCount()    >    1)    {    	non-compiled	[CE]  	157	None	replace
527	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  <  1)  {  [CE]  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  <  1)  {  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  <  1)  {	  Preconditions.checkState(reduction.getType()    ==    Token.COST    &&    reduction.getChildCount()    >    1)    {    	non-compiled	[CE]  	157	None	replace
528	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >=  1)  {  [CE]  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >=  1)  {  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >=  1)  {	  Preconditions.checkState(reduction.getType()    ==    Token.COST    &&    reduction.getChildCount()    >    1)    {    	non-compiled	[CE]  	157	None	replace
529	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  ||  reduction.getChildCount()  >  1)  {  [CE]  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  ||  reduction.getChildCount()  >  1)  {  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.COST  ||  reduction.getChildCount()  >  1)  {	  Preconditions.checkState(reduction.getType()    ==    Token.COST    &&    reduction.getChildCount()    >    1)    {    	non-compiled	[CE]  	157	None	replace
530	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()!=  1)  {  [CE]  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()!=  1)  {  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()!=  1)  {	  Preconditions.checkState(reduction.getType()    ==    Token.COST    &&    reduction.getChildCount()    >    1)    {    	non-compiled	[CE]  	157	None	replace
531	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  &&  reduction.getChildCount()  >  1)  {  [CE]  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  &&  reduction.getChildCount()  >  1)  {  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.COST  &&  reduction.getChildCount()  >  1)  {	  Preconditions.checkState(reduction.getType()    ==    Token.COST    &&    reduction.getChildCount()    >    1)    {    	non-compiled	[CE]  	157	None	replace
532	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(savings);	  NodeHelper    compiler    =    reductions.get(0);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
533	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getChildCount()  -  1);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getChildCount()  -  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.getChildCount()  -  1);	  NodeHelper    compiler    =    reductions.get(0);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
534	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(0).getNodeForCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(0).getNodeForCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(0).getNodeForCodeInsertion();	  NodeHelper    compiler    =    reductions.get(0);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
535	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(0).getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(0).getNodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(0).getNodeForCodeInsertion(null);	  NodeHelper    compiler    =    reductions.get(0);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
536	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
537	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >=  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >=  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >=  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
538	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  <  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  <  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  <  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
539	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()!=  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()!=  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()!=  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
540	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
541	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  ==  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  ==  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  ==  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
542	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction);	  ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
543	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(savings);	  ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
544	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  reduction);	  ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
545	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(rededuction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(rededuction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(rededuction);	  ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
546	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getReductionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getReductionGatherer();	  ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
547	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction;  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(reduction;	  ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  ')'  expected	112	None	replace
548	[BUG]  [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);  reducer.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);  reducer.addChildrenToFront(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);  reducer.addChildrenToFront(reduction);	  reducer.addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
549	[BUG]  [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildrenToFront(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildrenToFront(reduction);	  reducer.addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
550	[BUG]  [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildrenToFront(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  contributingRoot  =  compiler.getNodeForCodeInsertion(null);reducingRoot.addChildrenToFront(helperCode);	  reducer.addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
551	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  /  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  /  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
552	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer(),  savings);  [CE]  ';'  expected  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer(),  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer(),  savings);	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  ';'  expected	114	None	replace
553	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer(),  savings;  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer(),  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer(),  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
554	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  +  savings;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  +  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  +  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
555	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  >=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  >=  Token.NAME);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  >=  Token.NAME);	  Preconditions.checkState(reduction.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
556	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()!=  Token.NAME);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()!=  Token.NAME);	  Preconditions.checkState(reduction.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
557	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()!=  Token.NAME);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings.getType()!=  Token.NAME);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings.getType()!=  Token.NAME);	  Preconditions.checkState(reduction.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
558	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(0);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(0);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(0);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeInsertion();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
559	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  savings);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeInsertion();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
560	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost,  reduction);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(saving);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
561	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getType()!=  Token.COST);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getType()!=  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getType()!=  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    ||    reduction.getType()!=    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
562	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  ||  reduction.getType()!=  Token.COST);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  ||  reduction.getType()!=  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.COST  ||  reduction.getType()!=  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    ||    reduction.getType()!=    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
563	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  &&  reduction.getType()!=  Token.COST);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  &&  reduction.getType()!=  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.COST  &&  reduction.getType()!=  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    ||    reduction.getType()!=    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
564	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperReduction(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperReduction(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperReduction(helperCodeCost);	  ReductionGatherer    helperCode    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
565	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperReduction();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperReduction();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.gethelperReduction();	  ReductionGatherer    helperCode    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
566	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  /  2;  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  /  2;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  /  2;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    2;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
567	[BUG]  [BUGGY]  Integer  helperCodeCost  =  reduction.getHelperCodeCost();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Integer  helperCodeCost  =  reduction.getHelperCodeCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Integer  helperCodeCost  =  reduction.getHelperCodeCost();	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    2;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
568	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  helperCodeCost);	  Preconditions.checkState(helperCode!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
569	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost!=  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost!=  reduction);	  Preconditions.checkState(helperCode!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
570	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  helperCode);	  Preconditions.checkState(helperCode!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
571	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  >=  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost  >=  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost  >=  reduction);	  Preconditions.checkState(helperCode!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
572	[BUG]  [BUGGY]  Preconditions.checkState(savings  >=  reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings  >=  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings  >=  reduction);	  Preconditions.checkState(helperCode!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
573	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  aidCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  aidCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  aidCodeCost);	  Preconditions.checkState(helperCode!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
574	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  helperCode);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  helperCode);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
575	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  Savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  Savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  Savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
576	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  reduction.getName());  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  reduction.getName());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  reduction.getName());	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
577	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.getChildCount());  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.getChildCount());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.getChildCount());	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    savings);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
578	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings  -  reduction.estimateSavings());  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings  -  reduction.estimateSavings());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings  -  reduction.estimateSavings());	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    savings);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
579	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  compiler.getNodeForCodeInsertion(helperCost);	  Node    helperCode    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
580	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  null,  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  null,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  null,  savings);	  Preconditions.checkState(reduction!=    null);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
581	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  +  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  +  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  +  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
582	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  -  savings;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  -  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  -  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
583	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeInsertion();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
584	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  reduction);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeInsertion();    	non-compiled	[CE]  illegal  start  of  expression	38	None	replace
585	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(reduction.getNodeForCodeInsertion(null));  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addChildrenToFront(reduction.getNodeForCodeInsertion(null));  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addChildrenToFront(reduction.getNodeForCodeInsertion(null));	  HelperCode.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
586	[BUG]  [BUGGY]  HelperCode.report(helperCodeCost  +  reduction.estimateSavings());  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.report(helperCodeCost  +  reduction.estimateSavings());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.report(helperCodeCost  +  reduction.estimateSavings());	  HelperCode.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
587	[BUG]  [BUGGY]  HelperCode.addChildrenToFront(helperCodeCost  +  reduction.estimateSavings());  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addChildrenToFront(helperCodeCost  +  reduction.estimateSavings());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addChildrenToFront(helperCodeCost  +  reduction.estimateSavings());	  HelperCode.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
588	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getSingleNodeHelper(null);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getSingleNodeHelper(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getSingleNodeHelper(null);	  NodeHelper    compiler    =    reduction.getSingleNodeHelper();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
589	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  aiderCode.addChildrenToFront(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	aiderCode.addChildrenToFront(helperCodeCost);	  aiderCode.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
590	[BUG]  [BUGGY]  aiderCode.addChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  aiderCode.addChildrenToFront(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	aiderCode.addChildrenToFront(helperCode);	  aiderCode.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
591	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
592	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT,  helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT,  helperCode);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
593	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  +  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
594	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  HELPER_SOURCE);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  HELPER_SOURCE);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  +  HELPER_SOURCE);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
595	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  +  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  +  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST  +  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
596	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  /  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  /  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  /  savings);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
597	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  reduction.estimateSavings());  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  reduction.estimateSavings());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  +  reduction.estimateSavings());	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
598	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  +  reduction);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	109	None	replace
599	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
600	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT,  helperCode);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.EXPR_RESULT,  helperCode);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	91	None	replace
601	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >  1)  {  [CE]  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >  1)  {  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >  1)  {	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  	93	None	replace
602	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingSingleReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingSingleReductionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingSingleReductionGatherer();	  ReductionGatherer    helperCode    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
603	[BUG]  [BUGGY]  reductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer();	  ReductionGatherer    helperCode    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
604	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer()  +  savings;  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer()  +  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer()  +  savings;	  ReductionGatherer    helperCode    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
605	[BUG]  [BUGGY]  reducer.addChildrenToFront(null);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildrenToFront(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildrenToFront(null);	  reducer.addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
606	[BUG]  [BUGGY]  reducer.removeChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.removeChildrenToFront(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.removeChildrenToFront(reduction);	  reducer.addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
607	[BUG]  [BUGGY]  reducer.addChildrenToFront(saving);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildrenToFront(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildrenToFront(saving);	  reducer.addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
608	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction  +  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
609	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM,  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.CUSTOM,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
610	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.getReductions().removeChild(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.getReductions().removeChild(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.getReductions().removeChild(helperCodeCost);	  Reducer    reducer    =    reduction.removeChild(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
611	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
612	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  savings);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	58	None	replace
613	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelper(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
614	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getGuaranteed();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getGuaranteed();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getGuaranteed();	  ReductionGatherer    helperCodeCost    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
615	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateNode();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateNode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getImmediateNode();	  NodeHelper    compiler    =    reduction.getImmediateParentNode();    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
616	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateStatementNode();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateStatementNode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getImmediateStatementNode();	  NodeHelper    compiler    =    reduction.getImmediateParentNode();    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
617	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  +  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  +  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  +  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
618	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingSingleReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingSingleReductionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingSingleReductionGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
619	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperNode();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getHelperNode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getHelperNode();	  Node    helperCode    =    reduction.getNode();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
620	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  +  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  +  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  +  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
621	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD  +  1;  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD  +  1;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD  +  1;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer()    /    SAVINGS_THRESHOLD;    	non-compiled	[CE]  illegal  start  of  expression	33	None	replace
622	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  *  1;  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  *  1;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  *  1;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    -    1;    	non-compiled	[CE]  illegal  start  of  expression	119	None	replace
623	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(reduction);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
624	[BUG]  [BUGGY]  reducer.removeChildToBack(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.removeChildToBack(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.removeChildToBack(reduction);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
625	[BUG]  [BUGGY]  reducer.addChildToBack(null);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildToBack(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildToBack(null);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
626	[BUG]  [BUGGY]  reducer.addChildToBack(helperCode);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildToBack(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildToBack(helperCode);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
627	[BUG]  [BUGGY]  reducer.addChildToBack(saved);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildToBack(saved);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildToBack(saved);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  illegal  start  of  expression	9	None	replace
628	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(null,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperInsertion(null,  helperCodeCost);	  NodeHelper    compiler    =    reduction.getHelperInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
629	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(root);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(root);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperInsertion(root);	  NodeHelper    compiler    =    reduction.getHelperInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
630	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(null,  helperCode);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperInsertion(null,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperInsertion(null,  helperCode);	  NodeHelper    compiler    =    reduction.getHelperInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
631	[BUG]  [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(helper);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(helper);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(helper);	  NodeHelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
632	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()!=  Token.COST);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()!=  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost.getType()!=  Token.COST);	  Preconditions.checkState(reduction.getType()!=    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
633	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCodeCost()  +  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCodeCost()  +  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.gethelperCodeCost()  +  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCode    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
634	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCode();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.gethelperCode();	  ReductionGatherer    helperCode    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
635	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCodeCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelperCodeCost(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.gethelperCodeCost(helperCodeCost);	  ReductionGatherer    helperCode    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	149	None	replace
636	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()!=  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()!=  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost.getType()!=  Token.CUSTOM);	  Preconditions.checkState(reduction.getType()!=    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
637	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReduction(null);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReduction(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingReduction(null);	  NodeHelper    compiler    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
638	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReductionRoot();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReductionRoot();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingReductionRoot();	  NodeHelper    compiler    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
639	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReductionStructure();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReductionStructure();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingReductionStructure();	  NodeHelper    compiler    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
640	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(root);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(root);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(root);	  ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
641	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null  +  1);	  ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
642	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  +  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  +  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE()  +  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
643	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE(helperCode);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE(helperCode);	  ReductionGatherer    helperCodeCost    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
644	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperState();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperState();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperState();	  ReductionGatherer    helperCodeCost    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
645	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost  ==  reduction);	  Preconditions.checkNotNull(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
646	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  HELPER_SOURCE);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  HELPER_SOURCE);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  HELPER_SOURCE);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
647	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saved);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saved);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saved);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
648	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saver);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saver);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saver);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
649	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(helperCode);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelper(helperCode);	  NodeHelper    compiler    =    reduction.getHelper(null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
650	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(null,  helperCode);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(null,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelper(null,  helperCode);	  NodeHelper    compiler    =    reduction.getHelper(null);    	non-compiled	[CE]  illegal  start  of  expression	99	None	replace
651	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode,  reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode,  reduction);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
652	[BUG]  [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	111	None	replace
653	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME  +  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCode.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	100	None	replace
654	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	67	None	replace
655	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
656	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  1);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
657	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCodeCost  +  savings);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	13	None	replace
658	[BUG]  [BUGGY]  reducer.addChildToFront(null);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildToFront(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildToFront(null);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	7	None	replace
659	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getHelper(helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getHelper(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getHelper(helperCode);	  NodeHelper    compiler    =    reductions.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
660	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getHelper(null);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getHelper(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getHelper(null);	  NodeHelper    compiler    =    reductions.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
661	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reductions.getHelperCodeInsertion(null);	  NodeHelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
662	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCode(helper);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCode(helper);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reductions.getHelperCode(helper);	  NodeHelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
663	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(null);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(null);	  ReductionGatherer    helperCodeCost    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
664	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);	  ReductionGatherer    helperCodeCost    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
665	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost(helperCode);	  ReductionGatherer    helperCodeCost    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
666	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode,  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode,  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode,  SAVINGS_THRESHOLD);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
667	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperName);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperName);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperName);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
668	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helper_Cost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helper_Cost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helper_Cost);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
669	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(reduction,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  compiler.getNodeForCodeInsertion(reduction,  saving);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
670	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  saving  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  saving  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  saving  +  SAVINGS_THRESHOLD);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
671	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving  +  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  saving  +  1);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
672	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  saving);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null,  saving);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
673	[BUG]  [BUGGY]  reducer.addChildToFront(reductionCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildToFront(reductionCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildToFront(reductionCost);	  reducer.addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
674	[BUG]  [BUGGY]  reducer.addChildAfter(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildAfter(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildAfter(reduction);	  reducer.addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
675	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(root);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(root);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(root);	  NodeHelper    compiler    =    reduction.getHelperForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
676	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings  +  1);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  savings  +  1);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null    +    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
677	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  2);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  2);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  2);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null    +    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
678	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  SAVINGS_THRESHOLD);	  HelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
679	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  reduction);	  HelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
680	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  1);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  1);	  HelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
681	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
682	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  &&  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  &&  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.COST  &&  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
683	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
684	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(null);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(null);	  int    helperCodeCost    =    reduction.getHelperCodeCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
685	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(reduction);	  int    helperCodeCost    =    reduction.getHelperCodeCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
686	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME,  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME,  savings);	  Preconditions.checkState(reduction.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
687	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getChildCount()  >  1)  {  [CE]  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getChildCount()  >  1)  {  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getChildCount()  >  1)  {	  Preconditions.checkState(reduction.getType()!=    Token.NAME);    	non-compiled	[CE]  	45	None	replace
688	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  HELPER_SOURCE);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  HELPER_SOURCE);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  HELPER_SOURCE);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
689	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
690	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  COLLECTION);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  COLLECTION);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  COLLECTION);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
691	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  -  1  +  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  -  1  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  -  1  +  savings);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    -    1);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
692	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.helperCodeCost  -  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.helperCodeCost  -  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.helperCodeCost  -  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    -    1);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
693	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getNodeForCodeInsertion  -  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getNodeForCodeInsertion  -  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.getNodeForCodeInsertion  -  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    -    1);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
694	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
695	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  1)  {  [CE]  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  1)  {  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  1)  {	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  	68	None	replace
696	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  ||  reduction.getType()!=  Token.COST);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  ||  reduction.getType()!=  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST  ||  reduction.getType()!=  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    ||    reduction.getType()!=    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	22	None	replace
697	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  helperCode);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  helperCode);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    savings);    	non-compiled	[CE]  illegal  start  of  expression	88	None	replace
698	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getNodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getNodeForCodeInsertion(null);	  NodeHelper    compiler    =    reductions.get(SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	73	None	replace
699	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCode(null);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCode(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  compiler.getHelperCode(null);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
700	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCode(reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCode(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  compiler.getHelperCode(reduction);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
701	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(null,  saving);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(null,  saving);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
702	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getHelperInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getHelperInsertion(helperCodeCost);	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
703	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperChar();  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getHelperChar();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getHelperChar();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
704	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(null,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reductions.getNodeForCodeInsertion(null,  helperCodeCost);	  Node    helperCode    =    reductions.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
705	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(helperCodeCost,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reductions.getNodeForCodeInsertion(helperCodeCost,  reduction);	  Node    helperCode    =    reductions.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
706	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
707	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  1)  {  [CE]  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  1)  {  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  1)  {	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  	46	None	replace
708	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.helperCodeCost);	  NodeHelper    compiler    =    reductions.get(reduction);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
709	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getNameNode());  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getNameNode());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.getNameNode());	  NodeHelper    compiler    =    reductions.get(reduction);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
710	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.RETURN);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.RETURN);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.RETURN);	  Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
711	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  +  savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.RETURN  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
712	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN,  reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.RETURN,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
713	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  +  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  +  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  +  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
714	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  +  1;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  +  1;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer()  +  1;	  ReductionGatherer    helperCodeCost    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	31	None	replace
715	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getNodeHelper(null);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getNodeHelper(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getNodeHelper(null);	  NodeHelper    compiler    =    reduction.getNodeHelper();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
716	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCode);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(helperCode);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  illegal  start  of  expression	16	None	replace
717	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >  2)  {  [CE]  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >  2)  {  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >  2)  {	  Preconditions.checkState(reduction.getType()    ==    Token.COST    &&    reduction.getChildCount()    >    1)    {    	non-compiled	[CE]  	157	None	replace
718	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelper(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelper(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.gethelper(helperCodeCost);	  ReductionGatherer    helperCode    =    reduction.gethelper();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
719	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelpers();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.gethelpers();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.gethelpers();	  ReductionGatherer    helperCode    =    reduction.gethelper();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
720	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  >>  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost  >>  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost  >>  reduction);	  Preconditions.checkState(helperCode!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
721	[BUG]  [BUGGY]  Preconditions.checkState(saving!=  helperCode);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(saving!=  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(saving!=  helperCode);	  Preconditions.checkState(helperCode!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
722	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
723	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP,  helperCode);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETPROP,  helperCode);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
724	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode(helper);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode(helper);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCode(helper);	  HelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
725	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode(helperCode);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCode(helperCode);	  HelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	80	None	replace
726	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getCompiler(helperCode);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getCompiler(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getCompiler(helperCode);	  NodeHelper    compiler    =    reduction.getCompiler();    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
727	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  reduction.toString());  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  reduction.toString());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  +  reduction.toString());	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
728	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reduction);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    saving);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
729	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving  +  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    saving);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
730	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(helper);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(helper);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reductions.getHelperCode(helper);	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
731	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reductions.getHelperCodeInsertion(null);	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
732	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reductions.getHelperCodeInsertion();	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
733	[BUG]  [BUGGY]  helperCode.addChildrenToFront(reduction,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCode.addChildrenToFront(reduction,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCode.addChildrenToFront(reduction,  saving);	  helperCode.addChildrenToFront(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
734	[BUG]  [BUGGY]  helperCode.addChildrenToFront(reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCode.addChildrenToFront(reduction,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCode.addChildrenToFront(reduction,  savings);	  helperCode.addChildrenToFront(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
735	[BUG]  [BUGGY]  helperCode.addChildrenToFront(reduction,  reducer);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCode.addChildrenToFront(reduction,  reducer);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCode.addChildrenToFront(reduction,  reducer);	  helperCode.addChildrenToFront(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	61	None	replace
736	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  HELPER_SOURCE);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  HELPER_SOURCE);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  HELPER_SOURCE);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
737	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction;  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(reduction;	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  ')'  expected	127	None	replace
738	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(helperCode);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
739	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
740	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
741	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    savings);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
742	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getImplicitReduction();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getImplicitReduction();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getImplicitReduction();	  NodeHelper    compiler    =    reductions.get(0);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
743	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getLocation());  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getLocation());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.getLocation());	  NodeHelper    compiler    =    reductions.get(0);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
744	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.BLOCK);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.BLOCK);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.BLOCK);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
745	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingCompiler(helperCode);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingCompiler(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingCompiler(helperCode);	  NodeHelper    compiler    =    reduction.getInitializingCompiler();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
746	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    savings);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
747	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCode);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCode);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    savings);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
748	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(saving);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(saving);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(saving);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
749	[BUG]  [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCode(reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCode(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  compiler.getHelperCode(reduction);	  HelperCode    helperCode    =    reduction.getHelperCode(savings);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
750	[BUG]  [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCode(savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCode(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  compiler.getHelperCode(savings);	  HelperCode    helperCode    =    reduction.getHelperCode(savings);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
751	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helper);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helper);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(helper);	  HelperCode    helperCode    =    reduction.getHelperCode(savings);    	non-compiled	[CE]  illegal  start  of  expression	78	None	replace
752	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
753	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME,  helperCode);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.NAME,  helperCode);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	156	None	replace
754	[BUG]  [BUGGY]  HelperCode.addReduction(reduction,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.addReduction(reduction,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.addReduction(reduction,  helperCodeCost);	  HelperCode.addReduction(reduction);    	non-compiled	[CE]  illegal  start  of  expression	144	None	replace
755	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	90	None	replace
756	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helpers);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helpers);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(helpers);	  int    helperCodeCost    =    reduction.getHelperCodeCost(savings);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
757	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCost();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperCost();	  ReductionGatherer    helperCodeCost    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
758	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction(helperCode);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction(helperCode);	  ReductionGatherer    helperCodeCost    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
759	[BUG]  [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  compiler.getHelperCodeForCodeInsertion(reduction);	  HelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
760	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  compiler.getHelperCodeInsertion(null);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
761	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  savings);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	40	None	replace
762	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingSOURCE();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingSOURCE();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingSOURCE();	  ReductionGatherer    helperCode    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
763	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingGatherer(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingGatherer(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingGatherer(helperCodeCost);	  ReductionGatherer    helperCode    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
764	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingFunctionReducer();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingFunctionReducer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingFunctionReducer();	  ReductionGatherer    helperCode    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
765	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperReduction(null);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperReduction(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperReduction(null);	  ReductionGatherer    helperCode    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
766	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperInsertion(null);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperInsertion(null);	  ReductionGatherer    helperCode    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	103	None	replace
767	[BUG]  [BUGGY]  Preconditions.checkState(saving,  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(saving,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(saving,  reduction);	  Preconditions.checkNotNull(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
768	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  +  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
769	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT  +  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT  +  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT  +  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
770	[BUG]  [BUGGY]  helperCode.addChildAfter(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCode.addChildAfter(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCode.addChildAfter(reduction);	  helperCode.addChildToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	62	None	replace
771	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  SAVINGS_THRESHOLD);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
772	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost,  reduction);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
773	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost  +  1);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
774	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion();	  NodeHelperCode    helperCode    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
775	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.getHelper(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  code  =  reduction.getHelper(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  code  =  reduction.getHelper(helperCodeCost);	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
776	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.getHelperCost();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  code  =  reduction.getHelperCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  code  =  reduction.getHelperCost();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
777	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.getHelperCodeCost();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  code  =  reduction.getHelperCodeCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  code  =  reduction.getHelperCodeCost();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
778	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  savings  +  1;  [CE]  ';'  expected  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  savings  +  1;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer(),  savings  +  1;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer(),    savings);    	non-compiled	[CE]  ';'  expected	34	None	replace
779	[BUG]  [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  compiler.getHelperCodeInsertion(null);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
780	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(null,  savings);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	81	None	replace
781	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeCost(helperCodeCost);	  HelperCode    helperCode    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	77	None	replace
782	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
783	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  -  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  -  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.removeChild(helperCodeCost  -  1);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
784	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.removeChild(helperCodeCost  +  1);	  Reducer    reducer    =    reduction.removeChild(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	8	None	replace
785	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost,  reduction  +  SAVINGS_THRESHOLD);	  NodeHelper    compiler    =    reductions.get(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
786	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  HELPER_SOURCE);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  HELPER_SOURCE);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction,  HELPER_SOURCE);	  NodeHelper    compiler    =    reductions.get(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
787	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  HelperCodeCost.DEFAULT_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  HelperCodeCost.DEFAULT_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction,  HelperCodeCost.DEFAULT_THRESHOLD);	  NodeHelper    compiler    =    reductions.get(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
788	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost,  reduction  +  1);  [CE]  illegal  start  of  expression  [FE]                                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost,  reduction  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost,  reduction  +  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
789	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  +  HELPER_SOURCE;  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  +  HELPER_SOURCE;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  +  HELPER_SOURCE;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    savings;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
790	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  +  0;  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  +  0;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  +  0;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    savings;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
791	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  +  HelperConstants.HELPER_SOURCE;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  +  HelperConstants.HELPER_SOURCE;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  +  HelperConstants.HELPER_SOURCE;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    savings;    	non-compiled	[CE]  illegal  start  of  expression	25	None	replace
792	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  +  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  +  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getChildCount()  >  SAVINGS_THRESHOLD  +  helperCodeCost);	  Preconditions.checkState(reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
793	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >  0);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getChildCount()  >  0);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getChildCount()  >  0);	  Preconditions.checkState(reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	41	None	replace
794	[BUG]  [BUGGY]  Preconditions.checkState(helperCodecost.getType()  ==  Token.CUSTOM);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodecost.getType()  ==  Token.CUSTOM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodecost.getType()  ==  Token.CUSTOM);	  Preconditions.checkState(helperCode.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	120	None	replace
795	[BUG]  [BUGGY]  helperCode.addReduction(reduction,  reduction);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCode.addReduction(reduction,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCode.addReduction(reduction,  reduction);	  helperCode.addReduction(reduction);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
796	[BUG]  [BUGGY]  helperCode.addChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCode.addChildrenToFront(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCode.addChildrenToFront(helperCode);	  helperCode.addReduction(reduction);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
797	[BUG]  [BUGGY]  helperCode.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  helperCode.addChildrenToFront(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	helperCode.addChildrenToFront(helperCodeCost);	  helperCode.addReduction(reduction);    	non-compiled	[CE]  illegal  start  of  expression	136	None	replace
798	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost  +  SAVINGS_THRESHOLD);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion();    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
799	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helper);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helper);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helper);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion();    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
800	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingStatement();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getInitializingStatement();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getInitializingStatement();	  Node    helperCode    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
801	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHelperInitializingReduction();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getHelperInitializingReduction();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getHelperInitializingReduction();	  Node    helperCode    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
802	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInsertionGatherer(helperCodeCost);	  ReductionGatherer    helperCode    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
803	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getConstantReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getConstantReductionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getConstantReductionGatherer();	  ReductionGatherer    helperCode    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
804	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  +  saves;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  +  saves;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  +  saves;	  ReductionGatherer    helperCode    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
805	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.NAME,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.NAME,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCodeCost.getType()  ==  Token.NAME,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
806	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperState();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperState();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperState();	  ReductionGatherer    helperCode    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
807	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperStructure();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperStructure();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperStructure();	  ReductionGatherer    helperCode    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
808	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImplicitStatement();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImplicitStatement();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getImplicitStatement();	  ReductionGatherer    helperCodeCost    =    reduction.getImplicitReduction();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
809	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  -  saves;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost()  -  saves;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost()  -  saves;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    -    savings;    	non-compiled	[CE]  illegal  start  of  expression	27	None	replace
810	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST  +  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
811	[BUG]  [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCode(null);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  compiler.getHelperCode(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  compiler.getHelperCode(null);	  HelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
812	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(null,  saving);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(null,  saving);	  HelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
813	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  savings);	  Preconditions.checkState(reduction!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
814	[BUG]  [BUGGY]  Preconditions.checkState(saving!=  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(saving!=  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(saving!=  reduction);	  Preconditions.checkState(reduction!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
815	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(helperCodeCost,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelper(helperCodeCost,  reduction);	  NodeHelper    compiler    =    reduction.getHelper(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
816	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelper(helperCodeCost  +  SAVINGS_THRESHOLD);	  NodeHelper    compiler    =    reduction.getHelper(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
817	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(helperCodeCost  +  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelper(helperCodeCost  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelper(helperCodeCost  +  savings);	  NodeHelper    compiler    =    reduction.getHelper(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
818	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCode(savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  compiler.getHelperCode(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  compiler.getHelperCode(savings);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(savings);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
819	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	155	None	replace
820	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST,  saving);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    saving);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
821	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving  +  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    saving);    	non-compiled	[CE]  illegal  start  of  expression	23	None	replace
822	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  3);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  3);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  +  3);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
823	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  /  1);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  /  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  /  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
824	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  0);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  0);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  +  0);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
825	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  *  1);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  *  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  *  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
826	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperReductionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperReductionGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getLocalReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	115	None	replace
827	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helpers);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helpers);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helpers);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(savings);    	non-compiled	[CE]  illegal  start  of  expression	53	None	replace
828	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getHelperInsertion(null);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getHelperInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getHelperInsertion(null);	  NodeHelper    compiler    =    reduction.getHelperInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	97	None	replace
829	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getFACTORY_METHOD_NAME();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getFACTORY_METHOD_NAME();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getFACTORY_METHOD_NAME();	  ReductionGatherer    helperCode    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
830	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperSeconds();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getHelperSeconds();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getHelperSeconds();	  ReductionGatherer    helperCode    =    reduction.getHELPER_SOURCE();    	non-compiled	[CE]  illegal  start  of  expression	84	None	replace
831	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getHelper(reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getHelper(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getHelper(reduction);	  NodeHelper    compiler    =    reduction.getHelper(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	96	None	replace
832	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingerCode);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingerCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null,  helpingerCode);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    helperCode);    	non-compiled	[CE]  illegal  start  of  expression	148	None	replace
833	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reductions.getHelper();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reductions.getHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reductions.getHelper();	  ReductionGatherer    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	82	None	replace
834	[BUG]  [BUGGY]  int  helperCodeCost  =  reductions.getHelperCodeCost();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reductions.getHelperCodeCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reductions.getHelperCodeCost();	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    2;    	non-compiled	[CE]  illegal  start  of  expression	146	None	replace
835	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME,  saving);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    saving);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
836	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving  +  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    saving);    	non-compiled	[CE]  illegal  start  of  expression	47	None	replace
837	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  +  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.COST  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	95	None	replace
838	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  ||  helperCode.getType()  ==  Token.COST);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST  ||  helperCode.getType()  ==  Token.COST);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST  ||  helperCode.getType()  ==  Token.COST);	  Preconditions.checkState(helperCode.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	94	None	replace
839	[BUG]  [BUGGY]  NodeHelper  code  =  reduction.getCode();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  code  =  reduction.getCode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  code  =  reduction.getCode();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
840	[BUG]  [BUGGY]  NodeHelper  code  =  reductions.getHelper();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  code  =  reductions.getHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  code  =  reductions.getHelper();	  NodeHelper    code    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
841	[BUG]  [BUGGY]  Preconditions.checkState(compiler.getNodeForCodeInsertion(null)  ==  reduction);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(compiler.getNodeForCodeInsertion(null)  ==  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(compiler.getNodeForCodeInsertion(null)  ==  reduction);	  Preconditions.checkNotNull(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
842	[BUG]  [BUGGY]  Preconditions.checkState(compiler.getNodeForCodeInsertion(null)!=  reduction);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(compiler.getNodeForCodeInsertion(null)!=  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(compiler.getNodeForCodeInsertion(null)!=  reduction);	  Preconditions.checkNotNull(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
843	[BUG]  [BUGGY]  Preconditions.checkState(compiler.getNodeForCodeInsertion(null),  reduction);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(compiler.getNodeForCodeInsertion(null),  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(compiler.getNodeForCodeInsertion(null),  reduction);	  Preconditions.checkNotNull(reduction,    savings);    	non-compiled	[CE]  illegal  start  of  expression	133	None	replace
844	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImplicitReduction()  -  savings;  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getImplicitReduction()  -  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getImplicitReduction()  -  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getImplicitReduction();    	non-compiled	[CE]  illegal  start  of  expression	116	None	replace
845	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reductions.getInitializingGatherer();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reductions.getInitializingGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reductions.getInitializingGatherer();	  ReductionGatherer    helperCode    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
846	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingStructure();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingStructure();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingStructure();	  ReductionGatherer    helperCode    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
847	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingSeconds();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingSeconds();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingSeconds();	  ReductionGatherer    helperCode    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	85	None	replace
848	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  -  savings;  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  -  savings;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer()  -  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
849	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingSecondaryReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingSecondaryReductionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingSecondaryReductionGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
850	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingFunctionGatherer();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingFunctionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingFunctionGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	114	None	replace
851	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.SCRIPT);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.SCRIPT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.BLOCK  ||  reduction.getType()  ==  Token.SCRIPT);	  Preconditions.checkState(reduction.getType()    ==    Token.BLOCK);    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
852	[BUG]  [BUGGY]  aiderCode.reportCodeChange();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  aiderCode.reportCodeChange();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	aiderCode.reportCodeChange();	  aiderCode.addChildrenToFront(reduction);    	non-compiled	[CE]  illegal  start  of  expression	60	None	replace
853	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT,  savings);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT,  savings);	  Preconditions.checkState(reduction.getType()!=    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	64	None	replace
854	[BUG]  [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(null,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reductions.getNodeForCodeInsertion(null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reductions.getNodeForCodeInsertion(null,  saving);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	17	None	replace
855	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
856	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME  ||  reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()!=    Token.NAME);    	non-compiled	[CE]  illegal  start  of  expression	45	None	replace
857	[BUG]  [BUGGY]  reducer.addChildToFront(saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildToFront(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildToFront(saving);	  reducer.addChildToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	125	None	replace
858	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getImmediateParentNode();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getImmediateParentNode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getImmediateParentNode();	  NodeHelper    compiler    =    reductions.get(0);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
859	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(0).removeChild(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(0).removeChild(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(0).removeChild(helperCodeCost);	  NodeHelper    compiler    =    reductions.get(0);    	non-compiled	[CE]  illegal  start  of  expression	74	None	replace
860	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getInitializingCompiler();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getInitializingCompiler();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getInitializingCompiler();	  NodeHelper    compiler    =    reduction.getInitializingCompiler();    	non-compiled	[CE]  illegal  start  of  expression	5	None	replace
861	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(helperCode);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(helperCode);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(saving);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
862	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helperCode);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helperCode);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(saving);    	non-compiled	[CE]  illegal  start  of  expression	56	None	replace
863	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getLocation()  +  1);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getLocation()  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.getLocation()  +  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    1);    	non-compiled	[CE]  illegal  start  of  expression	108	None	replace
864	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  saver);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  saver);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getNodeForCodeInsertion(null,  saver);	  Node    helperCode    =    reduction.getNodeForCodeInsertion(null,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	113	None	replace
865	[BUG]  [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  compiler.getNodeForCodeInsertion(null,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  compiler.getNodeForCodeInsertion(null,  helperCodeCost);	  Node    helperCode    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	104	None	replace
866	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getHeaderStructure();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getHeaderStructure();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getHeaderStructure();	  Node    helperCode    =    reduction.getNode();    	non-compiled	[CE]  illegal  start  of  expression	106	None	replace
867	[BUG]  [BUGGY]  reducer.removeChild(parent);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.removeChild(parent);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.removeChild(parent);	  reducer.removeChild(null);    	non-compiled	[CE]  illegal  start  of  expression	145	None	replace
868	[BUG]  [BUGGY]  Preconditions.checkState(this.helperCodeCost!=  reduction);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(this.helperCodeCost!=  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(this.helperCodeCost!=  reduction);	  Preconditions.checkState(helperCode!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	131	None	replace
869	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reductions.getHelperCodeForCodeInsertion(null);	  NodeHelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
870	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reductions.getHelperCodeInsertion();	  NodeHelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	150	None	replace
871	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  +  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  +  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  +  helperCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	140	None	replace
872	[BUG]  [BUGGY]  int  helperCodeCost  =  compiler.getHelperCodeCost(savings);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  compiler.getHelperCodeCost(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  compiler.getHelperCodeCost(savings);	  int    helperCodeCost    =    reduction.getHelperCodeCost(savings);    	non-compiled	[CE]  illegal  start  of  expression	24	None	replace
873	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingStandardReduction();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getInitializingStandardReduction();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getInitializingStandardReduction();	  Node    helperCode    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
874	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingStructure();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getInitializingStructure();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getInitializingStructure();	  Node    helperCode    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
875	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getInitializingReductionStatement();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getInitializingReductionStatement();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getInitializingReductionStatement();	  Node    helperCode    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	141	None	replace
876	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getParent().getNodeForCodeInsertion(reduction);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getParent().getNodeForCodeInsertion(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getParent().getNodeForCodeInsertion(reduction);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  illegal  start  of  expression	55	None	replace
877	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCode(null);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reductions.getHelperCode(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reductions.getHelperCode(null);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
878	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(null,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(null,  helperCodeCost);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	122	None	replace
879	[BUG]  [BUGGY]  HelperCode.appendChildrenToFront(reduction);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.appendChildrenToFront(reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.appendChildrenToFront(reduction);	  HelperCode.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
880	[BUG]  [BUGGY]  HelperCode.appendChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.appendChildrenToFront(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.appendChildrenToFront(helperCode);	  HelperCode.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
881	[BUG]  [BUGGY]  HelperCode.appendChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode.appendChildrenToFront(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode.appendChildrenToFront(helperCodeCost);	  HelperCode.reportCodeChange();    	non-compiled	[CE]  illegal  start  of  expression	63	None	replace
882	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(null,  helperCode);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(null,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getHelperForCodeInsertion(null,  helperCode);	  NodeHelper    compiler    =    reduction.getHelperForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	151	None	replace
883	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getHelperForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getHelperForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getHelperForCodeInsertion(null);	  NodeHelper    compiler    =    reductions.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
884	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getHelperList();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getHelperList();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getHelperList();	  NodeHelper    compiler    =    reductions.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	153	None	replace
885	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCode();  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperCode();	  ReductionGatherer    helperCodeCost    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
886	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeInsertion();  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeInsertion();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperCodeInsertion();	  ReductionGatherer    helperCodeCost    =    reduction.getHelperReduction();    	non-compiled	[CE]  illegal  start  of  expression	117	None	replace
887	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  null,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  null,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  null,  saving);	  Preconditions.checkState(reduction!=    null);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
888	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  null  ||  reduction.estimateSavings());  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  null  ||  reduction.estimateSavings());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  null  ||  reduction.estimateSavings());	  Preconditions.checkState(reduction!=    null);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
889	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  null  &&  reduction.isReduction());  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  null  &&  reduction.isReduction());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  null  &&  reduction.isReduction());	  Preconditions.checkState(reduction!=    null);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
890	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  null  &&  reduction.estimateSavings());  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  null  &&  reduction.estimateSavings());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  null  &&  reduction.estimateSavings());	  Preconditions.checkState(reduction!=    null);    	non-compiled	[CE]  illegal  start  of  expression	130	None	replace
891	[BUG]  [BUGGY]  Preconditions.checkState(reduction  <  SAVINGS_THRESHOLD  ||  reduction  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction  <  SAVINGS_THRESHOLD  ||  reduction  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction  <  SAVINGS_THRESHOLD  ||  reduction  >  SAVINGS_THRESHOLD);	  Preconditions.checkNotNull(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
892	[BUG]  [BUGGY]  Preconditions.checkState(reduction  <  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction  <  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction  <  SAVINGS_THRESHOLD);	  Preconditions.checkNotNull(reduction,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	132	None	replace
893	[BUG]  [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(helperCode);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCodeCost  =  reduction.getHelperCode(helperCode);	  NodeHelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	37	None	replace
894	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  reduction  &&  reduction.estimateSavings());  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  reduction  &&  reduction.estimateSavings());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  reduction  &&  reduction.estimateSavings());	  Preconditions.checkState(reduction!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
895	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  reduction,  savings);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  reduction,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  reduction,  savings);	  Preconditions.checkState(reduction!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
896	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  reduction  &&  reduction  <  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction!=  reduction  &&  reduction  <  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction!=  reduction  &&  reduction  <  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction!=    reduction);    	non-compiled	[CE]  illegal  start  of  expression	129	None	replace
897	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.COST    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	20	None	replace
898	[BUG]  [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(savings  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(savings  >  SAVINGS_THRESHOLD);	  Preconditions.checkNotNull(reduction,    saving);    	non-compiled	[CE]  illegal  start  of  expression	134	None	replace
899	[BUG]  [BUGGY]  reducer.addChildrenToFront(savings);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildrenToFront(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildrenToFront(savings);	  reducer.addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
900	[BUG]  [BUGGY]  reducer.addChildrenToFront(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  reducer.addChildrenToFront(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	reducer.addChildrenToFront(helperCodeCost);	  reducer.addChildrenToFront(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	12	None	replace
901	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.remove(saving);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.remove(saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.remove(saving);	  NodeHelper    compiler    =    reductions.get(saving);    	non-compiled	[CE]  illegal  start  of  expression	70	None	replace
902	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(saved);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCode(saved);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCode(saved);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	35	None	replace
903	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCodeCost  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCodeCost  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT  ||  helperCodeCost  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCode.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	137	None	replace
904	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  +  savings);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  +  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
905	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    +    savings);    	non-compiled	[CE]  illegal  start  of  expression	139	None	replace
906	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM,  saving);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.CUSTOM,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    saving);    	non-compiled	[CE]  illegal  start  of  expression	92	None	replace
907	[BUG]  [BUGGY]  Node  helperCode  =  reduction.getAssignedHelper();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  helperCode  =  reduction.getAssignedHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  helperCode  =  reduction.getAssignedHelper();	  Node    helperCode    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	52	None	replace
908	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost)+  1;  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost)+  1;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost)+  1;	  int    helperCodeCost    =    reduction.getHelperCodeCost()    +    1;    	non-compiled	[CE]  illegal  start  of  expression	28	None	replace
909	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.getChildren().removeChild(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.getChildren().removeChild(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.getChildren().removeChild(helperCodeCost);	  Reducer    reducer    =    reduction.removeChild(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
910	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.getChildren().removeChild(helperCode);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.getChildren().removeChild(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.getChildren().removeChild(helperCode);	  Reducer    reducer    =    reduction.removeChild(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
911	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.removeChild(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reductions.removeChild(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reductions.removeChild(helperCodeCost);	  Reducer    reducer    =    reduction.removeChild(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	10	None	replace
912	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost()  +  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost()  +  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.gethelperCodeCost()  +  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.gethelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	154	None	replace
913	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	48	None	replace
914	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  helperCodeCost);	  HelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	124	None	replace
915	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETELEM);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETELEM);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.GETELEM);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.GETPROP);    	non-compiled	[CE]  illegal  start  of  expression	143	None	replace
916	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction  +  1);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM,  reduction  +  1);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	121	None	replace
917	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  reduction);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  reduction);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost,  reduction);	  HelperCode    helperCode    =    reduction.getHelperCodeInsertion();    	non-compiled	[CE]  illegal  start  of  expression	79	None	replace
918	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentNode(parent);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentNode(parent);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getImmediateParentNode(parent);	  NodeHelper    compiler    =    reduction.getImmediateParentNode();    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
919	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentNodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getImmediateParentNodeForCodeInsertion(null);	  NodeHelper    compiler    =    reduction.getImmediateParentNode();    	non-compiled	[CE]  illegal  start  of  expression	152	None	replace
920	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  SAVINGS_THRESHOLD,  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(helperCodeCost  +  SAVINGS_THRESHOLD,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(helperCodeCost  +  SAVINGS_THRESHOLD,  savings);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    +    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	72	None	replace
921	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getFirstChild()  -  1);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getFirstChild()  -  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.getFirstChild()  -  1);	  NodeHelper    compiler    =    reductions.get(helperCodeCost    -    1);    	non-compiled	[CE]  illegal  start  of  expression	107	None	replace
922	[BUG]  [BUGGY]  HelperCode  helperCodeCost  -=  reduction.getHelperCode();  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCodeCost  -=  reduction.getHelperCode();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCodeCost  -=  reduction.getHelperCode();	  HelperCode    helperCodeCost    =    reduction.getHelperCode();    	non-compiled	[CE]  ';'  expected	80	None	replace
923	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(saved);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(saved);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(saved);	  HelperCode    helperCode    =    reduction.getHelperCode(helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	76	None	replace
924	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(helperCode);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeCost(helperCode);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  illegal  start  of  expression	36	None	replace
925	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getNodeHelper(helperCode);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getNodeHelper(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getNodeHelper(helperCode);	  NodeHelper    compiler    =    reduction.getNodeHelper();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
926	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.getNodeHelper();  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.getNodeHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.getNodeHelper();	  NodeHelper    compiler    =    reduction.getNodeHelper();    	non-compiled	[CE]  illegal  start  of  expression	6	None	replace
927	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  reduction.getHelperCodeForCodeInsertion(null,  helperCodeCost);	  NodeHelperCode    helperCode    =    reduction.getHelperCodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	51	None	replace
928	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getImmediateParentForCodeInsertion(null);	  NodeHelper    compiler    =    reduction.getImmediateParent();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
929	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentForCodeCost();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getImmediateParentForCodeCost();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getImmediateParentForCodeCost();	  NodeHelper    compiler    =    reduction.getImmediateParent();    	non-compiled	[CE]  illegal  start  of  expression	3	None	replace
930	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
931	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.RETURN  ||  reduction.getType()  ==  Token.GETPROP);	  Preconditions.checkState(reduction.getType()    ==    Token.RETURN);    	non-compiled	[CE]  illegal  start  of  expression	42	None	replace
932	[BUG]  [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	int  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost  +  SAVINGS_THRESHOLD);	  int    helperCodeCost    =    reduction.getHelperCodeCost(helperCode);    	non-compiled	[CE]  illegal  start  of  expression	118	None	replace
933	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingSecondaryReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingSecondaryReductionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingSecondaryReductionGatherer();	  ReductionGatherer    helperCode    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
934	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingStandardReductionGatherer();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingStandardReductionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingStandardReductionGatherer();	  ReductionGatherer    helperCode    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
935	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionStructure();  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionStructure();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingReductionStructure();	  ReductionGatherer    helperCode    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
936	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingReductionGatherer(helperCodeCost);	  ReductionGatherer    helperCode    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
937	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingSurrogate();  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingSurrogate();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingSurrogate();	  ReductionGatherer    helperCode    =    reduction.getInitializingReductionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	87	None	replace
938	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST,  savings);  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.COST,  savings);	  Preconditions.checkState(reduction.getType()!=    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
939	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  +  saves;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  +  saves;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer()  +  saves;	  ReductionGatherer    helperCodeCost    =    reduction.getInitializingGatherer();    	non-compiled	[CE]  illegal  start  of  expression	32	None	replace
940	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getLocalPart());  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction.getLocalPart());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction.getLocalPart());	  NodeHelper    compiler    =    reductions.get(reduction);    	non-compiled	[CE]  illegal  start  of  expression	69	None	replace
941	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EMPTY);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EMPTY);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EMPTY);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    ||    reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  illegal  start  of  expression	65	None	replace
942	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
943	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >  1);  [CE]  illegal  start  of  expression  [FE]                                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  &&  reduction.getChildCount()  >  1);	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	93	None	replace
944	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings  *  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings  *  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings  *  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    savings);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
945	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.estimateSavings());  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.estimateSavings());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction.estimateSavings());	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    savings);    	non-compiled	[CE]  illegal  start  of  expression	66	None	replace
946	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(savings);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(savings);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
947	[BUG]  [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  savings);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  savings);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  compiler.getNodeForCodeInsertion(null,  savings);	  Reducer    reducer    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	127	None	replace
948	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReductionStatement();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingReductionStatement();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingReductionStatement();	  NodeHelper    compiler    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
949	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingStatement();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getInitializingStatement();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getInitializingStatement();	  NodeHelper    compiler    =    reduction.getInitializingReduction();    	non-compiled	[CE]  illegal  start  of  expression	98	None	replace
950	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  *  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                      IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  *  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  *  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    savings);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
951	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings  +  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.COST,    savings);    	non-compiled	[CE]  illegal  start  of  expression	21	None	replace
952	[BUG]  [BUGGY]  Reducer  reducer  =  reduction.getChildren().removeChild(parent);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reduction.getChildren().removeChild(parent);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reduction.getChildren().removeChild(parent);	  Reducer    reducer    =    reduction.removeChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
953	[BUG]  [BUGGY]  Reducer  reducer  =  reductions.removeChild(parent);  [CE]  illegal  start  of  expression  [FE]                              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Reducer  reducer  =  reductions.removeChild(parent);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Reducer  reducer  =  reductions.removeChild(parent);	  Reducer    reducer    =    reduction.removeChild(parent);    	non-compiled	[CE]  illegal  start  of  expression	11	None	replace
954	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD  ||  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	46	None	replace
955	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  ||  reduction.getType()!=  Token.EXPR_RESULT);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  ||  reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.CUSTOM  ||  reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()!=    Token.CUSTOM);    	non-compiled	[CE]  illegal  start  of  expression	89	None	replace
956	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  compiler.getNodeForCodeInsertion(helperCodeCost);	  Node    helperCode    =    compiler.getNodeForCodeInsertion(reduction);    	non-compiled	[CE]  illegal  start  of  expression	105	None	replace
957	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null  +  SAVINGS_THRESHOLD);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null    +    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
958	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode  +  1);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode  +  1);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode  +  1);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null    +    1);    	non-compiled	[CE]  illegal  start  of  expression	110	None	replace
959	[BUG]  [BUGGY]  NodeHelper  compiler  =  reduction.getSingleNodeHelper(helperCode);  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reduction.getSingleNodeHelper(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reduction.getSingleNodeHelper(helperCode);	  NodeHelper    compiler    =    reduction.getSingleNodeHelper();    	non-compiled	[CE]  illegal  start  of  expression	4	None	replace
960	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode,  saving);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(helperCode,  saving);	  ReductionGatherer    helperCodeCost    =    reduction.getNodeForCodeInsertion(null,    saving);    	non-compiled	[CE]  illegal  start  of  expression	57	None	replace
961	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getFirstChild());  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getFirstChild());  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction.getFirstChild());	  Preconditions.checkState(reduction.getType()    ==    Token.NAME,    helperCodeCost);    	non-compiled	[CE]  illegal  start  of  expression	102	None	replace
962	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reductions.getInsertionGatherer();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reductions.getInsertionGatherer();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reductions.getInsertionGatherer();	  ReductionGatherer    helperCode    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
963	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  &  SAVINGS_THRESHOLD;  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  &  SAVINGS_THRESHOLD;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInsertionGatherer()  &  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCode    =    reduction.getInsertionGatherer();    	non-compiled	[CE]  illegal  start  of  expression	83	None	replace
964	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM;  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM;  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.CUSTOM  ||  reduction.getType()  ==  Token.CUSTOM;	  Preconditions.checkState(reduction.getType()    ==    Token.CUSTOM    ||    reduction.getType()    ==    Token.CUSTOM);    	non-compiled	[CE]  ')'  expected	90	None	replace
965	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST,  helperCode);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST,  helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST,  helperCode);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME    ||    reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  illegal  start  of  expression	49	None	replace
966	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reductions.getHelperCode(helperCodeCost  +  SAVINGS_THRESHOLD);	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
967	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reductions.getHelperCodeForCodeInsertion(null);	  HelperCode    helperCode    =    reductions.getHelperCode();    	non-compiled	[CE]  illegal  start  of  expression	147	None	replace
968	[BUG]  [BUGGY]  Node  HelperCode  =  reductions.getNodeForCodeInsertion(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Node  HelperCode  =  reductions.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Node  HelperCode  =  reductions.getNodeForCodeInsertion(helperCodeCost);	  Node    helperCode    =    reductions.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	142	None	replace
969	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(helperCode);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(helperCode);	  ReductionGatherer    helperCodeCost    =    compiler.getNodeForCodeInsertion(null);    	non-compiled	[CE]  illegal  start  of  expression	112	None	replace
970	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper(helperCode);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper(helperCode);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelper(helperCode);	  ReductionGatherer    helperCodeCost    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
971	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperInsertion(null);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperInsertion(null);	  ReductionGatherer    helperCodeCost    =    reduction.getHelper();    	non-compiled	[CE]  illegal  start  of  expression	29	None	replace
972	[BUG]  [BUGGY]  NodeHelperCode  helperCode  =  compiler.getNodeForCodeInsertion(null);  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelperCode  helperCode  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelperCode  helperCode  =  compiler.getNodeForCodeInsertion(null);	  NodeHelperCode    helperCode    =    reduction.getHelperCode(savings);    	non-compiled	[CE]  illegal  start  of  expression	39	None	replace
973	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT,  saving);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT,  saving);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT,    saving);    	non-compiled	[CE]  illegal  start  of  expression	138	None	replace
974	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reductions.gethelper();  [CE]  illegal  start  of  expression  [FE]                        IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reductions.gethelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reductions.gethelper();	  ReductionGatherer    helperCode    =    reduction.gethelper();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
975	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getAssignedHelper();  [CE]  illegal  start  of  expression  [FE]                          IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getAssignedHelper();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getAssignedHelper();	  ReductionGatherer    helperCode    =    reduction.gethelper();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
976	[BUG]  [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReduction();  [CE]  illegal  start  of  expression  [FE]                            IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  ReductionGatherer  helperCode  =  reduction.getInitializingReduction();  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	ReductionGatherer  helperCode  =  reduction.getInitializingReduction();	  ReductionGatherer    helperCode    =    reduction.gethelper();    	non-compiled	[CE]  illegal  start  of  expression	86	None	replace
977	[BUG]  [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  helpingerCodeCost);  [CE]  illegal  start  of  expression  [FE]                                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  NodeHelper  compiler  =  reductions.get(reduction,  helpingerCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	NodeHelper  compiler  =  reductions.get(reduction,  helpingerCodeCost);	  NodeHelper    compiler    =    reductions.get(helperCodeCost,    reduction);    	non-compiled	[CE]  illegal  start  of  expression	75	None	replace
978	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT    &&    reduction.getChildCount()    >    SAVINGS_THRESHOLD);    	non-compiled	[CE]  illegal  start  of  expression	68	None	replace
979	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(null,  helperCodeCost);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(null,  helperCodeCost);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(null,  helperCodeCost);	  HelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
980	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(null);  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode(null);  [BUGGY]        Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	96	96	1	replace	HelperCode  helperCode  =  reductions.getHelperCode(null);	  HelperCode    helperCode    =    reduction.getHelperCode(null);    	non-compiled	[CE]  illegal  start  of  expression	123	None	replace
