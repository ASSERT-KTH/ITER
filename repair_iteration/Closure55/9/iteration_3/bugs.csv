bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper();  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelper();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelper();	  ReductionGatherer    helperCodeCost    =    reducer.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
2	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getReductionGatherer();  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getReductionGatherer();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reductions.getReductionGatherer();	  ReductionGatherer    helperCodeCost    =    reducer.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
3	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer();  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingGatherer();	  ReductionGatherer    helperCodeCost    =    reducer.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
4	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer();  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInsertionGatherer();	  ReductionGatherer    helperCodeCost    =    reducer.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
5	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHeaderStructure();  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHeaderStructure();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHeaderStructure();	  ReductionGatherer    helperCodeCost    =    reducer.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
6	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list().next())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.list().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.list().next())  {	  for(Reduction    reduction    :    reductions.entrySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
7	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.removeFirst().entrySet().next())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.removeFirst().entrySet().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.removeFirst().entrySet().next())  {	  for(Reduction    reduction    :    reductions.entrySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
8	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(null))  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(null))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(null))  {	  for(Reduction    reduction    :    reductions,    compiler.get(0))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
9	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getCount())  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getCount())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getCount())  {	  for(Reduction    reduction    :    reductions,    compiler.get(0))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
10	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getFirstChild())  {  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getFirstChild())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getFirstChild())  {	  for(Reduction    reduction    :    reductions,    compiler.get(0))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
11	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getRoot())  {  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getRoot())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getRoot())  {	  for(Reduction    reduction    :    reductions,    compiler.get(0))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
12	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(helperCodeCost))  {  [CE]  ')'  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(helperCodeCost))  {	  for(Reduction    reduction    :    reductions,    compiler.get(0))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
13	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(null),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(null),  helperCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(null),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions,    compiler.get(0))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
14	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(helperCode))  {  [CE]  ')'  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(helperCode))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(helperCode))  {	  for(Reduction    reduction    :    reductions,    compiler.get(0))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
15	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductions)  {  [CE]  cannot  find  symbol  reductions  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.reductions)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.reductions)  {	  for(Reduction    reduction    :    reduction.reductions.values())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	14	None	replace
16	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getReductions())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.getReductions())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.getReductions())  {	  for(Reduction    reduction    :    reduction.reductions.values())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
17	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values(),  savings)  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.values(),  savings)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.values(),  savings)  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	58	None	replace
18	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.iterator().next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.iterator().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.iterator().next())  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	58	None	replace
19	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.keySet())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.keySet())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.keySet())  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	58	None	replace
20	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.get(0))  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.get(0))  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	58	None	replace
21	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	add	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	compilable	  [FE]  IllegalStateException  	50	1	replace
22	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1]))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	compilable	  [FE]  IllegalStateException  	50	1	replace
23	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  helperCodeCost)  {  [CE]  ')'  expected  [FE]      IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  helperCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	50	None	replace
24	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  2]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	add	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  2]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	compilable	  [FE]  IllegalStateException  	50	1	replace
25	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  2]))  {  [FE]  IllegalStateException  [FE]        IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  2]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  2]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	compilable	  [FE]  IllegalStateException  	50	1	replace
26	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]          IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]));  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]));	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	50	None	replace
27	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  helperCode)  {  [CE]  ')'  expected  [FE]            IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  helperCode)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  helperCode)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	50	None	replace
28	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1))  {  [CE]  ']'  expected  [FE]              IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  ']'  expected	50	None	replace
29	[BUG]  [BUGGY]  reducer.addChildToFront(helperCodeCost,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(helperCodeCost,  reduction);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(helperCodeCost,  reduction);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
30	[BUG]  [BUGGY]  reducer.addChildToFront(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(helperCode);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(helperCode);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
31	[BUG]  [BUGGY]  reducer.addChildToFront(savings);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(savings);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
32	[BUG]  [BUGGY]  reducer.addChildToFront(null);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(null);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(null);	  reducer.addChildToFront(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
33	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(savings);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(savings);	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
34	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  +  savings;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  +  savings;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  +  savings;	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
35	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings;	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
36	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  +  Savings;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  +  Savings;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  +  Savings;	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
37	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(),  savings);  [CE]  ';'  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(),  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(),  savings);	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  ';'  expected	53	None	replace
38	[BUG]  [BUGGY]  Preconditions.checkState(savings  ==  reduction.getChildCount());  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(savings  ==  reduction.getChildCount());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(savings  ==  reduction.getChildCount());	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
39	[BUG]  [BUGGY]  Preconditions.checkState(savings  >=  reduction.getChildCount());  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(savings  >=  reduction.getChildCount());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(savings  >=  reduction.getChildCount());	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
40	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getChildCount()  ==  helperCodeCost.getChildCount());  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getChildCount()  ==  helperCodeCost.getChildCount());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getChildCount()  ==  helperCodeCost.getChildCount());	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
41	[BUG]  [BUGGY]  Preconditions.checkState(savings!=  reduction.getChildCount());  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(savings!=  reduction.getChildCount());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(savings!=  reduction.getChildCount());	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
42	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction.getChildCount()  +  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction.getChildCount()  +  SAVINGS_THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCodeCost  ==  reduction.getChildCount()  +  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
43	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction.getChildCount()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction.getChildCount()  -  1);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCodeCost  ==  reduction.getChildCount()  -  1);	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
44	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCodeCost)  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	37	None	replace
45	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCode)  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCode)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCode)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	37	None	replace
46	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aiderCodeCost)  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aiderCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aiderCodeCost)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	37	None	replace
47	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ],  helperCodeCost))  {  [CE]  no  suitable  method  found  for  toArray(Reducer[],int)  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ],  helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ],  helperCodeCost))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(Reducer[],int)	37	None	replace
48	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1]))  {  [CE]  incompatible  types  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  incompatible  types	37	None	replace
49	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.toArray(new  Reducer[reductions.size()  ]))  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.toArray(new  Reducer[reductions.size()  ]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.toArray(new  Reducer[reductions.size()  ]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  cannot  find  symbol	37	None	replace
50	[BUG]  [BUGGY]  reducer.addChildToBack(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToBack(helperCodeCost);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToBack(helperCodeCost);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
51	[BUG]  [BUGGY]  reducer.addChildToBack(savings);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToBack(savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToBack(savings);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
52	[BUG]  [BUGGY]  reducer.addChildToBack(helperCodeCost,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToBack(helperCodeCost,  reduction);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToBack(helperCodeCost,  reduction);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
53	[BUG]  [BUGGY]  reducer.addChildToBack(null);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToBack(null);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToBack(null);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
54	[BUG]  [BUGGY]  reducer.addChildToBack(reduction,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToBack(reduction,  saving);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToBack(reduction,  saving);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
55	[BUG]  [BUGGY]  reducer.addChildToBack(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToBack(helperCode);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToBack(helperCode);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
56	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.reductionMap.length)  {  [CE]  cannot  find  symbol  reductionMap  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.reductionMap.length)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.reductionMap.length)  {	  for(Reduction    reduction    :    reductions.reductions.length)    {    	non-compiled	[CE]  cannot  find  symbol  reductionMap	22	None	replace
57	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.reductions)  {  [CE]  cannot  find  symbol  reductions  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.reductions)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.reductions)  {	  for(Reduction    reduction    :    reductions.reductions.length)    {    	non-compiled	[CE]  cannot  find  symbol  reductions	22	None	replace
58	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductions.length)  {  [CE]  cannot  find  symbol  reductions  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.reductions.length)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.reductions.length)  {	  for(Reduction    reduction    :    reductions.reductions.length)    {    	non-compiled	[CE]  cannot  find  symbol  reductions	22	None	replace
59	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.reductions.length)  {  [CE]  cannot  find  symbol  reductions  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.reductions.length)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.reductions.length)  {	  for(Reduction    reduction    :    reductions.reductions.length)    {    	non-compiled	[CE]  cannot  find  symbol  reductions	22	None	replace
60	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().values())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet().values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
61	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().values())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator().values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
62	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).values())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
63	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().values())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next().values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
64	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.get(savings);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductions.get(savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductions.get(savings);	  HelperCode    helperCode    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
65	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductions.get(helperCodeCost  +  SAVINGS_THRESHOLD);	  HelperCode    helperCode    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
66	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.get(SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductions.get(SAVINGS_THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductions.get(SAVINGS_THRESHOLD);	  HelperCode    helperCode    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
67	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.get(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductions.get(reduction);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductions.get(reduction);	  HelperCode    helperCode    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
68	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductionMap.get(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductionMap.get(helperCodeCost);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductionMap.get(helperCodeCost);	  HelperCode    helperCode    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
69	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost,  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductions.get(helperCodeCost,  savings);	  HelperCode    helperCode    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
70	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  +  1);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductions.get(helperCodeCost  +  1);	  HelperCode    helperCode    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
71	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  saving)  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  saving)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  saving)  {	  for(Reduction    reduction    :    reductions.get(0),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
72	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  saver)  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  saver)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  saver)  {	  for(Reduction    reduction    :    reductions.get(0),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
73	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  contributingRoot)  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  contributingRoot)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  contributingRoot)  {	  for(Reduction    reduction    :    reductions.get(0),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
74	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  helperCodeCost  +  1)  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  helperCodeCost  +  1)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  helperCodeCost  +  1)  {	  for(Reduction    reduction    :    reductions.get(0),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
75	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(savings);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(savings);	  ReductionGatherer    helperCodeCost    =    reducer.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
76	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(savings);	  ReductionGatherer    helperCodeCost    =    reducer.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
77	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(null);	  ReductionGatherer    helperCodeCost    =    reducer.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
78	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getNodeForCodeInsertion(SAVINGS_THRESHOLD);	  ReductionGatherer    helperCodeCost    =    reducer.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
79	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reductions.getNodeForCodeInsertion(null);	  ReductionGatherer    helperCodeCost    =    reducer.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
80	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(reduction);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(reduction);	  ReductionGatherer    helperCodeCost    =    reducer.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
81	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  compiler.getNodeForCodeInsertion(null);	  ReductionGatherer    helperCodeCost    =    reducer.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
82	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
83	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
84	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.NAME);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCodeCost.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
85	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
86	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME,  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
87	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
88	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  For(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  [FE]      IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  For(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    For(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  	49	None	add
89	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Node  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  [FE]        IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Node  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    Node  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  	49	None	add
90	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  [FE]          IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  	49	None	add
91	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  réductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  réductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    for(Reduction  reduction  :  réductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
92	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  +  ]))  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  +  ]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  +  ]))  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
93	[BUG]  [BUGGY]  reducer.addChildrenToFront(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildrenToFront(reduction);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildrenToFront(reduction);	  reducer.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
94	[BUG]  [BUGGY]  reducer.addChildrenToFront(savings);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildrenToFront(savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildrenToFront(savings);	  reducer.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
95	[BUG]  [BUGGY]  reducer.addChildrenToFront(null);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildrenToFront(null);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildrenToFront(null);	  reducer.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
96	[BUG]  [BUGGY]  reducer.addChildrenToFront(root);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildrenToFront(root);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildrenToFront(root);	  reducer.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
97	[BUG]  [BUGGY]  reducer.addChildrenToFront(save);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildrenToFront(save);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildrenToFront(save);	  reducer.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
98	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions))  {  [CE]  no  suitable  method  found  for  toArray(Collection<FunctionRewriter.Reduction>)  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions))  {	  for(Reduction    reduction    :    reductions.entrySet())    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(Collection<FunctionRewriter.Reduction>)	48	None	replace
99	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.reductionMap.values())  {  [CE]  cannot  find  symbol  reductionMap  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.reductionMap.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.reductionMap.values())  {	  for(Reduction    reduction    :    reduction.reductionMap.values())    {    	non-compiled	[CE]  cannot  find  symbol  reductionMap	20	None	replace
100	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  reduction.next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  reduction.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  reduction.next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
101	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reduction().next())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reduction().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).reduction().next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
102	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).cloneTree().next())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).cloneTree().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).cloneTree().next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
103	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.get(0).next())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.get(0).next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.get(0).next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
104	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).remaining())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).remaining())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).remaining())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
105	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).removeFirst().next())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).removeFirst().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).removeFirst().next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
106	[BUG]  [BUGGY]  reducer.removeChild(parent);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.removeChild(parent);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.removeChild(parent);	  reducer.removeChild(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
107	[BUG]  [BUGGY]  reducer.removeChild(null);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.removeChild(null);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.removeChild(null);	  reducer.removeChild(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
108	[BUG]  [BUGGY]  reducer.removeChild(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.removeChild(helperCode);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.removeChild(helperCode);	  reducer.removeChild(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
109	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  helperCode)  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  helperCode)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  helperCode)  {	  for(Reduction    reduction    :    reductions.get(0),    savings)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
110	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  aiderCodeCost)  {  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  aiderCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  aiderCodeCost)  {	  for(Reduction    reduction    :    reductions.get(0),    savings)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
111	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  savings  +  1)  {  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  savings  +  1)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  savings  +  1)  {	  for(Reduction    reduction    :    reductions.get(0),    savings)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
112	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet())  {  [CE]  incompatible  types  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.keySet())  {	  for(Reduction    reduction    :    reductionMap.values())    {    	non-compiled	[CE]  incompatible  types	19	None	replace
113	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.get(helperCodeCost))  {  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]      IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.get(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.get(helperCodeCost))  {	  for(Reduction    reduction    :    reductionMap.values())    {    	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	19	None	replace
114	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values(),  savings)  {  [CE]  ')'  expected  [FE]        IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values(),  savings)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.values(),  savings)  {	  for(Reduction    reduction    :    reductionMap.values())    {    	non-compiled	[CE]  ')'  expected	19	None	replace
115	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).elements())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).elements())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).elements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
116	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().elements())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().elements())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.cloneTree().elements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
117	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().elements())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().elements())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().elements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
118	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.elements())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.elements())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.elements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
119	[BUG]  [BUGGY]  reducer.addChildToFront(root);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(root);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(root);	  reducer.addChildToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
120	[BUG]  [BUGGY]  reducer.addChildToFront(parent);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(parent);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(parent);	  reducer.addChildToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
121	[BUG]  [BUGGY]  reducer.addChildToFront(save);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(save);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(save);	  reducer.addChildToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
122	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  reduction.next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  reduction.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
123	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet().iterator().next())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet().iterator().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.keySet().iterator().next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	3	None	replace
124	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  savings.next())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  savings.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator(),  savings.next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
125	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.keySet().iterator().next())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.keySet().iterator().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.keySet().iterator().next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
126	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.keySet().next())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.keySet().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.keySet().next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
127	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet().next())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.keySet().next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
128	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.keySet().next())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.keySet().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.keySet().next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
129	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet(),  reduction.next())  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet(),  reduction.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
130	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().size())  {  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().size())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().size())  {	  for(Reduction    reduction    :    reductions.size()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
131	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).size())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).size())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).size())  {	  for(Reduction    reduction    :    reductions.size()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
132	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getValue())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getValue())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next().getValue())  {	  for(Reduction    reduction    :    reductions.size()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
133	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.elements().size())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.elements().size())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.elements().size())  {	  for(Reduction    reduction    :    reductions.size()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
134	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getFirstChild().getNext())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getFirstChild().getNext())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getFirstChild().getNext())  {	  for(Reduction    reduction    :    reductions.size()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
135	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext())  {	  for(Reduction    reduction    :    reductions.size()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
136	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  savings)  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  savings)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next(),  savings)  {	  for(Reduction    reduction    :    reductions.iterator().next(),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
137	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  saving)  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  saving)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next(),  saving)  {	  for(Reduction    reduction    :    reductions.iterator().next(),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
138	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  contributingRoot)  {  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  contributingRoot)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next(),  contributingRoot)  {	  for(Reduction    reduction    :    reductions.iterator().next(),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
139	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  saverCodeCost)  {  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  saverCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next(),  saverCodeCost)  {	  for(Reduction    reduction    :    reductions.iterator().next(),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
140	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1])  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1])  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1])  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ])    {    	non-compiled	[CE]  ')'  expected	38	None	replace
141	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]));  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]));	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ])    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	38	None	replace
142	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  2])  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  2])  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  2])  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ])    {    	non-compiled	[CE]  ')'  expected	38	None	replace
143	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1))  {  [CE]  ']'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ])    {    	non-compiled	[CE]  ']'  expected	38	None	replace
144	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  0])  {  [CE]  ']'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  0])  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  0])  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ])    {    	non-compiled	[CE]  ']'  expected	38	None	replace
145	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCodeCost))  {  [CE]  no  suitable  method  found  for  toArray(int)  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.toArray())    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int)	21	None	replace
146	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(savings))  {  [CE]  no  suitable  method  found  for  toArray(int)  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(savings))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(savings))  {	  for(Reduction    reduction    :    reductions.toArray())    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int)	21	None	replace
147	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  for(Reduction  reduction  :  reductionMap.values())  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  for(Reduction  reduction  :  reductionMap.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    for(Reduction  reduction  :  reductionMap.values())  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
148	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  For(Reduction  reduction  :  reductionMap.values())  {  [CE]  [FE]      IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  For(Reduction  reduction  :  reductionMap.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    For(Reduction  reduction  :  reductionMap.values())  {	  	non-compiled	[CE]  	18	None	add
149	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  Node  reduction  :  reductionMap.values())  {  [CE]  [FE]        IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  Node  reduction  :  reductionMap.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    Node  reduction  :  reductionMap.values())  {	  	non-compiled	[CE]  	18	None	add
150	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  if(Reduction  reduction  :  reductionMap.values())  {  [CE]  [FE]          IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  if(Reduction  reduction  :  reductionMap.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    if(Reduction  reduction  :  reductionMap.values())  {	  	non-compiled	[CE]  	18	None	add
151	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  Reduction  reduction  :  reductionMap.values())  {  [CE]  [FE]            IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  Reduction  reduction  :  reductionMap.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    Reduction  reduction  :  reductionMap.values())  {	  	non-compiled	[CE]  	18	None	add
152	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  Collection  <  Reduction>  reductionMap  =  reductions.values();  [CE]  illegal  start  of  expression  [FE]              IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  Collection  <  Reduction>  reductionMap  =  reductions.values();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    Collection  <  Reduction>  reductionMap  =  reductions.values();	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
153	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  NodeReduction  reduction  :  reductionMap.values())  {  [CE]  [FE]                IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  NodeReduction  reduction  :  reductionMap.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    NodeReduction  reduction  :  reductionMap.values())  {	  	non-compiled	[CE]  	18	None	add
154	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  int  helperCodeCost  =  reduction.getHelperCodeCost();  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  int  helperCodeCost  =  reduction.getHelperCodeCost();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    int  helperCodeCost  =  reduction.getHelperCodeCost();	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
155	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(savings);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(savings);	  HelperCodeCost    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
156	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost()  +  savings;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost()  +  savings;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost()  +  savings;	  HelperCodeCost    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
157	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost()  /  SAVINGS_THRESHOLD;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost()  /  SAVINGS_THRESHOLD;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost()  /  SAVINGS_THRESHOLD;	  HelperCodeCost    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
158	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings;	  HelperCodeCost    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
159	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(),  savings);  [CE]  ';'  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(),  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(),  savings);	  HelperCodeCost    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  ';'  expected	7	None	replace
160	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().remove(0))  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().remove(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().remove(0))  {	  for(Reduction    reduction    :    reductions.remove(0))    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
161	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.remove(0),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.remove(0),  helperCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.remove(0),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.remove(0))    {    	non-compiled	[CE]  ')'  expected	47	None	replace
162	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.elements(0))  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.elements(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.elements(0))  {	  for(Reduction    reduction    :    reductions.remove(0))    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
163	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list().iterator().next())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.list().iterator().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.list().iterator().next())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator().next())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
164	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).iterator().next())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).iterator().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).iterator().next())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator().next())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
165	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.next().iterator().next())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.next().iterator().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.next().iterator().next())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator().next())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
166	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reductions())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reductions())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.reductions())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
167	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  contributingRoot.values())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  contributingRoot.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  contributingRoot.values())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
168	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reductionMap.values())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reductionMap.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.reductionMap.values())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
169	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(helperCodeCost),  savings)  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(helperCodeCost),  savings)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(helperCodeCost),  savings)  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
170	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.get(helperCodeCost))  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.get(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.get(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
171	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(helperCodeCost),  saving)  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(helperCodeCost),  saving)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(helperCodeCost),  saving)  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
172	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(helperCodeCost,  reduction))  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(helperCodeCost,  reduction))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(helperCodeCost,  reduction))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
173	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(SAVINGS_THRESHOLD))  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(SAVINGS_THRESHOLD))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(SAVINGS_THRESHOLD))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
174	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().get(0))  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next().get(0))  {	  for(Reduction    reduction    :    reductions.iterator().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
175	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().get(0))  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator().get(0))  {	  for(Reduction    reduction    :    reductions.iterator().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
176	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().get(1))  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().get(1))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next().get(1))  {	  for(Reduction    reduction    :    reductions.iterator().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
177	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  helperCodeCost.iterator().get(0))  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  helperCodeCost.iterator().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  helperCodeCost.iterator().get(0))  {	  for(Reduction    reduction    :    reductions.iterator().get(0))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
178	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).getName())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).getName())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).getName())  {	  for(Reduction    reduction    :    reductions.iterator().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
179	[BUG]  [BUGGY]  reducer.removeChild(root);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.removeChild(root);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.removeChild(root);	  reducer.removeChild(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
180	[BUG]  [BUGGY]  reducer.removeChild(savings);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.removeChild(savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.removeChild(savings);	  reducer.removeChild(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
181	[BUG]  [BUGGY]  reducer.removeChild(saved);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.removeChild(saved);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.removeChild(saved);	  reducer.removeChild(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
182	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator().next().get(0))  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator().next().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().iterator().next().get(0))  {	  for(Reduction    reduction    :    reductions.values().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
183	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().get(0),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().get(0),  helperCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().get(0),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.values().get(0))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
184	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values().get(0))  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.values().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.values().get(0))  {	  for(Reduction    reduction    :    reductions.values().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
185	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.values().get(0))  {  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.values().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.values().get(0))  {	  for(Reduction    reduction    :    reductions.values().get(0))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
186	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().get(0),  savings)  {  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().get(0),  savings)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().get(0),  savings)  {	  for(Reduction    reduction    :    reductions.values().get(0))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
187	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator().get(0))  {  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().iterator().get(0))  {	  for(Reduction    reduction    :    reductions.values().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
188	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
189	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD,  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()!=  Token.THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCodeCost.getType()  ==  Token.THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  ||  reduction.getType()  ==  Token.COST);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  ||  reduction.getType()  ==  Token.COST);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
194	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).clone())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).clone())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
195	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().next().clone())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().next().clone())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
196	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone());  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next().clone());	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	6	None	replace
197	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone(),  savings)  {  [CE]  ')'  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone(),  savings)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next().clone(),  savings)  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  ')'  expected	6	None	replace
198	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().next().clone())  {  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().next().clone())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet().next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
199	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getSavings())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.getSavings())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.getSavings())  {	  for(Reduction    reduction    :    reduction.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
200	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductions.getSavings())  {  [CE]  cannot  find  symbol  reductions  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.reductions.getSavings())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.reductions.getSavings())  {	  for(Reduction    reduction    :    reduction.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	42	None	replace
201	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap.getSavings())  {  [CE]  cannot  find  symbol  reductionMap  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap.getSavings())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.reductionMap.getSavings())  {	  for(Reduction    reduction    :    reduction.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductionMap	42	None	replace
202	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getSavings())  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getSavings())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getSavings())  {	  for(Reduction    reduction    :    reduction.getSavings())    {    	non-compiled	[CE]  ')'  expected	42	None	replace
203	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.getSavings())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.getSavings())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.getSavings())  {	  for(Reduction    reduction    :    reduction.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
204	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values().iterator().next())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.values().iterator().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.values().iterator().next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
205	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  reduction.next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  reduction.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().iterator(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
206	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  helperCodeCost.next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  helperCodeCost.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().iterator(),  helperCodeCost.next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
207	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  savings.next())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  savings.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().iterator(),  savings.next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
208	[BUG]  [BUGGY]  reducer.addChildrenToFront(parent);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildrenToFront(parent);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildrenToFront(parent);	  reducer.addChildrenToFront(helperCode);    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
209	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost();  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeCost();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeCost();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
210	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(helperCodeCost);	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
211	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCode(savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reduction.getHelperCode(savings);	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
212	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion();  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
213	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode();  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCode();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
214	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode();  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductions.getHelperCode();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductions.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
215	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
216	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
217	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
218	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
219	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
220	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getValues())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.getValues())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.getValues())  {	  for(Reduction    reduction    :    reduction.values())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
221	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap().values())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap().values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.reductionMap().values())  {	  for(Reduction    reduction    :    reduction.values())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
222	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap.keySet())  {  [CE]  cannot  find  symbol  reductionMap  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap.keySet())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.reductionMap.keySet())  {	  for(Reduction    reduction    :    reductions.keySet())    {    	non-compiled	[CE]  cannot  find  symbol  reductionMap	17	None	replace
223	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().keySet())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().keySet())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().keySet())  {	  for(Reduction    reduction    :    reductions.keySet())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
224	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductions.keySet())  {  [CE]  cannot  find  symbol  reductions  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.reductions.keySet())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.reductions.keySet())  {	  for(Reduction    reduction    :    reductions.keySet())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	17	None	replace
225	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.keySet())  {  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.keySet())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.keySet())  {	  for(Reduction    reduction    :    reductions.keySet())    {    	non-compiled	[CE]  ')'  expected	17	None	replace
226	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.cloneTree().get(0))  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.cloneTree().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.cloneTree().get(0))  {	  for(Reduction    reduction    :    reductions.cloneTree().get(0))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
227	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().get(0),  helperCodeCost.get(0))  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().get(0),  helperCodeCost.get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.cloneTree().get(0),  helperCodeCost.get(0))  {	  for(Reduction    reduction    :    reductions.cloneTree().get(0))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
228	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.cloneTree().get(0))  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.cloneTree().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.cloneTree().get(0))  {	  for(Reduction    reduction    :    reductions.cloneTree().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
229	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).cloneTree().get(0))  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).cloneTree().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).cloneTree().get(0))  {	  for(Reduction    reduction    :    reductions.cloneTree().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
230	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get().cloneTree().get(0))  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get().cloneTree().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get().cloneTree().get(0))  {	  for(Reduction    reduction    :    reductions.cloneTree().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
231	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree(),  reduction.get(0))  {  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree(),  reduction.get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.cloneTree(),  reduction.get(0))  {	  for(Reduction    reduction    :    reductions.cloneTree().get(0))    {    	non-compiled	[CE]  ')'  expected	46	None	replace
232	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values().next())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.values().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.values().next())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
233	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.values().next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.values().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.values().next())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
234	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values().next())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.values().next())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
235	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().remove(helperCodeCost))  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().remove(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().remove(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
236	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().removeFirst())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().removeFirst())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().removeFirst())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
237	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelper();  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelper();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelper();	  Reducer    helperCodeCost    =    reduction.getReduction();    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
238	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHELPER_SOURCE();  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHELPER_SOURCE();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHELPER_SOURCE();	  Reducer    helperCodeCost    =    reduction.getReduction();    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
239	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getInitializingReduction();  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getInitializingReduction();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getInitializingReduction();	  Reducer    helperCodeCost    =    reduction.getReduction();    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
240	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.gethelperCodeCost();  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.gethelperCodeCost();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.gethelperCodeCost();	  Reducer    helperCodeCost    =    reduction.getReduction();    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
241	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getInsertion();  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getInsertion();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getInsertion();	  Reducer    helperCodeCost    =    reduction.getReduction();    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
242	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
243	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
244	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.COST);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()!=  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
245	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  &&  reduction.getChildCount()  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
246	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.COST);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.COST);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCodeCost.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
247	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost(savings);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost(savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelperCodeCost(savings);	  Reducer    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
248	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  +  savings;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  +  savings;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  +  savings;	  Reducer    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
249	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  /  SAVINGS_THRESHOLD;  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  /  SAVINGS_THRESHOLD;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  /  SAVINGS_THRESHOLD;	  Reducer    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
250	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  -  savings;	  Reducer    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
251	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  +  Savings;  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  +  Savings;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  +  Savings;	  Reducer    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
252	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD;  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  /  SAVINGS_THRESHOLD;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
253	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  +  savings;  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  +  savings;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  +  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
254	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  -  savings;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  -  savings;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getReductionGatherer()  -  savings;	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
255	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().entrySet())  {  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().entrySet())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().entrySet())  {	  for(Reduction    reduction    :    reductions.entrySet())    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
256	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.list())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.list())  {	  for(Reduction    reduction    :    reductions.entrySet())    {    	non-compiled	[CE]  cannot  find  symbol	48	None	replace
257	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().reductions)  {  [CE]  cannot  find  symbol  reductions  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().reductions)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().reductions)  {	  for(Reduction    reduction    :    reductions.reductions.length)    {    	non-compiled	[CE]  cannot  find  symbol  reductions	22	None	replace
258	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().get(1))  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().get(1))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().get(1))  {	  for(Reduction    reduction    :    reductions.values().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
259	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])  +  helperCodeCost)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])  +  helperCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])  +  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	50	None	replace
260	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  1))  {  [CE]  no  suitable  method  found  for  toArray(int)  [FE]      IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  1))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  1))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int)	50	None	replace
261	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductions.toArray())  {  [CE]  cannot  find  symbol  reductions  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.reductions.toArray())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.reductions.toArray())  {	  for(Reduction    reduction    :    reductions.toArray())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	21	None	replace
262	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCode))  {  [CE]  no  suitable  method  found  for  toArray(Node)  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCode))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(helperCode))  {	  for(Reduction    reduction    :    reductions.toArray())    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(Node)	21	None	replace
263	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  NodeReduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  NodeReduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    NodeReduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  	49	None	add
264	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helperCodeCost);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helperCodeCost);	  ReductionGatherer    helperCodeCost    =    reducer.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
265	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helper);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helper);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helper);	  ReductionGatherer    helperCodeCost    =    reducer.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
266	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(null,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(null,  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(null,  savings);	  ReductionGatherer    helperCodeCost    =    reducer.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
267	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helper);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helper);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helper);	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
268	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
269	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  +  saves;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  +  saves;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost()  +  saves;	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
270	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.keySet())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.keySet())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.keySet())  {	  for(Reduction    reduction    :    reductions.keySet())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
271	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().next(),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().next(),  helperCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().next(),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.iterator().next(),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
272	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  Savings)  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  Savings)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next(),  Savings)  {	  for(Reduction    reduction    :    reductions.iterator().next(),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
273	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  pruning)  {  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  pruning)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next(),  pruning)  {	  for(Reduction    reduction    :    reductions.iterator().next(),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
274	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(helperCodeCost);	  HelperCodeCost    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
275	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);	  HelperCodeCost    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
276	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(helper);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(helper);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(helper);	  HelperCodeCost    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
277	[BUG]  [BUGGY]  reducer.addChildrenToFront(saved);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildrenToFront(saved);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildrenToFront(saved);	  reducer.addChildrenToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	32	None	replace
278	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator(),  reduction.next())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator(),  reduction.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.entrySet().iterator(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
279	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator(),  savings.next())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator(),  savings.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.entrySet().iterator(),  savings.next())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	4	None	replace
280	[BUG]  [BUGGY]  reducer.addChildToFront(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(helperCodeCost  +  SAVINGS_THRESHOLD);	  reducer.addChildToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
281	[BUG]  [BUGGY]  reducer.addChildToFront(helperCodeCost,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(helperCodeCost,  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(helperCodeCost,  savings);	  reducer.addChildToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
282	[BUG]  [BUGGY]  reducer.addChildToFront(helperCodeCost  +  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(helperCodeCost  +  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(helperCodeCost  +  savings);	  reducer.addChildToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
283	[BUG]  [BUGGY]  for(Reduction  reduction  :  root.getSavings())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  root.getSavings())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  root.getSavings())  {	  for(Reduction    reduction    :    reduction.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
284	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.reductions.getSavings())  {  [CE]  cannot  find  symbol  reductions  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  this.reductions.getSavings())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  this.reductions.getSavings())  {	  for(Reduction    reduction    :    reduction.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	42	None	replace
285	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getSeconds())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.getSeconds())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.getSeconds())  {	  for(Reduction    reduction    :    reduction.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
286	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.NAME);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
287	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.NAME);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(savings.getType()  ==  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
288	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
289	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(null);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(null);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(null);	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
290	[BUG]  [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reduction.getHelperCodeInsertion(helperCodeCost);	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
291	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().next().clone())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().next().clone())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator().next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
292	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().get().clone())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().get().clone())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().get().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
293	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  >  reduction.getChildCount());  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCodeCost  >  reduction.getChildCount());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCodeCost  >  reduction.getChildCount());	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
294	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  >=  reduction.getChildCount());  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCodeCost  >=  reduction.getChildCount());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCodeCost  >=  reduction.getChildCount());	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
295	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction.getChildCount()  +  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction.getChildCount()  +  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCodeCost  ==  reduction.getChildCount()  +  savings);	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
296	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  reduction.getChildCount());  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCodeCost!=  reduction.getChildCount());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCodeCost!=  reduction.getChildCount());	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
297	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  >=  reduction.getChildCount()  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCodeCost  >=  reduction.getChildCount()  -  1);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCodeCost  >=  reduction.getChildCount()  -  1);	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
298	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperReduction();  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperReduction();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelperReduction();	  Reducer    helperCodeCost    =    reduction.getReduction();    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
299	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  -  1);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductions.get(helperCodeCost  -  1);	  HelperCode    helperCode    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
300	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  +  THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  +  THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductions.get(helperCodeCost  +  THRESHOLD);	  HelperCode    helperCode    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
301	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  +  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  +  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductions.get(helperCodeCost  +  savings);	  HelperCode    helperCode    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
302	[BUG]  [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  +  2);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reductions.get(helperCodeCost  +  2);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reductions.get(helperCodeCost  +  2);	  HelperCode    helperCode    =    reductions.get(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	51	None	replace
303	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  int  helperCodeCost  =  reduction.estimateSavings();  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  int  helperCodeCost  =  reduction.estimateSavings();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    int  helperCodeCost  =  reduction.estimateSavings();	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
304	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  NodeTraversal.traverse(compiler,  reduction,  new  GetterReducer());  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  NodeTraversal.traverse(compiler,  reduction,  new  GetterReducer());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    NodeTraversal.traverse(compiler,  reduction,  new  GetterReducer());	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
305	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values()).addChildrenToFront(helperCode);  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values()).addChildrenToFront(helperCode);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.values()).addChildrenToFront(helperCode);	  for(Reduction    reduction    :    reductionMap.values())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
306	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.COST);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
307	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST  +  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
308	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.COST,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
309	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.COST);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.COST);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(savings.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.COST);    	non-compiled	[CE]  class,  interface,  or  enum  expected	54	None	replace
310	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  Savings)  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  Savings)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  Savings)  {	  for(Reduction    reduction    :    reductions.get(0),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
311	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(1),  saving)  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(1),  saving)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(1),  saving)  {	  for(Reduction    reduction    :    reductions.get(0),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
312	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  Saving)  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  Saving)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  Saving)  {	  for(Reduction    reduction    :    reductions.get(0),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	23	None	replace
313	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.helperCode.values())  {  [CE]  cannot  find  symbol  helperCode  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.helperCode.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.helperCode.values())  {	  for(Reduction    reduction    :    reduction.values())    {    	non-compiled	[CE]  cannot  find  symbol  helperCode	15	None	replace
314	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductions())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.reductions())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.reductions())  {	  for(Reduction    reduction    :    reduction.values())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
315	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost(helper);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost(helper);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelperCodeCost(helper);	  Reducer    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
316	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  +  saves;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  +  saves;  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelperCodeCost()  +  saves;	  Reducer    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
317	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  compiler.values())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  compiler.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator(),  compiler.values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  ')'  expected	16	None	replace
318	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  mapping.values())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  mapping.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator(),  mapping.values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  ')'  expected	16	None	replace
319	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().values())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.entrySet().values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
320	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reduction())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reduction())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).reduction())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
321	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).remove())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).remove())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).remove())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
322	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.get(0).next())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.get(0).next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.get(0).next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
323	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.helperMap.values())  {  [CE]  cannot  find  symbol  helperMap  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.helperMap.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.helperMap.values())  {	  for(Reduction    reduction    :    reduction.reductionMap.values())    {    	non-compiled	[CE]  cannot  find  symbol  helperMap	20	None	replace
324	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getReductionMap().values())  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.getReductionMap().values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.getReductionMap().values())  {	  for(Reduction    reduction    :    reduction.reductionMap.values())    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
325	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTreeSet().next())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTreeSet().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.cloneTreeSet().next())  {	  for(Reduction    reduction    :    reductions.entrySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
326	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get().next())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get().next())  {	  for(Reduction    reduction    :    reductions.entrySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
327	[BUG]  [BUGGY]  reducer.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.removeChild(helperCodeCost  +  SAVINGS_THRESHOLD);	  reducer.removeChild(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
328	[BUG]  [BUGGY]  reducer.removeChild(helperCodeCost  +  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.removeChild(helperCodeCost  +  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.removeChild(helperCodeCost  +  savings);	  reducer.removeChild(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
329	[BUG]  [BUGGY]  reducer.removeChild(helperCodeCost  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.removeChild(helperCodeCost  -  1);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.removeChild(helperCodeCost  -  1);	  reducer.removeChild(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
330	[BUG]  [BUGGY]  reducer.removeChild(helperCodeCost  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.removeChild(helperCodeCost  +  1);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.removeChild(helperCodeCost  +  1);	  reducer.removeChild(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	30	None	replace
331	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).next())  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values()).next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values()).next())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  illegal  start  of  expression	1	None	replace
332	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values(),  reduction.next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values(),  reduction.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
333	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.listElements())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.listElements())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.listElements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
334	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getElements())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.getElements())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.getElements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	28	None	replace
335	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  savings);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  savings);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
336	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  saving);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
337	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
338	[BUG]  [BUGGY]  reducer.addChildToBack(saved);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToBack(saved);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToBack(saved);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
339	[BUG]  [BUGGY]  reducer.removeChildToBack(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.removeChildToBack(helperCodeCost);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.removeChildToBack(helperCodeCost);	  reducer.addChildToBack(reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
340	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  reducer.next())  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  reducer.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().iterator(),  reducer.next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
341	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  helperCode.next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  helperCode.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().iterator(),  helperCode.next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
342	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  pruning.next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  pruning.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().iterator(),  pruning.next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
343	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aidCodeCost)  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aidCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aidCodeCost)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	37	None	replace
344	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  compiler.get(0))  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  compiler.get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator(),  compiler.get(0))  {	  for(Reduction    reduction    :    reductions.iterator().get(0))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
345	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.iterator().get(0))  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.iterator().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.iterator().get(0))  {	  for(Reduction    reduction    :    reductions.iterator().get(0))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
346	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reduction.get(0))  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reduction.get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator(),  reduction.get(0))  {	  for(Reduction    reduction    :    reductions.iterator().get(0))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
347	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reducer.get(0))  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reducer.get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator(),  reducer.get(0))  {	  for(Reduction    reduction    :    reductions.iterator().get(0))    {    	non-compiled	[CE]  ')'  expected	39	None	replace
348	[BUG]  [BUGGY]  for(Reduction  reduction  :  resources.get(helperCodeCost))  {  [CE]  cannot  find  symbol  resources  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  resources.get(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  resources.get(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  resources	40	None	replace
349	[BUG]  [BUGGY]  for(Reduction  reduction  :  providers.get(helperCodeCost))  {  [CE]  cannot  find  symbol  providers  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  providers.get(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  providers.get(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  providers	40	None	replace
350	[BUG]  [BUGGY]  for(Reduction  reduction  :  allReductions.get(helperCodeCost))  {  [CE]  cannot  find  symbol  allReductions  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  allReductions.get(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  allReductions.get(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  allReductions	40	None	replace
351	[BUG]  [BUGGY]  for(Reduction  reduction  :  helperCode.get(reductions))  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  helperCode.get(reductions))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  helperCode.get(reductions))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
352	[BUG]  [BUGGY]  for(Reduction  reduction  :  compiler.get(helperCodeCost))  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  compiler.get(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  compiler.get(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
353	[BUG]  [BUGGY]  for(Reduction  reduction  :  preventions.get(helperCodeCost))  {  [CE]  cannot  find  symbol  preventions  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  preventions.get(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  preventions.get(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol  preventions	40	None	replace
354	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(null),  helperCode)  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(null),  helperCode)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeInsertion(null),  helperCode)  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
355	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer();  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getInitializingReductionGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
356	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE();  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHELPER_SOURCE();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
357	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getLocalReductionGatherer();  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getLocalReductionGatherer();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getLocalReductionGatherer();	  ReductionGatherer    helperCodeCost    =    reduction.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	29	None	replace
358	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().get(1))  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().get(1))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.cloneTree().get(1))  {	  for(Reduction    reduction    :    reductions.cloneTree().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
359	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.cloneTree().get(0))  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.cloneTree().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.cloneTree().get(0))  {	  for(Reduction    reduction    :    reductions.cloneTree().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
360	[BUG]  [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(helperCode.getType()  ==  Token.THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(helperCode.getType()  ==  Token.THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
361	[BUG]  [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(savings.getType()  ==  Token.THRESHOLD);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(savings.getType()  ==  Token.THRESHOLD);	  Preconditions.checkState(reduction.getType()    ==    Token.THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
362	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction();  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reduction.getHelperReduction();	  ReductionGatherer    helperCodeCost    =    reducer.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
363	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getHelper();  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getHelper();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reducer.getHelper();	  ReductionGatherer    helperCodeCost    =    reducer.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	31	None	replace
364	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  reducer.next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  reducer.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator(),  reducer.next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
365	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  helperCode.next())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  helperCode.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator(),  helperCode.next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
366	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  pruning.next())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  pruning.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator(),  pruning.next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
367	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.keySet().iterator(),  reduction.next())  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.keySet().iterator(),  reduction.next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.keySet().iterator(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
368	[BUG]  [BUGGY]  For(Reduction  reduction  :  reduction.values())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reduction.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reduction.values())  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	58	None	replace
369	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values(),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.values(),  helperCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.values(),  helperCodeCost)  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	58	None	replace
370	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.iterator().values())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.iterator().values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.iterator().values())  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	58	None	replace
371	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().remove())  {  [CE]  'void'  type  not  allowed  here  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().remove())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().remove())  {	  for(Reduction    reduction    :    reductions.remove(0))    {    	non-compiled	[CE]  'void'  type  not  allowed  here	47	None	replace
372	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.NAME);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()!=  Token.NAME);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
373	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
374	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.NAME  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.NAME);    	non-compiled	[CE]  class,  interface,  or  enum  expected	57	None	replace
375	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getSamples())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reduction.getSamples())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reduction.getSamples())  {	  for(Reduction    reduction    :    reduction.values())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
376	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getList().iterator().next())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.getList().iterator().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.getList().iterator().next())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator().next())    {    	non-compiled	[CE]  cannot  find  symbol	4	None	replace
377	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.removeAll(reductions.entrySet().next()))  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.removeAll(reductions.entrySet().next()))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.removeAll(reductions.entrySet().next()))  {	  for(Reduction    reduction    :    reductions.entrySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
378	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCode();  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCode();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelperCode();	  Reducer    helperCodeCost    =    reduction.getReduction();    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
379	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator().values())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator().values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.entrySet().iterator().values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
380	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list().values())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.list().values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.list().values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
381	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()))  {  [CE]  no  suitable  method  found  for  toArray(int)  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions.size()))  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int)	16	None	replace
382	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).next().clone())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).next().clone())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
383	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().next().clone())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().next().clone())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.entrySet().next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
384	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.COST);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	52	None	replace
385	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).next(),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).next(),  helperCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).next(),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.iterator().next(),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
386	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  Saving)  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  Saving)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next(),  Saving)  {	  for(Reduction    reduction    :    reductions.iterator().next(),    helperCodeCost)    {    	non-compiled	[CE]  ')'  expected	5	None	replace
387	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values().next())  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.values().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.values().next())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
388	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeCost())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeCost())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeCost())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
389	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray())  {  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().toArray())  {	  for(Reduction    reduction    :    reductions.toArray())    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
390	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().toArray())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().toArray())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().toArray())  {	  for(Reduction    reduction    :    reductions.toArray())    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
391	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aiderCode)  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aiderCode)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aiderCode)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	37	None	replace
392	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helpingerCode)  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helpingerCode)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helpingerCode)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	37	None	replace
393	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  mapping.keySet().next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  mapping.keySet().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  mapping.keySet().next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
394	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.keySet().next())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.keySet().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.keySet().next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  ')'  expected	45	None	replace
395	[BUG]  [BUGGY]  Preconditions.checkState(reduction!=  reduction.getChildCount());  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction!=  reduction.getChildCount());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction!=  reduction.getChildCount());	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
396	[BUG]  [BUGGY]  Preconditions.checkState(reduction  ==  reduction.getChildCount());  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction  ==  reduction.getChildCount());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction  ==  reduction.getChildCount());	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
397	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getChildCount()  ==  reduction.getChildCount());  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getChildCount()  ==  reduction.getChildCount());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getChildCount()  ==  reduction.getChildCount());	  Preconditions.checkState(helperCodeCost    ==    reduction.getChildCount());    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
398	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values().get(0))  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.values().get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.values().get(0))  {	  for(Reduction    reduction    :    reductions.values().get(0))    {    	non-compiled	[CE]  ')'  expected	24	None	replace
399	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  mapping.keySet().iterator().next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  mapping.keySet().iterator().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  mapping.keySet().iterator().next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	3	None	replace
400	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).removeFirst())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).removeFirst())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).removeFirst())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
401	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  reductions.getHelperCodeCost();  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCodeCost  helperCodeCost  =  reductions.getHelperCodeCost();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCodeCost  helperCodeCost  =  reductions.getHelperCodeCost();	  HelperCodeCost    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
402	[BUG]  [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(saved);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(saved);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCodeCost  helperCodeCost  =  reduction.getHelperCodeCost(saved);	  HelperCodeCost    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
403	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  int  helperCodeCost  =  reduction.estimateSavings();  for(Reduction  reduction  :  reductionMap.values())  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  int  helperCodeCost  =  reduction.estimateSavings();  for(Reduction  reduction  :  reductionMap.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    int  helperCodeCost  =  reduction.estimateSavings();  for(Reduction  reduction  :  reductionMap.values())  {	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
404	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  NodeTraversal.traverse(compiler,  reduction,  new  GetterReturnStatementReducer());  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  NodeTraversal.traverse(compiler,  reduction,  new  GetterReturnStatementReducer());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    NodeTraversal.traverse(compiler,  reduction,  new  GetterReturnStatementReducer());	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
405	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  NodeTraversal.traverse(compiler,  reduction,  new  CreateStatementReducer());  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  NodeTraversal.traverse(compiler,  reduction,  new  CreateStatementReducer());  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    NodeTraversal.traverse(compiler,  reduction,  new  CreateStatementReducer());	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
406	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE);  [CE]  illegal  start  of  expression  [FE]          IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductionMap.values())    {    NodeTraversal.traverse(compiler,  reduction,  HELPER_SOURCE);	  	non-compiled	[CE]  illegal  start  of  expression	18	None	add
407	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  *  ]))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  *  ]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  *  ]))  {	  	non-compiled	[CE]  illegal  start  of  expression	49	None	add
408	[BUG]  [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helperCode);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	ReductionGatherer  helperCodeCost  =  reducer.getNodeForCodeInsertion(helperCode);	  ReductionGatherer    helperCodeCost    =    reducer.getNodeForCodeInsertion(null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	33	None	replace
409	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.reductions.values())  {  [CE]  cannot  find  symbol  reductions  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.reductions.values())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.reductions.values())  {	  for(Reduction    reduction    :    reduction.reductions.values())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	14	None	replace
410	[BUG]  [BUGGY]  reducer.addChildToFront(saving);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(saving);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(saving);	  reducer.addChildToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
411	[BUG]  [BUGGY]  reducer.addChildToFront(saved);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  reducer.addChildToFront(saved);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	reducer.addChildToFront(saved);	  reducer.addChildToFront(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	35	None	replace
412	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().get(helperCodeCost))  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().get(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().get(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
413	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.remove(helperCodeCost))  {  [CE]  for-each  not  applicable  to  expression  type  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.remove(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.remove(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	40	None	replace
414	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().get(helperCodeCost))  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().get(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.keySet().get(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
415	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.get(helperCodeCost))  {  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.get(helperCodeCost))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.get(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
416	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(savings))  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(savings))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(savings))  {	  for(Reduction    reduction    :    reductions.get(helperCodeCost))    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
417	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.get(0))  {  [CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductionMap.get(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductionMap.get(0))  {	  for(Reduction    reduction    :    reductionMap.values())    {    	non-compiled	[CE]  method  get  in  interface  Multimap<K,V>  cannot  be  applied  to  given  types;	19	None	replace
418	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
419	[BUG]  [BUGGY]  HelperCode  helperCodeCost  =  reductions.getHelperCodeCost();  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCodeCost  =  reductions.getHelperCodeCost();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCodeCost  =  reductions.getHelperCodeCost();	  HelperCode    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	53	None	replace
420	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().reductions.length)  {  [CE]  cannot  find  symbol  reductions  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().reductions.length)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().reductions.length)  {	  for(Reduction    reduction    :    reductions.reductions.length)    {    	non-compiled	[CE]  cannot  find  symbol  reductions	22	None	replace
421	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().reductions)  {  [CE]  cannot  find  symbol  reductions  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().reductions)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.iterator().next().reductions)  {	  for(Reduction    reduction    :    reductions.reductions.length)    {    	non-compiled	[CE]  cannot  find  symbol  reductions	22	None	replace
422	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.reductions.size())  {  [CE]  cannot  find  symbol  reductions  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.reductions.size())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.reductions.size())  {	  for(Reduction    reduction    :    reductions.reductions.length)    {    	non-compiled	[CE]  cannot  find  symbol  reductions	22	None	replace
423	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  helpingerCodeCost)  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  helpingerCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0),  helpingerCodeCost)  {	  for(Reduction    reduction    :    reductions.get(0),    savings)    {    	non-compiled	[CE]  ')'  expected	26	None	replace
424	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.values().iterator().next())  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.values().iterator().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.values().iterator().next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
425	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  mapping.values().iterator().next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  mapping.values().iterator().next())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  mapping.values().iterator().next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
426	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values()).addChildrenToFront(helperCode);  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.values()).addChildrenToFront(helperCode);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.values()).addChildrenToFront(helperCode);	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	58	None	replace
427	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values()).addChildToFront(helperCode);  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.values()).addChildToFront(helperCode);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.values()).addChildToFront(helperCode);	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	58	None	replace
428	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]))  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]))  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	58	None	replace
429	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values()  +  helperCodeCost)  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  For(Reduction  reduction  :  reductions.values()  +  helperCodeCost)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	For(Reduction  reduction  :  reductions.values()  +  helperCodeCost)  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	58	None	replace
430	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelperCodeCost(helperCode);	  Reducer    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
431	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reductions.getHelperCodeCost();  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reductions.getHelperCodeCost();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reductions.getHelperCodeCost();	  Reducer    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
432	[BUG]  [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost(saved);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Reducer  helperCodeCost  =  reduction.getHelperCodeCost(saved);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Reducer  helperCodeCost  =  reduction.getHelperCodeCost(saved);	  Reducer    helperCodeCost    =    reduction.getHelperCodeCost();    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
433	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.remove(0))  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.remove(0))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.remove(0))  {	  for(Reduction    reduction    :    reductions,    compiler.get(0))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
434	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeCost(null))  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeCost(null))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeCost(null))  {	  for(Reduction    reduction    :    reductions,    compiler.get(0))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
435	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getAllReductions())  {  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getAllReductions())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getAllReductions())  {	  for(Reduction    reduction    :    reductions,    compiler.get(0))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
436	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeCost(helperCode))  {  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeCost(helperCode))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions,  compiler.getNodeForCodeCost(helperCode))  {	  for(Reduction    reduction    :    reductions,    compiler.get(0))    {    	non-compiled	[CE]  ')'  expected	25	None	replace
437	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).cloneTree())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).cloneTree())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.get(0).cloneTree())  {	  for(Reduction    reduction    :    reductions.cloneTree().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
438	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().clone().clone())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().clone().clone())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.cloneTree().clone().clone())  {	  for(Reduction    reduction    :    reductions.cloneTree().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
439	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().clone())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().clone())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.cloneTree().clone())  {	  for(Reduction    reduction    :    reductions.cloneTree().get(0))    {    	non-compiled	[CE]  cannot  find  symbol	46	None	replace
440	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().getSavings())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().getSavings())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.cloneTree().getSavings())  {	  for(Reduction    reduction    :    reduction.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
441	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.removeSavings())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.removeSavings())  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.removeSavings())  {	  for(Reduction    reduction    :    reduction.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
442	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  ||  reduction.getType()  ==  Token.GETPROP);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  ||  reduction.getType()  ==  Token.GETPROP);  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.THRESHOLD  ||  reduction.getType()  ==  Token.GETPROP);	  Preconditions.checkState(reduction.getType()    ==    Token.THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	56	None	replace
443	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  aiderCode)  {  [CE]  ')'  expected  [FE]    IllegalStateException    [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  aiderCode)  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  aiderCode)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	50	None	replace
444	[BUG]  [BUGGY]  HelperCode  helperCode  =  reducer.getHelperCode();  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  HelperCode  helperCode  =  reducer.getHelperCode();  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	HelperCode  helperCode  =  reducer.getHelperCode();	  HelperCode    helperCode    =    reduction.getHelperCode();    	non-compiled	[CE]  class,  interface,  or  enum  expected	55	None	replace
445	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().remove(1))  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]        int  savings  =  0;  for  (Reduction  reduction  :  reductions)  {  savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {      [BUGGY]  for(Reduction  reduction  :  reductions.values().remove(1))  {  [BUGGY]      reduction.apply();  }  Node  addingRoot  =  compiler.getNodeForCodeInsertion(null);  addingRoot.addChildrenToFront(helperCode);  compiler.reportCodeChange();  }  }  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	94	94	1	replace	for(Reduction  reduction  :  reductions.values().remove(1))  {	  for(Reduction    reduction    :    reductions.remove(0))    {    	non-compiled	[CE]  cannot  find  symbol	47	None	replace
