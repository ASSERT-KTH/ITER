bugid	buggy	buggy_class	suspiciousness	buggy_line	endbuggycode	original_failing_test_number	action	patch	original_buggy	execution_result	diagnosis	previous_bug_id	new_failing_test_number	this_action
1	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  contributingRoot.values())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  contributingRoot.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  contributingRoot.values())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
2	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reductions())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reductions())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.reductions())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
3	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  savings.values())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  savings.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  savings.values())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
4	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getValue())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getValue())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().getValue())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
5	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reductionMap.values())  {  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reductionMap.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.reductionMap.values())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
6	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext())  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
7	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.clone().getSavings())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.clone().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductionMap.clone().getSavings())  {	  for(Reduction    reduction    :    reductionMap.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
8	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.getSeconds())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.getSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductionMap.getSeconds())  {	  for(Reduction    reduction    :    reductionMap.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
9	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.getRawSavings())  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.getRawSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductionMap.getRawSavings())  {	  for(Reduction    reduction    :    reductionMap.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
10	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	add	for(Reduction  reduction  :  reductionMap.values())  {	  for(Reduction    reduction    :    reductionMap.getSavings())    {    	compilable	  [FE]  IllegalStateException  	26	1	replace
11	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  [FE]  IllegalStateException  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductionMap.values())  {	  for(Reduction    reduction    :    reductionMap.getSavings())    {    	compilable	  [FE]  IllegalStateException  	26	1	replace
12	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reduction);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reduction);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
13	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
14	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducer);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducer);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
15	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
16	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  GetterReducer());  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  new  GetterReducer());  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  externs,  new  GetterReducer());	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
17	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reductions);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reductions);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
18	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  reduction.next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  reduction.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0),  reduction.next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  ')'  expected	32	None	replace
19	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).cloneTree().next())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).cloneTree().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).cloneTree().next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
20	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reduction().next())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reduction().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).reduction().next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
21	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reductions())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reductions())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).reductions())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
22	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).clone().next())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).clone().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).clone().next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
23	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).removeFirst().next())  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).removeFirst().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).removeFirst().next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
24	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().getValues())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().getValues())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.cloneTree().getValues())  {	  for(Reduction    reduction    :    reductions.getValues())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
25	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.clone().getValues())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.clone().getValues())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.clone().getValues())  {	  for(Reduction    reduction    :    reductions.getValues())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
26	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().getValues())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().getValues())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().getValues())  {	  for(Reduction    reduction    :    reductions.getValues())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
27	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getValues())  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.getValues())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.getValues())  {	  for(Reduction    reduction    :    reductions.getValues())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
28	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getKey())  {  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.getKey())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.getKey())  {	  for(Reduction    reduction    :    reductions.getValues())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
29	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getSavings())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().getSavings())  {	  for(Reduction    reduction    :    reductions.iterator().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
30	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().getSavings())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator().getSavings())  {	  for(Reduction    reduction    :    reductions.iterator().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
31	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().getSavings())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().getSavings())  {	  for(Reduction    reduction    :    reductions.iterator().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
32	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).getSavings())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).getSavings())  {	  for(Reduction    reduction    :    reductions.iterator().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
33	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().next().clone())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().next().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
34	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone(),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone(),  helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().clone(),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  ')'  expected	34	None	replace
35	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).clone())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
36	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().next().clone())  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().next().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
37	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone(),  aiderCodeCost)  {  [CE]  ')'  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone(),  aiderCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().clone(),  aiderCodeCost)  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  ')'  expected	34	None	replace
38	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().values())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().values())  {	  for(Reduction    reduction    :    reductions.clone().values())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
39	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.clone(),  reduction.values())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.clone(),  reduction.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.clone(),  reduction.values())  {	  for(Reduction    reduction    :    reductions.clone().values())    {    	non-compiled	[CE]  ')'  expected	15	None	replace
40	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.clone().reductions())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.clone().reductions())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.clone().reductions())  {	  for(Reduction    reduction    :    reductions.clone().values())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
41	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.clone(),  reduction.getSavings())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.clone(),  reduction.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.clone(),  reduction.getSavings())  {	  for(Reduction    reduction    :    reductions.clone().getSavings())    {    	non-compiled	[CE]  ')'  expected	25	None	replace
42	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getSavings().clone())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.getSavings().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.getSavings().clone())  {	  for(Reduction    reduction    :    reductions.clone().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
43	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray().getSavings())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray().getSavings())  {	  for(Reduction    reduction    :    reductions.clone().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
44	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).elements())  {  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).elements())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).elements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
45	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().elements())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().elements())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().elements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
46	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().elements())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().elements())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.cloneTree().elements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
47	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.clone().elements())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.clone().elements())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.clone().elements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
48	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.reductionMap.getSavings())  {  [CE]  cannot  find  symbol  reductionMap  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  this.reductionMap.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  this.reductionMap.getSavings())  {	  for(Reduction    reduction    :    this.reductions.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductionMap	37	None	replace
49	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values().next())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.values().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.values().next())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
50	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().get(0))  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().get(0))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().get(0))  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
51	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().remove(0))  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().remove(0))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().remove(0))  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  cannot  find  symbol	30	None	replace
52	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCodeCost))  {  [CE]  no  suitable  method  found  for  toArray(int)  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCodeCost))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.toArray(reductions))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int)	4	None	replace
53	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions,  helperCodeCost))  {  [CE]  no  suitable  method  found  for  toArray(Collection<FunctionRewriter.Reduction>,int)  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions,  helperCodeCost))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions,  helperCodeCost))  {	  for(Reduction    reduction    :    reductions.toArray(reductions))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(Collection<FunctionRewriter.Reduction>,int)	4	None	replace
54	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCodeCost,  reductions))  {  [CE]  no  suitable  method  found  for  toArray(int,Collection<FunctionRewriter.Reduction>)  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCodeCost,  reductions))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(helperCodeCost,  reductions))  {	  for(Reduction    reduction    :    reductions.toArray(reductions))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int,Collection<FunctionRewriter.Reduction>)	4	None	replace
55	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions),  helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.toArray(reductions))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
56	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCodeCost),  reductions)  {  [CE]  ')'  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCodeCost),  reductions)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(helperCodeCost),  reductions)  {	  for(Reduction    reduction    :    reductions.toArray(reductions))    {    	non-compiled	[CE]  ')'  expected	4	None	replace
57	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions,  aiderCodeCost))  {  [CE]  cannot  find  symbol  aiderCodeCost  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions,  aiderCodeCost))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions,  aiderCodeCost))  {	  for(Reduction    reduction    :    reductions.toArray(reductions))    {    	non-compiled	[CE]  cannot  find  symbol  aiderCodeCost	4	None	replace
58	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().cloneTree())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().cloneTree())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().cloneTree())  {	  for(Reduction    reduction    :    reductions.cloneTree())    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
59	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().cloneTree())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().cloneTree())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().cloneTree())  {	  for(Reduction    reduction    :    reductions.cloneTree())    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
60	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.clonePosition())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.clonePosition())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.clonePosition())  {	  for(Reduction    reduction    :    reductions.cloneTree())    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
61	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.clonePath())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.clonePath())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.clonePath())  {	  for(Reduction    reduction    :    reductions.cloneTree())    {    	non-compiled	[CE]  cannot  find  symbol	49	None	replace
62	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductions.iterator())  {  [CE]  cannot  find  symbol  reductions  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.reductions.iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.reductions.iterator())  {	  for(Reduction    reduction    :    this.reductions.iterator())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	50	None	replace
63	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.reductions.iterator())  {  [CE]  cannot  find  symbol  reductions  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.reductions.iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.reductions.iterator())  {	  for(Reduction    reduction    :    this.reductions.iterator())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	50	None	replace
64	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).iterator())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).iterator())  {	  for(Reduction    reduction    :    this.reductions.iterator())    {    	non-compiled	[CE]  cannot  find  symbol	50	None	replace
65	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.reductions.values())  {  [CE]  cannot  find  symbol  reductions  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  this.reductions.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  this.reductions.values())  {	  for(Reduction    reduction    :    this.reductions.iterator())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	50	None	replace
66	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getSavings().cloneTree().cloneTree())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.getSavings().cloneTree().cloneTree())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.getSavings().cloneTree().cloneTree())  {	  for(Reduction    reduction    :    reduction.cloneTree().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
67	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getSavings().cloneTree())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.getSavings().cloneTree())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.getSavings().cloneTree())  {	  for(Reduction    reduction    :    reduction.cloneTree().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
68	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.cloneTree(),  reduction.getSavings())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.cloneTree(),  reduction.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.cloneTree(),  reduction.getSavings())  {	  for(Reduction    reduction    :    reduction.cloneTree().getSavings())    {    	non-compiled	[CE]  ')'  expected	38	None	replace
69	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductions.cloneTree().getSavings())  {  [CE]  cannot  find  symbol  reductions  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.reductions.cloneTree().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.reductions.cloneTree().getSavings())  {	  for(Reduction    reduction    :    reduction.cloneTree().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	38	None	replace
70	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getSavings().cloneTree().cloneTree())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.getSavings().cloneTree().cloneTree())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.getSavings().cloneTree().cloneTree())  {	  for(Reduction    reduction    :    reduction.cloneTree().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
71	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  reduction.next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  reduction.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
72	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet().iterator().next())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet().iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductionMap.keySet().iterator().next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	31	None	replace
73	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet(),  reduction.iterator().next())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet(),  reduction.iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet(),  reduction.iterator().next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
74	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  reducer.next())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator(),  reducer.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator(),  reducer.next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
75	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.keySet().iterator().next())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.keySet().iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.keySet().iterator().next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  cannot  find  symbol	31	None	replace
76	[BUG]  [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	ReductionGatherer  reduction  =  compiler.getReductionGatherer(helperCodeCost);	  ReductionGatherer    reduction    =    compiler.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
77	[BUG]  [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(),  helperCodeCost);  [CE]  ';'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(),  helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	ReductionGatherer  reduction  =  compiler.getReductionGatherer(),  helperCodeCost);	  ReductionGatherer    reduction    =    compiler.getReductionGatherer();    	non-compiled	[CE]  ';'  expected	46	None	replace
78	[BUG]  [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(),  helperCodeCost;  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(),  helperCodeCost;  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	ReductionGatherer  reduction  =  compiler.getReductionGatherer(),  helperCodeCost;	  ReductionGatherer    reduction    =    compiler.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
79	[BUG]  [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGathererCost();  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGathererCost();  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	ReductionGatherer  reduction  =  compiler.getReductionGathererCost();	  ReductionGatherer    reduction    =    compiler.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
80	[BUG]  [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer()  -  helperCodeCost;  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer()  -  helperCodeCost;  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	ReductionGatherer  reduction  =  compiler.getReductionGatherer()  -  helperCodeCost;	  ReductionGatherer    reduction    =    compiler.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
81	[BUG]  [BUGGY]  ReductionGatherer  reduction  =  reducer.getReductionGatherer();  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  ReductionGatherer  reduction  =  reducer.getReductionGatherer();  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	ReductionGatherer  reduction  =  reducer.getReductionGatherer();	  ReductionGatherer    reduction    =    compiler.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
82	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  illegal  start  of  expression  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
83	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Node  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Node  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    Node  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  	5	None	add
84	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  For(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  [FE]        IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  For(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    For(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  	5	None	add
85	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  [FE]          IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  	5	None	add
86	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Collection  <  Reduction>  reductions  =  Collections.emptyList();  [CE]  illegal  start  of  expression  [FE]            IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Collection  <  Reduction>  reductions  =  Collections.emptyList();  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    Collection  <  Reduction>  reductions  =  Collections.emptyList();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
87	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Node  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]));  [CE]  ';'  expected  [FE]              IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Node  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]));  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    Node  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]));	  	non-compiled	[CE]  ';'  expected	5	None	add
88	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  +  ]))  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  +  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  +  ]))  {	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
89	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list().next())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.list().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.list().next())  {	  for(Reduction    reduction    :    reductions.entrySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
90	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(reduction.getType()).next())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(reduction.getType()).next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(reduction.getType()).next())  {	  for(Reduction    reduction    :    reductions.entrySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
91	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().values().iterator())  {  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().values().iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().values().iterator())  {	  for(Reduction    reduction    :    reductions.values().iterator())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
92	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator())  {	  for(Reduction    reduction    :    reductions.values().iterator())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
93	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.values().iterator())  {  [CE]  for-each  not  applicable  to  expression  type  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.values().iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductionMap.values().iterator())  {	  for(Reduction    reduction    :    reductions.values().iterator())    {    	non-compiled	[CE]  for-each  not  applicable  to  expression  type	18	None	replace
94	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values().iterator())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.values().iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.values().iterator())  {	  for(Reduction    reduction    :    reductions.values().iterator())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
95	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values(),  reduction.estimateSavings())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values(),  reduction.estimateSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values(),  reduction.estimateSavings())  {	  for(Reduction    reduction    :    reductions.values().iterator())    {    	non-compiled	[CE]  ')'  expected	18	None	replace
96	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.reductionMap.getSavings())  {  [CE]  cannot  find  symbol  reductionMap  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.reductionMap.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.reductionMap.getSavings())  {	  for(Reduction    reduction    :    reduction.reductionMap.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductionMap	29	None	replace
97	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.computeSavings())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.computeSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.computeSavings())  {	  for(Reduction    reduction    :    reduction.reductionMap.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
98	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().values())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator().values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
99	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().values())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
100	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).values())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
101	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().values())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.entrySet().values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
102	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  null);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost!=  null);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost!=  null);	  Preconditions.checkState(helperCodeCost    ==    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
103	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  >=  null);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  >=  null);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  >=  null);	  Preconditions.checkState(helperCodeCost    ==    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
104	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  <=  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  <=  SAVINGS_THRESHOLD);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  <=  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCodeCost    ==    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
105	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  <  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  <  SAVINGS_THRESHOLD);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  <  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCodeCost    ==    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
106	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  ==  InlineCostEstimator.getCost(helperCodeCost));  [CE]  class,  interface,  or  enum  expected  [FE]                                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  ==  InlineCostEstimator.getCost(helperCodeCost));  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  ==  InlineCostEstimator.getCost(helperCodeCost));	  Preconditions.checkState(helperCodeCost    ==    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
107	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  ==  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  ==  SAVINGS_THRESHOLD);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost!=  null  &&  helperCodeCost  ==  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCodeCost    ==    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
108	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list().iterator().next())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.list().iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.list().iterator().next())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator().next())    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
109	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).iterator().next())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).iterator().next())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator().next())    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
110	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().entrySet().iterator().next())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().entrySet().iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().entrySet().iterator().next())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator().next())    {    	non-compiled	[CE]  cannot  find  symbol	33	None	replace
111	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  1))  {  [CE]  no  suitable  method  found  for  toArray(int)  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  1))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  1))  {	  for(Reduction    reduction    :    reductions.toArray(reductions.size()))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int)	55	None	replace
112	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions,  reductions.size()))  {  [CE]  no  suitable  method  found  for  toArray(Collection<FunctionRewriter.Reduction>,int)  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions,  reductions.size()))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions,  reductions.size()))  {	  for(Reduction    reduction    :    reductions.toArray(reductions.size()))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(Collection<FunctionRewriter.Reduction>,int)	55	None	replace
113	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size(),  helperCodeCost))  {  [CE]  no  suitable  method  found  for  toArray(int,int)  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size(),  helperCodeCost))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions.size(),  helperCodeCost))  {	  for(Reduction    reduction    :    reductions.toArray(reductions.size()))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int,int)	55	None	replace
114	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  2))  {  [CE]  no  suitable  method  found  for  toArray(int)  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  2))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  2))  {	  for(Reduction    reduction    :    reductions.toArray(reductions.size()))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int)	55	None	replace
115	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()  +  helperCodeCost))  {  [CE]  no  suitable  method  found  for  toArray(int)  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()  +  helperCodeCost))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions.size()  +  helperCodeCost))  {	  for(Reduction    reduction    :    reductions.toArray(reductions.size()))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int)	55	None	replace
116	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reducers.size()  -  1))  {  [CE]  no  suitable  method  found  for  toArray(int)  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reducers.size()  -  1))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(reducers.size()  -  1))  {	  for(Reduction    reduction    :    reductions.toArray(reductions.size()))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int)	55	None	replace
117	[BUG]  [BUGGY]  for(int  reduction  :  reductions.toArray(reductions.size()))  {  [CE]  no  suitable  method  found  for  toArray(int)  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(int  reduction  :  reductions.toArray(reductions.size()))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(int  reduction  :  reductions.toArray(reductions.size()))  {	  for(Reduction    reduction    :    reductions.toArray(reductions.size()))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int)	55	None	replace
118	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator().clone())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().iterator().clone())  {	  for(Reduction    reduction    :    reductions.values().clone())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
119	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().clone())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().clone())  {	  for(Reduction    reduction    :    reductions.values().clone())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
120	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(reductions))  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(reductions))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().toArray(reductions))  {	  for(Reduction    reduction    :    reductions.values().clone())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
121	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().get(0).clone())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().get(0).clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().get(0).clone())  {	  for(Reduction    reduction    :    reductions.values().clone())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
122	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(helperCodeCost))  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(helperCodeCost))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().toArray(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.values().clone())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
123	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap.values())  {  [CE]  cannot  find  symbol  reductionMap  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.reductionMap.values())  {	  for(Reduction    reduction    :    reduction.reductions.values())    {    	non-compiled	[CE]  cannot  find  symbol  reductionMap	16	None	replace
124	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductions)  {  [CE]  cannot  find  symbol  reductions  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.reductions)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.reductions)  {	  for(Reduction    reduction    :    reduction.reductions.values())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	16	None	replace
125	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().getAllSavings())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().getAllSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.cloneTree().getAllSavings())  {	  for(Reduction    reduction    :    reductions.getAllSavings())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
126	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().getAllSavings())  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().getAllSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().getAllSavings())  {	  for(Reduction    reduction    :    reductions.getAllSavings())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
127	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.getAllSavings())  {  [CE]  cannot  find  symbol  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.getAllSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductionMap.getAllSavings())  {	  for(Reduction    reduction    :    reductions.getAllSavings())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
128	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.clone().getAllSavings())  {  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.clone().getAllSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.clone().getAllSavings())  {	  for(Reduction    reduction    :    reductions.getAllSavings())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
129	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getAllSavings())  {  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.getAllSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.getAllSavings())  {	  for(Reduction    reduction    :    reductions.getAllSavings())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
130	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getAllSavings())  {  [CE]  cannot  find  symbol  [FE]                                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getAllSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().getAllSavings())  {	  for(Reduction    reduction    :    reductions.getAllSavings())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
131	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().keySet())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().keySet())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().keySet())  {	  for(Reduction    reduction    :    reductions.keySet())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
132	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet())  {  [CE]  incompatible  types  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductionMap.keySet())  {	  for(Reduction    reduction    :    reductions.keySet())    {    	non-compiled	[CE]  incompatible  types	3	None	replace
133	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap.keySet())  {  [CE]  cannot  find  symbol  reductionMap  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap.keySet())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.reductionMap.keySet())  {	  for(Reduction    reduction    :    reductions.keySet())    {    	non-compiled	[CE]  cannot  find  symbol  reductionMap	3	None	replace
134	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).keySet())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).keySet())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).keySet())  {	  for(Reduction    reduction    :    reductions.keySet())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
135	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
136	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducers);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  externs,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
137	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducers);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
138	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
139	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
140	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  null);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  null);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
141	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  helperCodeCost)  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.get(0))    {    	non-compiled	[CE]  ')'  expected	21	None	replace
142	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  savings)  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0),  savings)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0),  savings)  {	  for(Reduction    reduction    :    reductions.get(0))    {    	non-compiled	[CE]  ')'  expected	21	None	replace
143	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reductions)  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reductions)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).reductions)  {	  for(Reduction    reduction    :    reductions.get(0))    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
144	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
145	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reducer);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  externs,  reducer);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
146	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducer);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
147	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducers,  null);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reducers,  null);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
148	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().size())  {  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().size())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().size())  {	  for(Reduction    reduction    :    reductions.size()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
149	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).size())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).size())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).size())  {	  for(Reduction    reduction    :    reductions.size()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
150	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext().getNext())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getNext().getNext())  {	  for(Reduction    reduction    :    reductions.size()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
151	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getFirstChild().getNext())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getFirstChild().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().getFirstChild().getFirstChild().getNext())  {	  for(Reduction    reduction    :    reductions.size()    -    1)    {    	non-compiled	[CE]  cannot  find  symbol	20	None	replace
152	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])).clone())  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])).clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])).clone())  {	  for(Reduction    reduction    :    reductions.iterator().clone())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
153	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
154	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducer);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
155	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
156	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reducerCode);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
157	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  reduction);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
158	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).next().reset())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).next().reset())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).next().reset())  {	  for(Reduction    reduction    :    reductions.iterator().next().reset())    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
159	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone().reset())  {  [CE]  clone()  has  protected  access  in  Object  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone().reset())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().clone().reset())  {	  for(Reduction    reduction    :    reductions.iterator().next().reset())    {    	non-compiled	[CE]  clone()  has  protected  access  in  Object	35	None	replace
160	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().next().reset())  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().next().reset())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().next().reset())  {	  for(Reduction    reduction    :    reductions.iterator().next().reset())    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
161	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  reduction.reset())  {  [CE]  ')'  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  reduction.reset())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next(),  reduction.reset())  {	  for(Reduction    reduction    :    reductions.iterator().next().reset())    {    	non-compiled	[CE]  ')'  expected	35	None	replace
162	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reset())  {  [CE]  cannot  find  symbol  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reset())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).reset())  {	  for(Reduction    reduction    :    reductions.iterator().next().reset())    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
163	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().next().reset())  {  [CE]  cannot  find  symbol  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().next().reset())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().next().reset())  {	  for(Reduction    reduction    :    reductions.iterator().next().reset())    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
164	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet().next())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.keySet().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductionMap.keySet().next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
165	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet(),  reduction.next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet(),  reduction.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  ')'  expected	44	None	replace
166	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.keySet().next())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.keySet().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.keySet().next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	44	None	replace
167	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().next(),  reduction.estimateSavings())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().next(),  reduction.estimateSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().next(),  reduction.estimateSavings())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  ')'  expected	44	None	replace
168	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer,  helperCodeCost))  {  [CE]  '('  or  '['  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer,  helperCodeCost))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer,  helperCodeCost))  {	  for(Reduction    reduction    :    reductions.toArray(new    ReductionGatherer))    {    	non-compiled	[CE]  '('  or  '['  expected	48	None	replace
169	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer),  helperCodeCost)  {  [CE]  '('  or  '['  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer),  helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.toArray(new    ReductionGatherer))    {    	non-compiled	[CE]  '('  or  '['  expected	48	None	replace
170	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer  +  helperCodeCost))  {  [CE]  '('  or  '['  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer  +  helperCodeCost))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer  +  helperCodeCost))  {	  for(Reduction    reduction    :    reductions.toArray(new    ReductionGatherer))    {    	non-compiled	[CE]  '('  or  '['  expected	48	None	replace
171	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer.SOURCE))  {  [CE]  '('  or  '['  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer.SOURCE))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer.SOURCE))  {	  for(Reduction    reduction    :    reductions.toArray(new    ReductionGatherer))    {    	non-compiled	[CE]  '('  or  '['  expected	48	None	replace
172	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).reset())  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values()).reset())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values()).reset())  {	  for(Reduction    reduction    :    reductions.values()).iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
173	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).values()).iterator())  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).values()).iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).values()).iterator())  {	  for(Reduction    reduction    :    reductions.values()).iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
174	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet()).iterator())  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet()).iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet()).iterator())  {	  for(Reduction    reduction    :    reductions.values()).iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
175	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).iterator(),  helperCodeCost)  {  [CE]  illegal  start  of  expression  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values()).iterator(),  helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values()).iterator(),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.values()).iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
176	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).removeFirst())  {  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values()).removeFirst())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values()).removeFirst())  {	  for(Reduction    reduction    :    reductions.values()).iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
177	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).getNext().getNext())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).getNext().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).getNext().getNext())  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
178	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().next().getNext())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().next().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().next().getNext())  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
179	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().next().getNext())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().next().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().next().getNext())  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
180	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).next().getNext())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).next().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).next().getNext())  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
181	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).getNext())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).getNext())  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
182	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree(),  reduction.getSavings())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree(),  reduction.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.cloneTree(),  reduction.getSavings())  {	  for(Reduction    reduction    :    reductions.cloneTree().getSavings())    {    	non-compiled	[CE]  ')'  expected	23	None	replace
183	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getSavings().cloneTree())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.getSavings().cloneTree())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.getSavings().cloneTree())  {	  for(Reduction    reduction    :    reductions.cloneTree().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
184	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.cloneTree().getSavings())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.cloneTree().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductionMap.cloneTree().getSavings())  {	  for(Reduction    reduction    :    reductions.cloneTree().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
185	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getSavings().cloneTree().getSavings())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.getSavings().cloneTree().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.getSavings().cloneTree().getSavings())  {	  for(Reduction    reduction    :    reductions.cloneTree().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
186	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.clone(),  compiler.getSavings())  {  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.clone(),  compiler.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.clone(),  compiler.getSavings())  {	  for(Reduction    reduction    :    reductions,    compiler.getSavings())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
187	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getReductions())  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getReductions())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.getReductions())  {	  for(Reduction    reduction    :    reductions,    compiler.getSavings())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
188	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getSavings(),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getSavings(),  helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.getSavings(),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions,    compiler.getSavings())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
189	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getReductionGatherer())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getReductionGatherer())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.getReductionGatherer())  {	  for(Reduction    reduction    :    reductions,    compiler.getSavings())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
190	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  >  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  >  SAVINGS_THRESHOLD);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  >  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCodeCost    <    SAVINGS_THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
191	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  >=  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  >=  SAVINGS_THRESHOLD);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  >=  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCodeCost    <    SAVINGS_THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
192	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  ==  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCodeCost    <    SAVINGS_THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
193	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost!=  SAVINGS_THRESHOLD);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost!=  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCodeCost    <    SAVINGS_THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
194	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  <  SAVINGS_THRESHOLD,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  <  SAVINGS_THRESHOLD,  savings);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  <  SAVINGS_THRESHOLD,  savings);	  Preconditions.checkState(helperCodeCost    <    SAVINGS_THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
195	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  >>  SAVINGS_THRESHOLD);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  >>  SAVINGS_THRESHOLD);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  >>  SAVINGS_THRESHOLD);	  Preconditions.checkState(helperCodeCost    <    SAVINGS_THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
196	[BUG]  [BUGGY]  for(Reduction  reduction  :  reducers.values().iterator())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reducers.values().iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reducers.values().iterator())  {	  for(Reduction    reduction    :    reducers.iterator())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
197	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.iterator().next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.iterator().next())  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	57	None	replace
198	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values(),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.values(),  helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.values(),  helperCodeCost)  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	57	None	replace
199	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.keySet())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.keySet())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.keySet())  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	57	None	replace
200	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.get(0))  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.get(0))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.get(0))  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	57	None	replace
201	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.clone())  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.clone())  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	57	None	replace
202	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values(),  savings)  {  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.values(),  savings)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.values(),  savings)  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	57	None	replace
203	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  helperCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
204	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
205	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
206	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
207	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  ||  reduction.getType()!=  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
208	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  aiderCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  aiderCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  aiderCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
209	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  reduction.next())  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  reduction.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().iterator(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
210	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  reducer.next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  reducer.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().iterator(),  reducer.next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
211	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values().iterator().next())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.values().iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.values().iterator().next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  cannot  find  symbol	43	None	replace
212	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).iterator().next())  {  [CE]  illegal  start  of  expression  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values()).iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values()).iterator().next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  illegal  start  of  expression	43	None	replace
213	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getSeconds())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.getSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.getSeconds())  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
214	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductions.getSeconds())  {  [CE]  cannot  find  symbol  reductions  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.reductions.getSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.reductions.getSeconds())  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	39	None	replace
215	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap.getSeconds())  {  [CE]  cannot  find  symbol  reductionMap  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.reductionMap.getSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.reductionMap.getSeconds())  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  cannot  find  symbol  reductionMap	39	None	replace
216	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getSeconds(),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.getSeconds(),  helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.getSeconds(),  helperCodeCost)  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  ')'  expected	39	None	replace
217	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
218	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reduction);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reduction);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
219	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
220	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
221	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducer);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducer);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
222	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reductions);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reductions);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
223	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.reductions())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.reductions())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.reductions())  {	  for(Reduction    reduction    :    reduction.values())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
224	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
225	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
226	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.reductionMap);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this.reductionMap);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  this.reductionMap);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
227	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list().iterator())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.list().iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.list().iterator())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
228	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().entrySet().iterator())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().entrySet().iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().entrySet().iterator())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator())    {    	non-compiled	[CE]  cannot  find  symbol	19	None	replace
229	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCodeCost)  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
230	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aiderCodeCost)  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aiderCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  aiderCodeCost)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
231	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(new  Reducer[reductions.size()  ]))  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(new  Reducer[reductions.size()  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().toArray(new  Reducer[reductions.size()  ]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  cannot  find  symbol	40	None	replace
232	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1]))  {  [CE]  incompatible  types  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  -  1]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  incompatible  types	40	None	replace
233	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCode)  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCode)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]),  helperCode)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	40	None	replace
234	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ])||  reduction.estimateSavings())  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ])||  reduction.estimateSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ])||  reduction.estimateSavings())  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	40	None	replace
235	[BUG]  [BUGGY]  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	add	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	compilable	  [FE]  IllegalStateException  	6	1	replace
236	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1]))  {  [FE]  IllegalStateException  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	compilable	  [FE]  IllegalStateException  	6	1	replace
237	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  helperCodeCost)  {  [CE]  ')'  expected  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]),  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
238	[BUG]  [BUGGY]  [FE]  NegativeArraySizeException  [FE]        IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  2]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	add	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  2]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	compilable	  [FE]  NegativeArraySizeException  	6	1	replace
239	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  2]))  {  [FE]  NegativeArraySizeException  [FE]        IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  2]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  2]))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	compilable	  [FE]  NegativeArraySizeException  	6	1	replace
240	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1))  {  [CE]  ']'  expected  [FE]          IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  -  1))  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  ']'  expected	6	None	replace
241	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])  +  helperCodeCost)  {  [CE]  bad  operand  types  for  binary  operator  '+'  [FE]            IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])  +  helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])  +  helperCodeCost)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '+'	6	None	replace
242	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])||  reduction.estimateSavings()  >  0)  {  [CE]  bad  operand  types  for  binary  operator  '||'  [FE]              IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])||  reduction.estimateSavings()  >  0)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])||  reduction.estimateSavings()  >  0)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  bad  operand  types  for  binary  operator  '||'	6	None	replace
243	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  savings);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  savings);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
244	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  HELPER_SOURCE);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
245	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  externs,  reductions,  helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  externs,  reductions,  helperCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
246	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  reduction);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  reduction);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
247	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  reducer);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  reducer);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
248	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().entrySet())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().entrySet())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.cloneTree().entrySet())  {	  for(Reduction    reduction    :    reductions.entrySet())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
249	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().values())  {  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().values())  {	  for(Reduction    reduction    :    reductions.values().iterator())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
250	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(new  Reduction[reductions.size()  ]))  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().toArray(new  Reduction[reductions.size()  ]))  {	  for(Reduction    reduction    :    reductions.values().iterator())    {    	non-compiled	[CE]  cannot  find  symbol	18	None	replace
251	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  savings.next())  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().iterator(),  savings.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().iterator(),  savings.next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
252	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  0);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost!=  0);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost!=  0);	  Preconditions.checkState(helperCodeCost    ==    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
253	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  ==  0);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  ==  0);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  ==  0);	  Preconditions.checkState(helperCodeCost    ==    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
254	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  >=  0);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  >=  0);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  >=  0);	  Preconditions.checkState(helperCodeCost    ==    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
255	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  >>  null);  [CE]  class,  interface,  or  enum  expected  [FE]                                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  >>  null);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  >>  null);	  Preconditions.checkState(helperCodeCost    ==    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
256	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])||  reducer.estimateSavings())  {  [CE]  cannot  find  symbol  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])||  reducer.estimateSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])||  reducer.estimateSavings())  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  cannot  find  symbol	6	None	replace
257	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])||  helperCodeCost!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])||  helperCodeCost!=  null)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])||  helperCodeCost!=  null)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	6	None	replace
258	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction.getType()  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction.getType()  ||  reduction.getType()  ==  Token.EXPR_RESULT);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  ==  reduction.getType()  ||  reduction.getType()  ==  Token.EXPR_RESULT);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
259	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT  +  helperCodeCost);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
260	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction.getType());  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  ==  reduction.getType());  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  ==  reduction.getType());	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
261	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.computeSavings())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.computeSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.computeSavings())  {	  for(Reduction    reduction    :    reduction.values())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
262	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getReductionStatements())  {  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getReductionStatements())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.getReductionStatements())  {	  for(Reduction    reduction    :    reductions,    compiler.getSavings())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
263	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost,  savings);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCodeCost,  savings);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
264	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  saving);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCodeCost,  saving);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
265	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().entrySet())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().entrySet())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().entrySet())  {	  for(Reduction    reduction    :    reductions.entrySet())    {    	non-compiled	[CE]  cannot  find  symbol	52	None	replace
266	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).next())  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values()).next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values()).next())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  illegal  start  of  expression	30	None	replace
267	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.values().next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.values().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.values().next())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
268	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values(),  reduction.next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values(),  reduction.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
269	[BUG]  [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(reduction);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	ReductionGatherer  reduction  =  compiler.getReductionGatherer(reduction);	  ReductionGatherer    reduction    =    compiler.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
270	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.iterator().values())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.iterator().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.iterator().values())  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	57	None	replace
271	[BUG]  [BUGGY]  For(Reduction  reduction  :  reducers.values())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reducers.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reducers.values())  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	57	None	replace
272	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.reductions.keySet())  {  [CE]  cannot  find  symbol  reductions  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  this.reductions.keySet())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  this.reductions.keySet())  {	  for(Reduction    reduction    :    this.reductions.iterator())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	50	None	replace
273	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.reductionMap.keySet())  {  [CE]  cannot  find  symbol  reductionMap  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  this.reductionMap.keySet())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  this.reductionMap.keySet())  {	  for(Reduction    reduction    :    this.reductions.iterator())    {    	non-compiled	[CE]  cannot  find  symbol  reductionMap	50	None	replace
274	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.reductionMap.values())  {  [CE]  cannot  find  symbol  reductionMap  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  this.reductionMap.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  this.reductionMap.values())  {	  for(Reduction    reduction    :    this.reductions.iterator())    {    	non-compiled	[CE]  cannot  find  symbol  reductionMap	50	None	replace
275	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reduction.values())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reduction.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator(),  reduction.values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  ')'  expected	14	None	replace
276	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reducer.values())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reducer.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator(),  reducer.values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  ')'  expected	14	None	replace
277	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list().values())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.list().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.list().values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
278	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reducer,  new  ReductionGatherer());	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
279	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducerCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducerCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducerCodeCost);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
280	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.clone(),  reducer.getSavings())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.clone(),  reducer.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.clone(),  reducer.getSavings())  {	  for(Reduction    reduction    :    reductions.clone().getSavings())    {    	non-compiled	[CE]  ')'  expected	25	None	replace
281	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().clone().getSavings())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().clone().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().clone().getSavings())  {	  for(Reduction    reduction    :    reductions.clone().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
282	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  reduction.getNext())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next(),  reduction.getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next(),  reduction.getNext())  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  ')'  expected	22	None	replace
283	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.iterator().next().getNext())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.iterator().next().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.iterator().next().getNext())  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  ')'  expected	22	None	replace
284	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getList().next().getNext())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.getList().next().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.getList().next().getNext())  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
285	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.cloneTree().getSavings())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.cloneTree().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.cloneTree().getSavings())  {	  for(Reduction    reduction    :    reductions.cloneTree().getSavings())    {    	non-compiled	[CE]  ')'  expected	23	None	replace
286	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree(),  reducer.getSavings())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree(),  reducer.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.cloneTree(),  reducer.getSavings())  {	  for(Reduction    reduction    :    reductions.cloneTree().getSavings())    {    	non-compiled	[CE]  ')'  expected	23	None	replace
287	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCode))  {  [CE]  no  suitable  method  found  for  toArray(Node)  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCode))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(helperCode))  {	  for(Reduction    reduction    :    reductions.toArray(reductions))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(Node)	4	None	replace
288	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductionMap.getReductions())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductionMap.getReductions())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductionMap.getReductions())  {	  for(Reduction    reduction    :    reductionMap.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	26	None	replace
289	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ])&&  helperCodeCost!=  null)  {  [CE]  incomparable  types:  int  and  <null>  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ])&&  helperCodeCost!=  null)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ])&&  helperCodeCost!=  null)  {	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  incomparable  types:  int  and  <null>	40	None	replace
290	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]));  [CE]  class,  interface,  or  enum  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]));  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ]));	  for(Reduction    reduction    :    reductions.toArray(new    Reducer[reductions.size()    ]))    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	40	None	replace
291	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer.FACTORY_METHOD_NAME))  {  [CE]  '('  or  '['  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer.FACTORY_METHOD_NAME))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer.FACTORY_METHOD_NAME))  {	  for(Reduction    reduction    :    reductions.keySet())    {    	non-compiled	[CE]  '('  or  '['  expected	3	None	replace
292	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(helperCodeCost))  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(helperCodeCost))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(helperCodeCost))  {	  for(Reduction    reduction    :    reductions.get(0))    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
293	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().get(0))  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().get(0))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().get(0))  {	  for(Reduction    reduction    :    reductions.get(0))    {    	non-compiled	[CE]  cannot  find  symbol	21	None	replace
294	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator(),  reduction.next())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator(),  reduction.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.entrySet().iterator(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	33	None	replace
295	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator(),  reducer.next())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator(),  reducer.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.entrySet().iterator(),  reducer.next())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	33	None	replace
296	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reducers);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCodeCost,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
297	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCodeCost,  reductions.size()))  {  [CE]  no  suitable  method  found  for  toArray(int,int)  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(helperCodeCost,  reductions.size()))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(helperCodeCost,  reductions.size()))  {	  for(Reduction    reduction    :    reductions.toArray(reductions.size()))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int,int)	55	None	replace
298	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterateSavings())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterateSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterateSavings())  {	  for(Reduction    reduction    :    reductions.getAllSavings())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
299	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  aiderCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
300	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HelperReducer.class);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  HelperReducer.class);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  HelperReducer.class);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
301	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  <  SAVINGS_THRESHOLD  +  helperCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  <  SAVINGS_THRESHOLD  +  helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  <  SAVINGS_THRESHOLD  +  helperCodeCost);	  Preconditions.checkState(helperCodeCost    <    SAVINGS_THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
302	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTreeSet().next())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTreeSet().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.cloneTreeSet().next())  {	  for(Reduction    reduction    :    reductions.entrySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
303	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(reduction.getName()).entrySet())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(reduction.getName()).entrySet())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(reduction.getName()).entrySet())  {	  for(Reduction    reduction    :    reductions.entrySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
304	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  compiler.getSavings())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  compiler.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator(),  compiler.getSavings())  {	  for(Reduction    reduction    :    reductions.iterator().getSavings())    {    	non-compiled	[CE]  ')'  expected	24	None	replace
305	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reducer.getSavings())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reducer.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator(),  reducer.getSavings())  {	  for(Reduction    reduction    :    reductions.iterator().getSavings())    {    	non-compiled	[CE]  ')'  expected	24	None	replace
306	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Reducer  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Reducer  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    Reducer  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  	5	None	add
307	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer());  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer());  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    NodeTraversal.traverse(compiler,  reduction,  new  ReturnStatementReducer());	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
308	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]));  [CE]  ';'  expected  [FE]        IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]));  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]));	  	non-compiled	[CE]  ';'  expected	5	None	add
309	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getReductions())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.getReductions())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.getReductions())  {	  for(Reduction    reduction    :    reduction.reductions.values())    {    	non-compiled	[CE]  cannot  find  symbol	16	None	replace
310	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.keySet().iterator(),  reduction.next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.keySet().iterator(),  reduction.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.keySet().iterator(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
311	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.keySet().iterator(),  reduction.next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.keySet().iterator(),  reduction.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.keySet().iterator(),  reduction.next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
312	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Element[reductions.size()  ]))  {  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Element[reductions.size()  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Element[reductions.size()  ]))  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
313	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.elements())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.elements())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.elements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
314	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reductions)  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reductions)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.reductions)  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
315	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.compiler())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.compiler())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.compiler())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
316	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reduceAllSavings())  {  [CE]  ')'  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.reduceAllSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.reduceAllSavings())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  ')'  expected	41	None	replace
317	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.root.getSavings())  {  [CE]  cannot  find  symbol  root  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  this.root.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  this.root.getSavings())  {	  for(Reduction    reduction    :    root.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  root	36	None	replace
318	[BUG]  [BUGGY]  for(Reduction  reduction  :  root.reductions.getSavings())  {  [CE]  cannot  find  symbol  reductions  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  root.reductions.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  root.reductions.getSavings())  {	  for(Reduction    reduction    :    root.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	36	None	replace
319	[BUG]  [BUGGY]  for(Reduction  reduction  :  elimination.getSavings())  {  [CE]  cannot  find  symbol  elimination  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  elimination.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  elimination.getSavings())  {	  for(Reduction    reduction    :    root.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  elimination	36	None	replace
320	[BUG]  [BUGGY]  for(Reduction  reduction  :  root.getSeconds())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  root.getSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  root.getSeconds())  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
321	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.cloneTree().getSeconds())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.cloneTree().getSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.cloneTree().getSeconds())  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
322	[BUG]  [BUGGY]  for(Reduction  reduction  :  reducer.getSeconds())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reducer.getSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reducer.getSeconds())  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
323	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.computeSeconds())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.computeSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.computeSeconds())  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
324	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().clone())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator().clone())  {	  for(Reduction    reduction    :    reductions.iterator().clone())    {    	non-compiled	[CE]  cannot  find  symbol	2	None	replace
325	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reduction.clone())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reduction.clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator(),  reduction.clone())  {	  for(Reduction    reduction    :    reductions.iterator().clone())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
326	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  helperCodeCost.clone())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  helperCodeCost.clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator(),  helperCodeCost.clone())  {	  for(Reduction    reduction    :    reductions.iterator().clone())    {    	non-compiled	[CE]  ')'  expected	2	None	replace
327	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).add(helperCodeCost);  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values()).add(helperCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values()).add(helperCodeCost);	  for(Reduction    reduction    :    reductions.values()).iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
328	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).reduce(helperCodeCost)  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values()).reduce(helperCodeCost)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values()).reduce(helperCodeCost)  {	  for(Reduction    reduction    :    reductions.values()).iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
329	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).addSeparator())  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values()).addSeparator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values()).addSeparator())  {	  for(Reduction    reduction    :    reductions.values()).iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
330	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().clone().values())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().clone().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().clone().values())  {	  for(Reduction    reduction    :    reductions.clone().values())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
331	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.clone(),  reducer.values())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.clone(),  reducer.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.clone(),  reducer.values())  {	  for(Reduction    reduction    :    reductions.clone().values())    {    	non-compiled	[CE]  ')'  expected	15	None	replace
332	[BUG]  [BUGGY]  for(Reduction  reduction  :  reducers.toArray(new  ReductionGatherer))  {  [CE]  '('  or  '['  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reducers.toArray(new  ReductionGatherer))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reducers.toArray(new  ReductionGatherer))  {	  for(Reduction    reduction    :    reductions.toArray(new    ReductionGatherer))    {    	non-compiled	[CE]  '('  or  '['  expected	48	None	replace
333	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().next().clone())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().next().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator().next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
334	[BUG]  [BUGGY]  for(Reduction  reduction  :  reducers.iterator().next().clone())  {  [CE]  clone()  has  protected  access  in  Object  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reducers.iterator().next().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reducers.iterator().next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  clone()  has  protected  access  in  Object	34	None	replace
335	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().get().clone())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().get().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().get().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
336	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  savings);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
337	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost  +  1);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost  +  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
338	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost  -  1);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost  -  1);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost  -  1);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
339	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  saving);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  saving);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(helperCodeCost,  saving);	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
340	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.reductions.getReductions())  {  [CE]  cannot  find  symbol  reductions  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  this.reductions.getReductions())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  this.reductions.getReductions())  {	  for(Reduction    reduction    :    this.reductions.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	37	None	replace
341	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.reductions.getRawSavings())  {  [CE]  cannot  find  symbol  reductions  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  this.reductions.getRawSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  this.reductions.getRawSavings())  {	  for(Reduction    reduction    :    this.reductions.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	37	None	replace
342	[BUG]  [BUGGY]  for(Reduction  reduction  :  allReductions.getSavings())  {  [CE]  cannot  find  symbol  allReductions  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  allReductions.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  allReductions.getSavings())  {	  for(Reduction    reduction    :    this.reductions.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  allReductions	37	None	replace
343	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.reductions.getAllReductions())  {  [CE]  cannot  find  symbol  reductions  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  this.reductions.getAllReductions())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  this.reductions.getAllReductions())  {	  for(Reduction    reduction    :    this.reductions.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	37	None	replace
344	[BUG]  [BUGGY]  for(Reduction  reduction  :  reducers.values())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reducers.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reducers.values())  {	  for(Reduction    reduction    :    reducers.iterator())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
345	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  aiderCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  aiderCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  aiderCodeCost);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
346	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values(),  reduction.clone())  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values(),  reduction.clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values(),  reduction.clone())  {	  for(Reduction    reduction    :    reductions.values().clone())    {    	non-compiled	[CE]  ')'  expected	1	None	replace
347	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(new  ReductionGatherer))  {  [CE]  '('  or  '['  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(new  ReductionGatherer))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().toArray(new  ReductionGatherer))  {	  for(Reduction    reduction    :    reductions.values().clone())    {    	non-compiled	[CE]  '('  or  '['  expected	1	None	replace
348	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.values().clone())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.values().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.values().clone())  {	  for(Reduction    reduction    :    reductions.values().clone())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
349	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet()).next())  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet()).next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet()).next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  illegal  start  of  expression	44	None	replace
350	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reduction())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reduction())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).reduction())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
351	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).remove())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).remove())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).remove())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
352	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).cloneTree())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).cloneTree())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).cloneTree())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
353	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getTree().cloneTree().getSavings())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.getTree().cloneTree().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.getTree().cloneTree().getSavings())  {	  for(Reduction    reduction    :    reduction.cloneTree().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
354	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().next().reset())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().iterator().next().reset())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().iterator().next().reset())  {	  for(Reduction    reduction    :    reductions.iterator().next().reset())    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
355	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reduction.next().reset())  {  [CE]  ')'  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator(),  reduction.next().reset())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator(),  reduction.next().reset())  {	  for(Reduction    reduction    :    reductions.iterator().next().reset())    {    	non-compiled	[CE]  ')'  expected	35	None	replace
356	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.list())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.list())  {	  for(Reduction    reduction    :    reductions.keySet())    {    	non-compiled	[CE]  cannot  find  symbol	3	None	replace
357	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])).iterator())  {  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])).iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])).iterator())  {	  for(Reduction    reduction    :    reductions.entrySet().iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	19	None	replace
358	[BUG]  [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(null);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(null);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	ReductionGatherer  reduction  =  compiler.getReductionGatherer(null);	  ReductionGatherer    reduction    =    compiler.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
359	[BUG]  [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGathererStructure();  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGathererStructure();  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	ReductionGatherer  reduction  =  compiler.getReductionGathererStructure();	  ReductionGatherer    reduction    =    compiler.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
360	[BUG]  [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGathererStandardReduction();  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGathererStandardReduction();  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	ReductionGatherer  reduction  =  compiler.getReductionGathererStandardReduction();	  ReductionGatherer    reduction    =    compiler.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
361	[BUG]  [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(reductions);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  ReductionGatherer  reduction  =  compiler.getReductionGatherer(reductions);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	ReductionGatherer  reduction  =  compiler.getReductionGatherer(reductions);	  ReductionGatherer    reduction    =    compiler.getReductionGatherer();    	non-compiled	[CE]  class,  interface,  or  enum  expected	46	None	replace
362	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values(),  reductions.iterator().next())  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values(),  reductions.iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values(),  reductions.iterator().next())  {	  for(Reduction    reduction    :    reductions.values().iterator().next())    {    	non-compiled	[CE]  ')'  expected	43	None	replace
363	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  null,  reducer);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  null,  reducer);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
364	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  reducer);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  reducer);	  NodeTraversal.traverse(compiler,    root,    reducer);    	non-compiled	[CE]  class,  interface,  or  enum  expected	13	None	replace
365	[BUG]  [BUGGY]  For(Reduction  reduction  :  reduction.getSavings())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reduction.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reduction.getSavings())  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	57	None	replace
366	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values()  +  1)  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.values()  +  1)  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.values()  +  1)  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	57	None	replace
367	[BUG]  [BUGGY]  For(Reduction  reduction  :  reduction.values())  {  [CE]  ')'  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reduction.values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reduction.values())  {	  For(Reduction    reduction    :    reductions.values())    {    	non-compiled	[CE]  ')'  expected	57	None	replace
368	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])&  0  <  reducer.estimateSavings();  [CE]  ')'  expected  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])&  0  <  reducer.estimateSavings();  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ])&  0  <  reducer.estimateSavings();	  for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    	non-compiled	[CE]  ')'  expected	6	None	replace
369	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getParent());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
370	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
371	[BUG]  [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	int  helperCodeCost  =  InlineCostEstimator.getCost(reduction.getSourceName());	  int    helperCodeCost    =    InlineCostEstimator.getCost(helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	8	None	replace
372	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.removeAll(reductions.entrySet().next()))  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.removeAll(reductions.entrySet().next()))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.removeAll(reductions.entrySet().next()))  {	  for(Reduction    reduction    :    reductions.entrySet().next())    {    	non-compiled	[CE]  cannot  find  symbol	56	None	replace
373	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.reductions.getSavings())  {  [CE]  cannot  find  symbol  reductions  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.reductions.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.reductions.getSavings())  {	  for(Reduction    reduction    :    reduction.reductions.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	28	None	replace
374	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).next().clone())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).next().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
375	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone());  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().clone());  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().clone());	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  class,  interface,  or  enum  expected	34	None	replace
376	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().next().clone())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().next().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.entrySet().next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
377	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list().next().clone())  {  [CE]  cannot  find  symbol  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.list().next().clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.list().next().clone())  {	  for(Reduction    reduction    :    reductions.iterator().next().clone())    {    	non-compiled	[CE]  cannot  find  symbol	34	None	replace
378	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducers);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  ReductionGatherer(),  reducers);	  NodeTraversal.traverse(compiler,    root,    new    ReductionGatherer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	47	None	replace
379	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reduction.size()  ]))  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reduction.size()  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reduction.size()  ]))  {	  for(Reduction    reduction    :    reducers.iterator())    {    	non-compiled	[CE]  cannot  find  symbol	51	None	replace
380	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.getTree().getSavings())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.getTree().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.getTree().getSavings())  {	  for(Reduction    reduction    :    reduction.cloneTree().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	38	None	replace
381	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Number  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [CE]  [FE]    IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Number  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    Number  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {	  	non-compiled	[CE]  	5	None	add
382	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Collection  <  Reduction>  reductions  =  reductions.iterator().next();  [CE]  illegal  start  of  expression  [FE]      IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Collection  <  Reduction>  reductions  =  reductions.iterator().next();  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    Collection  <  Reduction>  reductions  =  reductions.iterator().next();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
383	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Collection  <  Reduction>  reductions  =  reductions.iterator().next().getReductions();  [CE]  illegal  start  of  expression  [FE]        IllegalStateException    [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reduction[reductions.size()  ]))  {  Collection  <  Reduction>  reductions  =  reductions.iterator().next().getReductions();  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction    reduction    :    reductions.toArray(new    Reduction[reductions.size()    ]))    {    Collection  <  Reduction>  reductions  =  reductions.iterator().next().getReductions();	  	non-compiled	[CE]  illegal  start  of  expression	5	None	add
384	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(new  Reducer[reduction.size()  ]))  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().toArray(new  Reducer[reduction.size()  ]))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().toArray(new  Reducer[reduction.size()  ]))  {	  for(Reduction    reduction    :    reductions.values().clone())    {    	non-compiled	[CE]  cannot  find  symbol	1	None	replace
385	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducerCodeCost);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducerCodeCost);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducerCodeCost);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
386	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducers);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  new  GetterReducer(),  reducers);	  NodeTraversal.traverse(compiler,    root,    new    GetterReducer());    	non-compiled	[CE]  class,  interface,  or  enum  expected	60	None	replace
387	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getAllReductions())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.getAllReductions())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.getAllReductions())  {	  for(Reduction    reduction    :    reductions.getValues())    {    	non-compiled	[CE]  cannot  find  symbol	17	None	replace
388	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost  <  SAVINGS_THRESHOLD  +  1);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost  <  SAVINGS_THRESHOLD  +  1);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost  <  SAVINGS_THRESHOLD  +  1);	  Preconditions.checkState(helperCodeCost    <    SAVINGS_THRESHOLD);    	non-compiled	[CE]  class,  interface,  or  enum  expected	58	None	replace
389	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values().clone().getSavings())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values().clone().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values().clone().getSavings())  {	  for(Reduction    reduction    :    reductions.clone().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
390	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get().getSavings())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get().getSavings())  {	  for(Reduction    reduction    :    reductions.clone().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
391	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet().getSavings())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet().getSavings())  {	  for(Reduction    reduction    :    reductions.clone().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	25	None	replace
392	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reductions.next())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).reductions.next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).reductions.next())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
393	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get(0).removeFirst())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get(0).removeFirst())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get(0).removeFirst())  {	  for(Reduction    reduction    :    reductions.get(0).next())    {    	non-compiled	[CE]  cannot  find  symbol	32	None	replace
394	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().getSeconds())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree().getSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.cloneTree().getSeconds())  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
395	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().getSeconds())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().getSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().getSeconds())  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
396	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.removeSeconds())  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.removeSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.removeSeconds())  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  cannot  find  symbol	39	None	replace
397	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getSeconds())  {  [CE]  ')'  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  compiler.getSeconds())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  compiler.getSeconds())  {	  for(Reduction    reduction    :    reduction.getSeconds())    {    	non-compiled	[CE]  ')'  expected	39	None	replace
398	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTreeMap().getSavings())  {  [CE]  cannot  find  symbol  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTreeMap().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.cloneTreeMap().getSavings())  {	  for(Reduction    reduction    :    reduction.reductionMap.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	29	None	replace
399	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getTree().getSavings())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.getTree().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.getTree().getSavings())  {	  for(Reduction    reduction    :    reductions.cloneTree().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	23	None	replace
400	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.get().values())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.get().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.get().values())  {	  for(Reduction    reduction    :    reductions.clone().values())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
401	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray().values())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray().values())  {	  for(Reduction    reduction    :    reductions.clone().values())    {    	non-compiled	[CE]  cannot  find  symbol	15	None	replace
402	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  reducers);  [CE]  class,  interface,  or  enum  expected  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  this,  reducers);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  this,  reducers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
403	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savers);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savers);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savers);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
404	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  savings);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  savings);	  NodeTraversal.traverse(compiler,    root,    reducers);    	non-compiled	[CE]  class,  interface,  or  enum  expected	10	None	replace
405	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.values().next())  {  [CE]  ')'  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.values().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.values().next())  {	  for(Reduction    reduction    :    reductions.values().next())    {    	non-compiled	[CE]  ')'  expected	30	None	replace
406	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  helperCodeCost))  {  [CE]  no  suitable  method  found  for  toArray(int)  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  helperCodeCost))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(reductions.size()  -  helperCodeCost))  {	  for(Reduction    reduction    :    reductions.toArray(reductions.size()))    {    	non-compiled	[CE]  no  suitable  method  found  for  toArray(int)	55	None	replace
407	[BUG]  [BUGGY]  Preconditions.checkState(helperCodeCost!=  -1);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(helperCodeCost!=  -1);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(helperCodeCost!=  -1);	  Preconditions.checkState(helperCodeCost    ==    null);    	non-compiled	[CE]  class,  interface,  or  enum  expected	12	None	replace
408	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer.HELPER_SOURCE))  {  [CE]  '('  or  '['  expected  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer.HELPER_SOURCE))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  ReductionGatherer.HELPER_SOURCE))  {	  for(Reduction    reduction    :    reductions.toArray(new    ReductionGatherer))    {    	non-compiled	[CE]  '('  or  '['  expected	48	None	replace
409	[BUG]  [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	Preconditions.checkState(reduction.getType()  ==  Token.EXPR_RESULT,  reduction);	  Preconditions.checkState(reduction.getType()    ==    Token.EXPR_RESULT);    	non-compiled	[CE]  class,  interface,  or  enum  expected	59	None	replace
410	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).toArray(new  Reducer[reduction.estimateSavings()))  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values()).toArray(new  Reducer[reduction.estimateSavings()))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values()).toArray(new  Reducer[reduction.estimateSavings()))  {	  for(Reduction    reduction    :    reductions.values()).iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
411	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).add(reduction);  [CE]  illegal  start  of  expression  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values()).add(reduction);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values()).add(reduction);	  for(Reduction    reduction    :    reductions.values()).iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
412	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.values()).iterator();  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.values()).iterator();  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.values()).iterator();	  for(Reduction    reduction    :    reductions.values()).iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	54	None	replace
413	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().reset())  {  [CE]  cannot  find  symbol  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().reset())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().reset())  {	  for(Reduction    reduction    :    reductions.iterator().next().reset())    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
414	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list().next().reset())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.list().next().reset())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.list().next().reset())  {	  for(Reduction    reduction    :    reductions.iterator().next().reset())    {    	non-compiled	[CE]  cannot  find  symbol	35	None	replace
415	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.keySet(),  reductions.iterator().next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.keySet(),  reductions.iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.keySet(),  reductions.iterator().next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
416	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  mapping.keySet().iterator().next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  mapping.keySet().iterator().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  mapping.keySet().iterator().next())  {	  for(Reduction    reduction    :    reductions.keySet().iterator().next())    {    	non-compiled	[CE]  ')'  expected	31	None	replace
417	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ])).clone())  {  [CE]  illegal  start  of  expression  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ])).clone())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.toArray(new  Reducer[reductions.size()  ])).clone())  {	  for(Reduction    reduction    :    reductions.iterator().clone())    {    	non-compiled	[CE]  illegal  start  of  expression	2	None	replace
418	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null);  [CE]  class,  interface,  or  enum  expected  [FE]                            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  null);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  null);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
419	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  reducer);  [CE]  class,  interface,  or  enum  expected  [FE]                              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reduction,  reducer);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reduction,  reducer);	  NodeTraversal.traverse(compiler,    root,    reduction);    	non-compiled	[CE]  class,  interface,  or  enum  expected	11	None	replace
420	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction,  compiler.getSavings())  {  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction,  compiler.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction,  compiler.getSavings())  {	  for(Reduction    reduction    :    root.getSavings())    {    	non-compiled	[CE]  ')'  expected	36	None	replace
421	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.reductions.values()).iterator())  {  [CE]  illegal  start  of  expression  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  this.reductions.values()).iterator())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  this.reductions.values()).iterator())  {	  for(Reduction    reduction    :    this.reductions.iterator())    {    	non-compiled	[CE]  illegal  start  of  expression	50	None	replace
422	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator().values())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.entrySet().iterator().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.entrySet().iterator().values())  {	  for(Reduction    reduction    :    reductions.iterator().values())    {    	non-compiled	[CE]  cannot  find  symbol	14	None	replace
423	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.removeAllSavings())  {  [CE]  cannot  find  symbol  [FE]                          IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.removeAllSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.removeAllSavings())  {	  for(Reduction    reduction    :    reductions.getAllSavings())    {    	non-compiled	[CE]  cannot  find  symbol	27	None	replace
424	[BUG]  [BUGGY]  for(Reduction  reduction  :  this.reductions.iterator().getSavings())  {  [CE]  cannot  find  symbol  reductions  [FE]              IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  this.reductions.iterator().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  this.reductions.iterator().getSavings())  {	  for(Reduction    reduction    :    this.reductions.getSavings())    {    	non-compiled	[CE]  cannot  find  symbol  reductions	37	None	replace
425	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree(),  compiler.getSavings())  {  [CE]  ')'  expected  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.cloneTree(),  compiler.getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.cloneTree(),  compiler.getSavings())  {	  for(Reduction    reduction    :    reductions,    compiler.getSavings())    {    	non-compiled	[CE]  ')'  expected	53	None	replace
426	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saver);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  saver);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  saver);	  NodeTraversal.traverse(compiler,    root,    reductions,    helperCodeCost);    	non-compiled	[CE]  class,  interface,  or  enum  expected	9	None	replace
427	[BUG]  [BUGGY]  for(Reduction  reduction  :  reduction.cloneTree().values())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reduction.cloneTree().values())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reduction.cloneTree().values())  {	  for(Reduction    reduction    :    reduction.values())    {    	non-compiled	[CE]  cannot  find  symbol	42	None	replace
428	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  this);  [CE]  class,  interface,  or  enum  expected  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  this);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  this);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
429	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [CE]  class,  interface,  or  enum  expected  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  aiderCode);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
430	[BUG]  [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [CE]  class,  interface,  or  enum  expected  [FE]                        IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	NodeTraversal.traverse(compiler,  root,  reductions,  helperCode);	  NodeTraversal.traverse(compiler,    root,    reductions);    	non-compiled	[CE]  class,  interface,  or  enum  expected	7	None	replace
431	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.listElements())  {  [CE]  cannot  find  symbol  [FE]            IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.listElements())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.listElements())  {	  for(Reduction    reduction    :    reductions.elements())    {    	non-compiled	[CE]  cannot  find  symbol	45	None	replace
432	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getNext().getNext())  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getNext().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().getNext().getNext())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
433	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getNext().getNext().getNext())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().getNext().getNext().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().getNext().getNext().getNext())  {	  for(Reduction    reduction    :    reductions,    compiler.values())    {    	non-compiled	[CE]  cannot  find  symbol	41	None	replace
434	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions,  mapping.keySet().next())  {  [CE]  ')'  expected  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions,  mapping.keySet().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions,  mapping.keySet().next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  ')'  expected	44	None	replace
435	[BUG]  [BUGGY]  For(Reduction  reduction  :  reductions.keySet().next())  {  [CE]  ')'  expected  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  For(Reduction  reduction  :  reductions.keySet().next())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	For(Reduction  reduction  :  reductions.keySet().next())  {	  for(Reduction    reduction    :    reductions.keySet().next())    {    	non-compiled	[CE]  ')'  expected	44	None	replace
436	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.getAllSavings().iterator().getSavings())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.getAllSavings().iterator().getSavings())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.getAllSavings().iterator().getSavings())  {	  for(Reduction    reduction    :    reductions.iterator().getSavings())    {    	non-compiled	[CE]  cannot  find  symbol	24	None	replace
437	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().remove())  {  [CE]  cannot  find  symbol  [FE]                IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().remove())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().remove())  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
438	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().reduce(reduction.getName()))  {  [CE]  cannot  find  symbol  [FE]                  IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().reduce(reduction.getName()))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().reduce(reduction.getName()))  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
439	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.list().next().getNext())  {  [CE]  cannot  find  symbol  [FE]                    IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.list().next().getNext())  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.list().next().getNext())  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
440	[BUG]  [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().reduce(reduction.getValue()))  {  [CE]  cannot  find  symbol  [FE]                      IllegalStateException      [CONTEXT]      Node  helperCode  =  parseHelperCode(reducer);  if  (helperCode  ==  null)  {  continue;  }  int  helperCodeCost  =  InlineCostEstimator.getCost(helperCode);  int  savings  =  0;      [BUGGY]  for(Reduction  reduction  :  reductions.iterator().next().reduce(reduction.getValue()))  {  [BUGGY]      savings  +=  reduction.estimateSavings();  }    if  (savings  >  (helperCodeCost  +  SAVINGS_THRESHOLD))  {  for  (Reduction  reduction  :  reductions)  {  reduction.apply();  }  [CLASS]  FunctionRewriter  Reduction  ReductionGatherer  Reducer  EmptyFunctionReducer  SingleReturnStatementReducer  IdentityReducer  ReturnConstantReducer  GetterReducer  SetterReducer  [METHOD]  process  [RETURN_TYPE]  void  Node  externs  Node  root  [VARIABLES]  Multimap  reductionMap  reductions  AbstractCompiler  compiler  Reduction  reduction  boolean  Node  addingRoot  externs  helperCode  newChild  oldChild  parent  root  Collection  reductions  List  reducers  String  FACTORY_METHOD_NAME  HELPER_SOURCE  Reducer  reducer  int  SAVINGS_THRESHOLD  helperCodeCost  savings  	projects/Closure55/src/com/google/javascript/jscomp/FunctionRewriter.java	0.3333333333333333	87	87	1	replace	for(Reduction  reduction  :  reductions.iterator().next().reduce(reduction.getValue()))  {	  for(Reduction    reduction    :    reductions.iterator().next().getNext())    {    	non-compiled	[CE]  cannot  find  symbol	22	None	replace
